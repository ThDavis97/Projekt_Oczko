
OczkoGierka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098a8  080098a8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080098a8  080098a8  000198a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098b0  080098b0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098b0  080098b0  000198b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098b4  080098b4  000198b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080098b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047f8  20000084  0800993c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000487c  0800993c  0002487c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019636  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c7  00000000  00000000  000396ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  0003ccb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  0003dea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ff1  00000000  00000000  0003ef30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015041  00000000  00000000  00058f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a29b1  00000000  00000000  0006df62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00110913  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f04  00000000  00000000  00110968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009680 	.word	0x08009680

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08009680 	.word	0x08009680

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000598:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <vApplicationGetIdleTaskMemory+0x30>)
 800059e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	200000a0 	.word	0x200000a0
 80005b8:	20000154 	.word	0x20000154

080005bc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <vApplicationGetTimerTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005da:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	20000354 	.word	0x20000354
 80005ec:	20000408 	.word	0x20000408

080005f0 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
 80005fc:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80005fe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000602:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000606:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800060a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800060c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800060e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000610:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000612:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f80e 	bl	8000646 <Lcd_init>

	return lcd;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	461d      	mov	r5, r3
 800062e:	f107 0410 	add.w	r4, r7, #16
 8000632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000636:	e894 0003 	ldmia.w	r4, {r0, r1}
 800063a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800063e:	68f8      	ldr	r0, [r7, #12]
 8000640:	3728      	adds	r7, #40	; 0x28
 8000642:	46bd      	mov	sp, r7
 8000644:	bdb0      	pop	{r4, r5, r7, pc}

08000646 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7d9b      	ldrb	r3, [r3, #22]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d10c      	bne.n	8000670 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000656:	2133      	movs	r1, #51	; 0x33
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f000 f87b 	bl	8000754 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800065e:	2132      	movs	r1, #50	; 0x32
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f000 f877 	bl	8000754 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000666:	2128      	movs	r1, #40	; 0x28
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 f873 	bl	8000754 <lcd_write_command>
 800066e:	e003      	b.n	8000678 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000670:	2138      	movs	r1, #56	; 0x38
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 f86e 	bl	8000754 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000678:	2101      	movs	r1, #1
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f86a 	bl	8000754 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000680:	210c      	movs	r1, #12
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 f866 	bl	8000754 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000688:	2106      	movs	r1, #6
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f000 f862 	bl	8000754 <lcd_write_command>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	4906      	ldr	r1, [pc, #24]	; (80006c4 <Lcd_int+0x2c>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f008 fc34 	bl	8008f18 <siprintf>

	Lcd_string(lcd, buffer);
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	4619      	mov	r1, r3
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f806 	bl	80006c8 <Lcd_string>
}
 80006bc:	bf00      	nop
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	08009698 	.word	0x08009698

080006c8 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]
 80006d6:	e00a      	b.n	80006ee <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	4413      	add	r3, r2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f000 f864 	bl	80007b0 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	3301      	adds	r3, #1
 80006ec:	73fb      	strb	r3, [r7, #15]
 80006ee:	7bfc      	ldrb	r4, [r7, #15]
 80006f0:	6838      	ldr	r0, [r7, #0]
 80006f2:	f7ff fd75 	bl	80001e0 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	429c      	cmp	r4, r3
 80006fa:	d3ed      	bcc.n	80006d8 <Lcd_string+0x10>
	}
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	bd90      	pop	{r4, r7, pc}
	...

08000708 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
 8000714:	4613      	mov	r3, r2
 8000716:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	4a07      	ldr	r2, [pc, #28]	; (8000738 <Lcd_cursor+0x30>)
 800071c:	5cd2      	ldrb	r2, [r2, r3]
 800071e:	78bb      	ldrb	r3, [r7, #2]
 8000720:	4413      	add	r3, r2
 8000722:	b2db      	uxtb	r3, r3
 8000724:	3b80      	subs	r3, #128	; 0x80
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4619      	mov	r1, r3
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f000 f812 	bl	8000754 <lcd_write_command>
	#endif
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	080097f8 	.word	0x080097f8

0800073c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000744:	2101      	movs	r1, #1
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f000 f804 	bl	8000754 <lcd_write_command>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6898      	ldr	r0, [r3, #8]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	899b      	ldrh	r3, [r3, #12]
 8000768:	2200      	movs	r2, #0
 800076a:	4619      	mov	r1, r3
 800076c:	f004 fa7c 	bl	8004c68 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	7d9b      	ldrb	r3, [r3, #22]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d111      	bne.n	800079c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	091b      	lsrs	r3, r3, #4
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2204      	movs	r2, #4
 8000780:	4619      	mov	r1, r3
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f000 f842 	bl	800080c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2204      	movs	r2, #4
 8000792:	4619      	mov	r1, r3
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f839 	bl	800080c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800079a:	e005      	b.n	80007a8 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	2208      	movs	r2, #8
 80007a0:	4619      	mov	r1, r3
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f832 	bl	800080c <lcd_write>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6898      	ldr	r0, [r3, #8]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	899b      	ldrh	r3, [r3, #12]
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	f004 fa4e 	bl	8004c68 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	7d9b      	ldrb	r3, [r3, #22]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d111      	bne.n	80007f8 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	091b      	lsrs	r3, r3, #4
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2204      	movs	r2, #4
 80007dc:	4619      	mov	r1, r3
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f000 f814 	bl	800080c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	f003 030f 	and.w	r3, r3, #15
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2204      	movs	r2, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f000 f80b 	bl	800080c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80007f6:	e005      	b.n	8000804 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2208      	movs	r2, #8
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f804 	bl	800080c <lcd_write>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	70fb      	strb	r3, [r7, #3]
 8000818:	4613      	mov	r3, r2
 800081a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 800081c:	2300      	movs	r3, #0
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	e019      	b.n	8000856 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	4413      	add	r3, r2
 800082c:	6818      	ldr	r0, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	685a      	ldr	r2, [r3, #4]
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	8819      	ldrh	r1, [r3, #0]
 800083a:	78fa      	ldrb	r2, [r7, #3]
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	fa42 f303 	asr.w	r3, r2, r3
 8000842:	b2db      	uxtb	r3, r3
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	b2db      	uxtb	r3, r3
 800084a:	461a      	mov	r2, r3
 800084c:	f004 fa0c 	bl	8004c68 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	3301      	adds	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	7bfa      	ldrb	r2, [r7, #15]
 8000858:	78bb      	ldrb	r3, [r7, #2]
 800085a:	429a      	cmp	r2, r3
 800085c:	d3e1      	bcc.n	8000822 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6918      	ldr	r0, [r3, #16]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	8a9b      	ldrh	r3, [r3, #20]
 8000866:	2201      	movs	r2, #1
 8000868:	4619      	mov	r1, r3
 800086a:	f004 f9fd 	bl	8004c68 <HAL_GPIO_WritePin>
	DELAY(1);
 800086e:	2001      	movs	r0, #1
 8000870:	f003 fb9a 	bl	8003fa8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6918      	ldr	r0, [r3, #16]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	8a9b      	ldrh	r3, [r3, #20]
 800087c:	2200      	movs	r2, #0
 800087e:	4619      	mov	r1, r3
 8000880:	f004 f9f2 	bl	8004c68 <HAL_GPIO_WritePin>
}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <card_for_number>:

osThreadId defaultTaskHandle;
/* USER CODE BEGIN PV */
//Funkcja do "przeliczania" kart na liczby np. 13(K - King) -> 4
  uint8_t card_for_number (uint8_t card)
  {
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	  if (card <= 10) return card;
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b0a      	cmp	r3, #10
 800089a:	d801      	bhi.n	80008a0 <card_for_number+0x14>
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	e01c      	b.n	80008da <card_for_number+0x4e>
	  else
	  {
		  switch (card)
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	3b0b      	subs	r3, #11
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d817      	bhi.n	80008d8 <card_for_number+0x4c>
 80008a8:	a201      	add	r2, pc, #4	; (adr r2, 80008b0 <card_for_number+0x24>)
 80008aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ae:	bf00      	nop
 80008b0:	080008c1 	.word	0x080008c1
 80008b4:	080008c7 	.word	0x080008c7
 80008b8:	080008cd 	.word	0x080008cd
 80008bc:	080008d3 	.word	0x080008d3
		  	  {
		  	  case 11: card = 2; break;  //Gdy pojawi sie Jopek
 80008c0:	2302      	movs	r3, #2
 80008c2:	71fb      	strb	r3, [r7, #7]
 80008c4:	e008      	b.n	80008d8 <card_for_number+0x4c>
		  	  case 12: card = 3; break;  //Gdy pojawi sie Dama
 80008c6:	2303      	movs	r3, #3
 80008c8:	71fb      	strb	r3, [r7, #7]
 80008ca:	e005      	b.n	80008d8 <card_for_number+0x4c>
		  	  case 13: card = 4; break;  //Gdy pojawi sie Krol
 80008cc:	2304      	movs	r3, #4
 80008ce:	71fb      	strb	r3, [r7, #7]
 80008d0:	e002      	b.n	80008d8 <card_for_number+0x4c>
		  	  case 14: card = 11; break; //Gdy pojawi sie As
 80008d2:	230b      	movs	r3, #11
 80008d4:	71fb      	strb	r3, [r7, #7]
 80008d6:	bf00      	nop
		  	  }
		  	  return card;
 80008d8:	79fb      	ldrb	r3, [r7, #7]
	  }
  }
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e8:	b5b0      	push	{r4, r5, r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ee:	f003 fb19 	bl	8003f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f2:	f000 f9cf 	bl	8000c94 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f6:	f000 fad7 	bl	8000ea8 <MX_GPIO_Init>
  MX_TIM4_Init();
 80008fa:	f000 fa87 	bl	8000e0c <MX_TIM4_Init>
  MX_ADC1_Init();
 80008fe:	f000 fa33 	bl	8000d68 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

    //OBSLUGA RZECZY ZA POMOCA HARDWARE-----------------------------------------------------------
   	//Włączenie odpowiednich peryferiów:
   	HAL_TIM_Base_Start_IT(&htim4); //Włączenie przewań od TIM4
 8000902:	48b7      	ldr	r0, [pc, #732]	; (8000be0 <main+0x2f8>)
 8000904:	f004 fec6 	bl	8005694 <HAL_TIM_Base_Start_IT>
   	HAL_ADC_Start(&hadc1); //Włączenie obsługi przetwornika ADC na kanale 1
 8000908:	48b6      	ldr	r0, [pc, #728]	; (8000be4 <main+0x2fc>)
 800090a:	f003 fbb5 	bl	8004078 <HAL_ADC_Start>

   	//OBSLUGA FreeRtos----------------------------------------------------------------------------
   	//Utworzenie zadań
   	xTaskCreate(Task1, "LCD_support", 128, NULL, 0, &Task1_Handler);
 800090e:	4bb6      	ldr	r3, [pc, #728]	; (8000be8 <main+0x300>)
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	2300      	movs	r3, #0
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2300      	movs	r3, #0
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	49b4      	ldr	r1, [pc, #720]	; (8000bec <main+0x304>)
 800091c:	48b4      	ldr	r0, [pc, #720]	; (8000bf0 <main+0x308>)
 800091e:	f006 fa86 	bl	8006e2e <xTaskCreate>
   	xTaskCreate(Task2, "Button_support", 128, NULL, 0, &Task2_Handler);
 8000922:	4bb4      	ldr	r3, [pc, #720]	; (8000bf4 <main+0x30c>)
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	2300      	movs	r3, #0
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	2300      	movs	r3, #0
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	49b2      	ldr	r1, [pc, #712]	; (8000bf8 <main+0x310>)
 8000930:	48b2      	ldr	r0, [pc, #712]	; (8000bfc <main+0x314>)
 8000932:	f006 fa7c 	bl	8006e2e <xTaskCreate>
   	xTaskCreate(Task3, "Game_management", 128, NULL, 0, &Task3_Handler);
 8000936:	4bb2      	ldr	r3, [pc, #712]	; (8000c00 <main+0x318>)
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	2300      	movs	r3, #0
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2300      	movs	r3, #0
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	49b0      	ldr	r1, [pc, #704]	; (8000c04 <main+0x31c>)
 8000944:	48b0      	ldr	r0, [pc, #704]	; (8000c08 <main+0x320>)
 8000946:	f006 fa72 	bl	8006e2e <xTaskCreate>

   	//Utworzenie kolejek
   	interfaceLCDqueue = xQueueCreate(10, sizeof(uint8_t)); //do wyświetlania "szablonów" na ekranie LCD
 800094a:	2200      	movs	r2, #0
 800094c:	2101      	movs	r1, #1
 800094e:	200a      	movs	r0, #10
 8000950:	f005 fcaa 	bl	80062a8 <xQueueGenericCreate>
 8000954:	4603      	mov	r3, r0
 8000956:	4aad      	ldr	r2, [pc, #692]	; (8000c0c <main+0x324>)
 8000958:	6013      	str	r3, [r2, #0]
   	wins_U_LCDqueue = xQueueCreate(10, sizeof(uint8_t));   //do wyświetlania liczby wygranych rund przez gracza na ekranie LCD
 800095a:	2200      	movs	r2, #0
 800095c:	2101      	movs	r1, #1
 800095e:	200a      	movs	r0, #10
 8000960:	f005 fca2 	bl	80062a8 <xQueueGenericCreate>
 8000964:	4603      	mov	r3, r0
 8000966:	4aaa      	ldr	r2, [pc, #680]	; (8000c10 <main+0x328>)
 8000968:	6013      	str	r3, [r2, #0]
   	wins_C_LCDqueue = xQueueCreate(10, sizeof(uint8_t));   //do wyświetlania liczby wygranych rund przez komputer na ekranie LCD
 800096a:	2200      	movs	r2, #0
 800096c:	2101      	movs	r1, #1
 800096e:	200a      	movs	r0, #10
 8000970:	f005 fc9a 	bl	80062a8 <xQueueGenericCreate>
 8000974:	4603      	mov	r3, r0
 8000976:	4aa7      	ldr	r2, [pc, #668]	; (8000c14 <main+0x32c>)
 8000978:	6013      	str	r3, [r2, #0]
   	points_U_LCDqueue = xQueueCreate(10, sizeof(uint8_t)); //do wyświetlania liczby zdobytych punktów przez gracza na ekranie LCD
 800097a:	2200      	movs	r2, #0
 800097c:	2101      	movs	r1, #1
 800097e:	200a      	movs	r0, #10
 8000980:	f005 fc92 	bl	80062a8 <xQueueGenericCreate>
 8000984:	4603      	mov	r3, r0
 8000986:	4aa4      	ldr	r2, [pc, #656]	; (8000c18 <main+0x330>)
 8000988:	6013      	str	r3, [r2, #0]
   	points_C_LCDqueue = xQueueCreate(10, sizeof(uint8_t)); //do wyświetlania liczby zdobytych punktów przez komputer na ekranie LCD
 800098a:	2200      	movs	r2, #0
 800098c:	2101      	movs	r1, #1
 800098e:	200a      	movs	r0, #10
 8000990:	f005 fc8a 	bl	80062a8 <xQueueGenericCreate>
 8000994:	4603      	mov	r3, r0
 8000996:	4aa1      	ldr	r2, [pc, #644]	; (8000c1c <main+0x334>)
 8000998:	6013      	str	r3, [r2, #0]

   	wins_U_end_LCDqueue = xQueueCreate(10, sizeof(uint8_t)); //do wyświetlenia liczby wygranych rund przez gracza na ekranie podsumowywującym grę
 800099a:	2200      	movs	r2, #0
 800099c:	2101      	movs	r1, #1
 800099e:	200a      	movs	r0, #10
 80009a0:	f005 fc82 	bl	80062a8 <xQueueGenericCreate>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a9e      	ldr	r2, [pc, #632]	; (8000c20 <main+0x338>)
 80009a8:	6013      	str	r3, [r2, #0]
	wins_C_end_LCDqueue = xQueueCreate(10, sizeof(uint8_t)); //do wyświetlenia liczby wygranych rund przez komputer na ekranie podsumowywującym grę
 80009aa:	2200      	movs	r2, #0
 80009ac:	2101      	movs	r1, #1
 80009ae:	200a      	movs	r0, #10
 80009b0:	f005 fc7a 	bl	80062a8 <xQueueGenericCreate>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4a9b      	ldr	r2, [pc, #620]	; (8000c24 <main+0x33c>)
 80009b8:	6013      	str	r3, [r2, #0]
	winner_the_gameLCDqueue = xQueueCreate(10, sizeof(uint8_t)); //do wyświetlenia kto wygrał grę
 80009ba:	2200      	movs	r2, #0
 80009bc:	2101      	movs	r1, #1
 80009be:	200a      	movs	r0, #10
 80009c0:	f005 fc72 	bl	80062a8 <xQueueGenericCreate>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4a98      	ldr	r2, [pc, #608]	; (8000c28 <main+0x340>)
 80009c8:	6013      	str	r3, [r2, #0]

	//Kolejki służące do przesłania informacji jaką wylosowaną kartę wyświetlić na ekranie LCD
	//Karty dla gracza
   	card1_U_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 80009ca:	2200      	movs	r2, #0
 80009cc:	2101      	movs	r1, #1
 80009ce:	200a      	movs	r0, #10
 80009d0:	f005 fc6a 	bl	80062a8 <xQueueGenericCreate>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4a95      	ldr	r2, [pc, #596]	; (8000c2c <main+0x344>)
 80009d8:	6013      	str	r3, [r2, #0]
   	card2_U_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 80009da:	2200      	movs	r2, #0
 80009dc:	2101      	movs	r1, #1
 80009de:	200a      	movs	r0, #10
 80009e0:	f005 fc62 	bl	80062a8 <xQueueGenericCreate>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a92      	ldr	r2, [pc, #584]	; (8000c30 <main+0x348>)
 80009e8:	6013      	str	r3, [r2, #0]
   	card3_U_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 80009ea:	2200      	movs	r2, #0
 80009ec:	2101      	movs	r1, #1
 80009ee:	200a      	movs	r0, #10
 80009f0:	f005 fc5a 	bl	80062a8 <xQueueGenericCreate>
 80009f4:	4603      	mov	r3, r0
 80009f6:	4a8f      	ldr	r2, [pc, #572]	; (8000c34 <main+0x34c>)
 80009f8:	6013      	str	r3, [r2, #0]
   	card4_U_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 80009fa:	2200      	movs	r2, #0
 80009fc:	2101      	movs	r1, #1
 80009fe:	200a      	movs	r0, #10
 8000a00:	f005 fc52 	bl	80062a8 <xQueueGenericCreate>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4a8c      	ldr	r2, [pc, #560]	; (8000c38 <main+0x350>)
 8000a08:	6013      	str	r3, [r2, #0]
   	card5_U_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	200a      	movs	r0, #10
 8000a10:	f005 fc4a 	bl	80062a8 <xQueueGenericCreate>
 8000a14:	4603      	mov	r3, r0
 8000a16:	4a89      	ldr	r2, [pc, #548]	; (8000c3c <main+0x354>)
 8000a18:	6013      	str	r3, [r2, #0]
   	card6_U_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	200a      	movs	r0, #10
 8000a20:	f005 fc42 	bl	80062a8 <xQueueGenericCreate>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4a86      	ldr	r2, [pc, #536]	; (8000c40 <main+0x358>)
 8000a28:	6013      	str	r3, [r2, #0]
   	card7_U_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	200a      	movs	r0, #10
 8000a30:	f005 fc3a 	bl	80062a8 <xQueueGenericCreate>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4a83      	ldr	r2, [pc, #524]	; (8000c44 <main+0x35c>)
 8000a38:	6013      	str	r3, [r2, #0]
   	card8_U_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	200a      	movs	r0, #10
 8000a40:	f005 fc32 	bl	80062a8 <xQueueGenericCreate>
 8000a44:	4603      	mov	r3, r0
 8000a46:	4a80      	ldr	r2, [pc, #512]	; (8000c48 <main+0x360>)
 8000a48:	6013      	str	r3, [r2, #0]
   	card9_U_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f005 fc2a 	bl	80062a8 <xQueueGenericCreate>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4a7d      	ldr	r2, [pc, #500]	; (8000c4c <main+0x364>)
 8000a58:	6013      	str	r3, [r2, #0]
   	//Karty dla komputera (CPU)
   	card1_C_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	200a      	movs	r0, #10
 8000a60:	f005 fc22 	bl	80062a8 <xQueueGenericCreate>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4a7a      	ldr	r2, [pc, #488]	; (8000c50 <main+0x368>)
 8000a68:	6013      	str	r3, [r2, #0]
   	card2_C_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	200a      	movs	r0, #10
 8000a70:	f005 fc1a 	bl	80062a8 <xQueueGenericCreate>
 8000a74:	4603      	mov	r3, r0
 8000a76:	4a77      	ldr	r2, [pc, #476]	; (8000c54 <main+0x36c>)
 8000a78:	6013      	str	r3, [r2, #0]
   	card3_C_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	200a      	movs	r0, #10
 8000a80:	f005 fc12 	bl	80062a8 <xQueueGenericCreate>
 8000a84:	4603      	mov	r3, r0
 8000a86:	4a74      	ldr	r2, [pc, #464]	; (8000c58 <main+0x370>)
 8000a88:	6013      	str	r3, [r2, #0]
   	card4_C_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f005 fc0a 	bl	80062a8 <xQueueGenericCreate>
 8000a94:	4603      	mov	r3, r0
 8000a96:	4a71      	ldr	r2, [pc, #452]	; (8000c5c <main+0x374>)
 8000a98:	6013      	str	r3, [r2, #0]
   	card5_C_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	200a      	movs	r0, #10
 8000aa0:	f005 fc02 	bl	80062a8 <xQueueGenericCreate>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4a6e      	ldr	r2, [pc, #440]	; (8000c60 <main+0x378>)
 8000aa8:	6013      	str	r3, [r2, #0]
   	card6_C_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2101      	movs	r1, #1
 8000aae:	200a      	movs	r0, #10
 8000ab0:	f005 fbfa 	bl	80062a8 <xQueueGenericCreate>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4a6b      	ldr	r2, [pc, #428]	; (8000c64 <main+0x37c>)
 8000ab8:	6013      	str	r3, [r2, #0]
   	card7_C_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 8000aba:	2200      	movs	r2, #0
 8000abc:	2101      	movs	r1, #1
 8000abe:	200a      	movs	r0, #10
 8000ac0:	f005 fbf2 	bl	80062a8 <xQueueGenericCreate>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4a68      	ldr	r2, [pc, #416]	; (8000c68 <main+0x380>)
 8000ac8:	6013      	str	r3, [r2, #0]
   	card8_C_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 8000aca:	2200      	movs	r2, #0
 8000acc:	2101      	movs	r1, #1
 8000ace:	200a      	movs	r0, #10
 8000ad0:	f005 fbea 	bl	80062a8 <xQueueGenericCreate>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	4a65      	ldr	r2, [pc, #404]	; (8000c6c <main+0x384>)
 8000ad8:	6013      	str	r3, [r2, #0]
   	card9_C_LCDqueue = xQueueCreate(10, sizeof(uint8_t));
 8000ada:	2200      	movs	r2, #0
 8000adc:	2101      	movs	r1, #1
 8000ade:	200a      	movs	r0, #10
 8000ae0:	f005 fbe2 	bl	80062a8 <xQueueGenericCreate>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	4a62      	ldr	r2, [pc, #392]	; (8000c70 <main+0x388>)
 8000ae8:	6013      	str	r3, [r2, #0]

   	//Utworzenie semaforow binarnych
   	//Do zarządzania przyciskami
   	vSemaphoreCreateBinary(Semaphore_nowa_gra_pressed); //informuje czy przycisk nowa gra został wciśnięty
 8000aea:	2203      	movs	r2, #3
 8000aec:	2100      	movs	r1, #0
 8000aee:	2001      	movs	r0, #1
 8000af0:	f005 fbda 	bl	80062a8 <xQueueGenericCreate>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4a5f      	ldr	r2, [pc, #380]	; (8000c74 <main+0x38c>)
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	4b5e      	ldr	r3, [pc, #376]	; (8000c74 <main+0x38c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <main+0x228>
 8000b02:	4b5c      	ldr	r3, [pc, #368]	; (8000c74 <main+0x38c>)
 8000b04:	6818      	ldr	r0, [r3, #0]
 8000b06:	2300      	movs	r3, #0
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f005 fc26 	bl	800635c <xQueueGenericSend>
   	vSemaphoreCreateBinary(Semaphore_reset_pressed); //informuje czy przycisk reset został wciśnięty
 8000b10:	2203      	movs	r2, #3
 8000b12:	2100      	movs	r1, #0
 8000b14:	2001      	movs	r0, #1
 8000b16:	f005 fbc7 	bl	80062a8 <xQueueGenericCreate>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a56      	ldr	r2, [pc, #344]	; (8000c78 <main+0x390>)
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	4b55      	ldr	r3, [pc, #340]	; (8000c78 <main+0x390>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d006      	beq.n	8000b36 <main+0x24e>
 8000b28:	4b53      	ldr	r3, [pc, #332]	; (8000c78 <main+0x390>)
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	f005 fc13 	bl	800635c <xQueueGenericSend>
   	vSemaphoreCreateBinary(Semaphore_kolejna_karta_pressed); //informuje czy przycisk kolejna karta został wciśnięty
 8000b36:	2203      	movs	r2, #3
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f005 fbb4 	bl	80062a8 <xQueueGenericCreate>
 8000b40:	4603      	mov	r3, r0
 8000b42:	4a4e      	ldr	r2, [pc, #312]	; (8000c7c <main+0x394>)
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	4b4d      	ldr	r3, [pc, #308]	; (8000c7c <main+0x394>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d006      	beq.n	8000b5c <main+0x274>
 8000b4e:	4b4b      	ldr	r3, [pc, #300]	; (8000c7c <main+0x394>)
 8000b50:	6818      	ldr	r0, [r3, #0]
 8000b52:	2300      	movs	r3, #0
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	f005 fc00 	bl	800635c <xQueueGenericSend>
   	vSemaphoreCreateBinary(Semaphore_wystarczy_kart_pressed);//informuje czy przycisk wystarczy kart został wciśnięty
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2001      	movs	r0, #1
 8000b62:	f005 fba1 	bl	80062a8 <xQueueGenericCreate>
 8000b66:	4603      	mov	r3, r0
 8000b68:	4a45      	ldr	r2, [pc, #276]	; (8000c80 <main+0x398>)
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	4b44      	ldr	r3, [pc, #272]	; (8000c80 <main+0x398>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d006      	beq.n	8000b82 <main+0x29a>
 8000b74:	4b42      	ldr	r3, [pc, #264]	; (8000c80 <main+0x398>)
 8000b76:	6818      	ldr	r0, [r3, #0]
 8000b78:	2300      	movs	r3, #0
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	f005 fbed 	bl	800635c <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b82:	4b40      	ldr	r3, [pc, #256]	; (8000c84 <main+0x39c>)
 8000b84:	1d3c      	adds	r4, r7, #4
 8000b86:	461d      	mov	r5, r3
 8000b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f005 f990 	bl	8005ebe <osThreadCreate>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a39      	ldr	r2, [pc, #228]	; (8000c88 <main+0x3a0>)
 8000ba2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ba4:	f005 f984 	bl	8005eb0 <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	HAL_Delay(1000);
 8000ba8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bac:	f003 f9fc 	bl	8003fa8 <HAL_Delay>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000bb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb4:	4835      	ldr	r0, [pc, #212]	; (8000c8c <main+0x3a4>)
 8000bb6:	f004 f870 	bl	8004c9a <HAL_GPIO_TogglePin>

	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000bba:	210a      	movs	r1, #10
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <main+0x2fc>)
 8000bbe:	f003 fb0f 	bl	80041e0 <HAL_ADC_PollForConversion>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1ef      	bne.n	8000ba8 <main+0x2c0>
	{
		ADC_measure = HAL_ADC_GetValue(&hadc1);
 8000bc8:	4806      	ldr	r0, [pc, #24]	; (8000be4 <main+0x2fc>)
 8000bca:	f003 fb94 	bl	80042f6 <HAL_ADC_GetValue>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	4b2f      	ldr	r3, [pc, #188]	; (8000c90 <main+0x3a8>)
 8000bd4:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);
 8000bd6:	4803      	ldr	r0, [pc, #12]	; (8000be4 <main+0x2fc>)
 8000bd8:	f003 fa4e 	bl	8004078 <HAL_ADC_Start>
	HAL_Delay(1000);
 8000bdc:	e7e4      	b.n	8000ba8 <main+0x2c0>
 8000bde:	bf00      	nop
 8000be0:	20004680 	.word	0x20004680
 8000be4:	20004704 	.word	0x20004704
 8000be8:	200046cc 	.word	0x200046cc
 8000bec:	080096a8 	.word	0x080096a8
 8000bf0:	08001161 	.word	0x08001161
 8000bf4:	200046f0 	.word	0x200046f0
 8000bf8:	080096b4 	.word	0x080096b4
 8000bfc:	080024e1 	.word	0x080024e1
 8000c00:	20004770 	.word	0x20004770
 8000c04:	080096c4 	.word	0x080096c4
 8000c08:	080025b9 	.word	0x080025b9
 8000c0c:	200047d8 	.word	0x200047d8
 8000c10:	200046e4 	.word	0x200046e4
 8000c14:	20004790 	.word	0x20004790
 8000c18:	2000467c 	.word	0x2000467c
 8000c1c:	20004784 	.word	0x20004784
 8000c20:	20004780 	.word	0x20004780
 8000c24:	200046d8 	.word	0x200046d8
 8000c28:	20004674 	.word	0x20004674
 8000c2c:	20004760 	.word	0x20004760
 8000c30:	2000476c 	.word	0x2000476c
 8000c34:	200046c8 	.word	0x200046c8
 8000c38:	200046dc 	.word	0x200046dc
 8000c3c:	200047d0 	.word	0x200047d0
 8000c40:	2000474c 	.word	0x2000474c
 8000c44:	20004758 	.word	0x20004758
 8000c48:	20004764 	.word	0x20004764
 8000c4c:	200046ec 	.word	0x200046ec
 8000c50:	200047cc 	.word	0x200047cc
 8000c54:	200046fc 	.word	0x200046fc
 8000c58:	20004774 	.word	0x20004774
 8000c5c:	200046d0 	.word	0x200046d0
 8000c60:	200047dc 	.word	0x200047dc
 8000c64:	2000477c 	.word	0x2000477c
 8000c68:	200046e8 	.word	0x200046e8
 8000c6c:	200046f8 	.word	0x200046f8
 8000c70:	20004754 	.word	0x20004754
 8000c74:	20004750 	.word	0x20004750
 8000c78:	2000475c 	.word	0x2000475c
 8000c7c:	200047c8 	.word	0x200047c8
 8000c80:	200046e0 	.word	0x200046e0
 8000c84:	080096d4 	.word	0x080096d4
 8000c88:	20004678 	.word	0x20004678
 8000c8c:	40020c00 	.word	0x40020c00
 8000c90:	200046d4 	.word	0x200046d4

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b094      	sub	sp, #80	; 0x50
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 0320 	add.w	r3, r7, #32
 8000c9e:	2230      	movs	r2, #48	; 0x30
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f008 f85c 	bl	8008d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <SystemClock_Config+0xcc>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	4a27      	ldr	r2, [pc, #156]	; (8000d60 <SystemClock_Config+0xcc>)
 8000cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc8:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <SystemClock_Config+0xcc>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <SystemClock_Config+0xd0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a21      	ldr	r2, [pc, #132]	; (8000d64 <SystemClock_Config+0xd0>)
 8000cde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <SystemClock_Config+0xd0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d00:	2300      	movs	r3, #0
 8000d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d04:	2308      	movs	r3, #8
 8000d06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000d08:	2364      	movs	r3, #100	; 0x64
 8000d0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000d10:	2308      	movs	r3, #8
 8000d12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d14:	f107 0320 	add.w	r3, r7, #32
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f003 ffd9 	bl	8004cd0 <HAL_RCC_OscConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d24:	f002 ff6a 	bl	8003bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d28:	230f      	movs	r3, #15
 8000d2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2103      	movs	r1, #3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f004 fa3a 	bl	80051c0 <HAL_RCC_ClockConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d52:	f002 ff53 	bl	8003bfc <Error_Handler>
  }
}
 8000d56:	bf00      	nop
 8000d58:	3750      	adds	r7, #80	; 0x50
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40007000 	.word	0x40007000

08000d68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <MX_ADC1_Init+0x9c>)
 8000d7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d86:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000da8:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <MX_ADC1_Init+0xa0>)
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc6:	480e      	ldr	r0, [pc, #56]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dc8:	f003 f912 	bl	8003ff0 <HAL_ADC_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dd2:	f002 ff13 	bl	8003bfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de2:	463b      	mov	r3, r7
 8000de4:	4619      	mov	r1, r3
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000de8:	f003 fa92 	bl	8004310 <HAL_ADC_ConfigChannel>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000df2:	f002 ff03 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20004704 	.word	0x20004704
 8000e04:	40012000 	.word	0x40012000
 8000e08:	0f000001 	.word	0x0f000001

08000e0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e20:	463b      	mov	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e28:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <MX_TIM4_Init+0x94>)
 8000e2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ea4 <MX_TIM4_Init+0x98>)
 8000e2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50000-1;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_TIM4_Init+0x94>)
 8000e30:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000e34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_TIM4_Init+0x94>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_TIM4_Init+0x94>)
 8000e3e:	2228      	movs	r2, #40	; 0x28
 8000e40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <MX_TIM4_Init+0x94>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_TIM4_Init+0x94>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e4e:	4814      	ldr	r0, [pc, #80]	; (8000ea0 <MX_TIM4_Init+0x94>)
 8000e50:	f004 fbd0 	bl	80055f4 <HAL_TIM_Base_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000e5a:	f002 fecf 	bl	8003bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <MX_TIM4_Init+0x94>)
 8000e6c:	f004 fd7c 	bl	8005968 <HAL_TIM_ConfigClockSource>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000e76:	f002 fec1 	bl	8003bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e82:	463b      	mov	r3, r7
 8000e84:	4619      	mov	r1, r3
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <MX_TIM4_Init+0x94>)
 8000e88:	f004 ff78 	bl	8005d7c <HAL_TIMEx_MasterConfigSynchronization>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e92:	f002 feb3 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20004680 	.word	0x20004680
 8000ea4:	40000800 	.word	0x40000800

08000ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	; 0x30
 8000eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
 8000ec2:	4ba1      	ldr	r3, [pc, #644]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4aa0      	ldr	r2, [pc, #640]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000ec8:	f043 0310 	orr.w	r3, r3, #16
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b9e      	ldr	r3, [pc, #632]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0310 	and.w	r3, r3, #16
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	4b9a      	ldr	r3, [pc, #616]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a99      	ldr	r2, [pc, #612]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b97      	ldr	r3, [pc, #604]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b93      	ldr	r3, [pc, #588]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a92      	ldr	r2, [pc, #584]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b90      	ldr	r3, [pc, #576]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b8c      	ldr	r3, [pc, #560]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a8b      	ldr	r2, [pc, #556]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b89      	ldr	r3, [pc, #548]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	4b85      	ldr	r3, [pc, #532]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a84      	ldr	r2, [pc, #528]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b82      	ldr	r3, [pc, #520]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b7e      	ldr	r3, [pc, #504]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a7d      	ldr	r2, [pc, #500]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b7b      	ldr	r3, [pc, #492]	; (8001148 <MX_GPIO_Init+0x2a0>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|D4_Pin|D5_Pin|D6_Pin
 8000f66:	2200      	movs	r2, #0
 8000f68:	f641 7188 	movw	r1, #8072	; 0x1f88
 8000f6c:	4877      	ldr	r0, [pc, #476]	; (800114c <MX_GPIO_Init+0x2a4>)
 8000f6e:	f003 fe7b 	bl	8004c68 <HAL_GPIO_WritePin>
                          |D7_Pin|RS_Pin|E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2101      	movs	r1, #1
 8000f76:	4876      	ldr	r0, [pc, #472]	; (8001150 <MX_GPIO_Init+0x2a8>)
 8000f78:	f003 fe76 	bl	8004c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000f82:	4874      	ldr	r0, [pc, #464]	; (8001154 <MX_GPIO_Init+0x2ac>)
 8000f84:	f003 fe70 	bl	8004c68 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	486c      	ldr	r0, [pc, #432]	; (800114c <MX_GPIO_Init+0x2a4>)
 8000f9c:	f003 fcc8 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin D4_Pin D5_Pin D6_Pin
                           D7_Pin RS_Pin E_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|D4_Pin|D5_Pin|D6_Pin
 8000fa0:	f641 7388 	movw	r3, #8072	; 0x1f88
 8000fa4:	61fb      	str	r3, [r7, #28]
                          |D7_Pin|RS_Pin|E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4864      	ldr	r0, [pc, #400]	; (800114c <MX_GPIO_Init+0x2a4>)
 8000fba:	f003 fcb9 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000fbe:	2332      	movs	r3, #50	; 0x32
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fc2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	485e      	ldr	r0, [pc, #376]	; (800114c <MX_GPIO_Init+0x2a4>)
 8000fd4:	f003 fcac 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4858      	ldr	r0, [pc, #352]	; (8001150 <MX_GPIO_Init+0x2a8>)
 8000ff0:	f003 fc9e 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001004:	2305      	movs	r3, #5
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	4850      	ldr	r0, [pc, #320]	; (8001150 <MX_GPIO_Init+0x2a8>)
 8001010:	f003 fc8e 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001014:	2301      	movs	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001018:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	484b      	ldr	r0, [pc, #300]	; (8001158 <MX_GPIO_Init+0x2b0>)
 800102a:	f003 fc81 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800102e:	2310      	movs	r3, #16
 8001030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800103e:	2306      	movs	r3, #6
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	4843      	ldr	r0, [pc, #268]	; (8001158 <MX_GPIO_Init+0x2b0>)
 800104a:	f003 fc71 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800104e:	23e0      	movs	r3, #224	; 0xe0
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800105e:	2305      	movs	r3, #5
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4619      	mov	r1, r3
 8001068:	483b      	ldr	r0, [pc, #236]	; (8001158 <MX_GPIO_Init+0x2b0>)
 800106a:	f003 fc61 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800106e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001080:	2305      	movs	r3, #5
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	4834      	ldr	r0, [pc, #208]	; (800115c <MX_GPIO_Init+0x2b4>)
 800108c:	f003 fc50 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pins : Przycisk_nowa_gra_Pin Przycisk_reset_Pin Przycisk_wystarczy_kart_Pin Przycisk_kolejna_karta_Pin */
  GPIO_InitStruct.Pin = Przycisk_nowa_gra_Pin|Przycisk_reset_Pin|Przycisk_wystarczy_kart_Pin|Przycisk_kolejna_karta_Pin;
 8001090:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109a:	2301      	movs	r3, #1
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	482b      	ldr	r0, [pc, #172]	; (8001154 <MX_GPIO_Init+0x2ac>)
 80010a6:	f003 fc43 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010aa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80010ae:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	4824      	ldr	r0, [pc, #144]	; (8001154 <MX_GPIO_Init+0x2ac>)
 80010c4:	f003 fc34 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010c8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010da:	2306      	movs	r3, #6
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	481a      	ldr	r0, [pc, #104]	; (8001150 <MX_GPIO_Init+0x2a8>)
 80010e6:	f003 fc23 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80010ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	4816      	ldr	r0, [pc, #88]	; (8001158 <MX_GPIO_Init+0x2b0>)
 8001100:	f003 fc16 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001104:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001116:	230a      	movs	r3, #10
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <MX_GPIO_Init+0x2b0>)
 8001122:	f003 fc05 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001126:	2320      	movs	r3, #32
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_GPIO_Init+0x2ac>)
 800113a:	f003 fbf9 	bl	8004930 <HAL_GPIO_Init>

}
 800113e:	bf00      	nop
 8001140:	3730      	adds	r7, #48	; 0x30
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40021000 	.word	0x40021000
 8001150:	40020800 	.word	0x40020800
 8001154:	40020c00 	.word	0x40020c00
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400

08001160 <Task1>:

/* USER CODE BEGIN 4 */

//Obsługa LCD
void Task1 (void *argument)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b095      	sub	sp, #84	; 0x54
 8001164:	af04      	add	r7, sp, #16
 8001166:	6078      	str	r0, [r7, #4]
	//Definicje do obsługi ekranu LCD
	Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port,D7_GPIO_Port };
 8001168:	4bda      	ldr	r3, [pc, #872]	; (80014d4 <Task1+0x374>)
 800116a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800116e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Lcd_PinType pins[] = { D4_Pin, D5_Pin, D6_Pin, D7_Pin };
 8001174:	4ad8      	ldr	r2, [pc, #864]	; (80014d8 <Task1+0x378>)
 8001176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800117e:	e883 0003 	stmia.w	r3, {r0, r1}
	Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, E_GPIO_Port, E_Pin, LCD_4_BIT_MODE);
 8001182:	f107 0010 	add.w	r0, r7, #16
 8001186:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800118a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800118e:	2300      	movs	r3, #0
 8001190:	9303      	str	r3, [sp, #12]
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	4bd0      	ldr	r3, [pc, #832]	; (80014dc <Task1+0x37c>)
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	4bce      	ldr	r3, [pc, #824]	; (80014dc <Task1+0x37c>)
 80011a4:	f7ff fa24 	bl	80005f0 <Lcd_create>
	Lcd_init(&lcd);
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fa4a 	bl	8000646 <Lcd_init>
	Lcd_clear(&lcd);
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fac0 	bl	800073c <Lcd_clear>

	uint8_t data_received; //Zmienna przechowujaca otrzymane dane

	//Wyświetlenie ekranu startowego
	Lcd_cursor(&lcd,0,0); //Ustawienie kursora na zerowej pozycji zerowego wiersza
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fa9f 	bl	8000708 <Lcd_cursor>
	Lcd_string(&lcd," Press new game "); //Wyświetlenie napisu
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	49c4      	ldr	r1, [pc, #784]	; (80014e0 <Task1+0x380>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fa79 	bl	80006c8 <Lcd_string>
	Lcd_cursor(&lcd,1,0);
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	2200      	movs	r2, #0
 80011dc:	2101      	movs	r1, #1
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fa92 	bl	8000708 <Lcd_cursor>
	Lcd_string(&lcd,"BestProjectOn SW");
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	49be      	ldr	r1, [pc, #760]	; (80014e4 <Task1+0x384>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fa6c 	bl	80006c8 <Lcd_string>

	for(;;)
	{
		//Wyswietlanie szablonow na ekranie LCD
		if((xQueueReceive(interfaceLCDqueue, &(data_received), 10)) == pdTRUE)
 80011f0:	4bbd      	ldr	r3, [pc, #756]	; (80014e8 <Task1+0x388>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f107 010f 	add.w	r1, r7, #15
 80011f8:	220a      	movs	r2, #10
 80011fa:	4618      	mov	r0, r3
 80011fc:	f005 fa48 	bl	8006690 <xQueueReceive>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	f040 80e2 	bne.w	80013cc <Task1+0x26c>
		{
			if (data_received == screen_default) { Lcd_cursor(&lcd,0,0); Lcd_string(&lcd,"U:         |    ");
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d119      	bne.n	8001242 <Task1+0xe2>
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fa76 	bl	8000708 <Lcd_cursor>
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	49b2      	ldr	r1, [pc, #712]	; (80014ec <Task1+0x38c>)
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fa50 	bl	80006c8 <Lcd_string>
												   Lcd_cursor(&lcd,1,0); Lcd_string(&lcd,"C:         |    "); }
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	2200      	movs	r2, #0
 800122e:	2101      	movs	r1, #1
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fa69 	bl	8000708 <Lcd_cursor>
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	49ad      	ldr	r1, [pc, #692]	; (80014f0 <Task1+0x390>)
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fa43 	bl	80006c8 <Lcd_string>
			if (data_received == screen_loading) { Lcd_cursor(&lcd,0,2); Lcd_string(&lcd,"Shuffling");
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d133      	bne.n	80012b0 <Task1+0x150>
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	2202      	movs	r2, #2
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fa59 	bl	8000708 <Lcd_cursor>
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	49a6      	ldr	r1, [pc, #664]	; (80014f4 <Task1+0x394>)
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fa33 	bl	80006c8 <Lcd_string>
			                                       Lcd_cursor(&lcd,0,12); Lcd_string(&lcd,"   ");
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	220c      	movs	r2, #12
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fa4c 	bl	8000708 <Lcd_cursor>
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	49a0      	ldr	r1, [pc, #640]	; (80014f8 <Task1+0x398>)
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fa26 	bl	80006c8 <Lcd_string>
												   Lcd_cursor(&lcd,1,2); Lcd_string(&lcd,"the cards");
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2202      	movs	r2, #2
 8001282:	2101      	movs	r1, #1
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fa3f 	bl	8000708 <Lcd_cursor>
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	499b      	ldr	r1, [pc, #620]	; (80014fc <Task1+0x39c>)
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fa19 	bl	80006c8 <Lcd_string>
												   Lcd_cursor(&lcd,1,12); Lcd_string(&lcd,"   ");}
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	220c      	movs	r2, #12
 800129c:	2101      	movs	r1, #1
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fa32 	bl	8000708 <Lcd_cursor>
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4993      	ldr	r1, [pc, #588]	; (80014f8 <Task1+0x398>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fa0c 	bl	80006c8 <Lcd_string>
			if (data_received == screen_winner_this_round_U) { Lcd_cursor(&lcd,0,14); Lcd_string(&lcd,"W");
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d119      	bne.n	80012ea <Task1+0x18a>
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	220e      	movs	r2, #14
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fa22 	bl	8000708 <Lcd_cursor>
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	498d      	ldr	r1, [pc, #564]	; (8001500 <Task1+0x3a0>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f9fc 	bl	80006c8 <Lcd_string>
												   	   	   	   Lcd_cursor(&lcd,1,14); Lcd_string(&lcd,"L"); }
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	220e      	movs	r2, #14
 80012d6:	2101      	movs	r1, #1
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fa15 	bl	8000708 <Lcd_cursor>
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	4988      	ldr	r1, [pc, #544]	; (8001504 <Task1+0x3a4>)
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f9ef 	bl	80006c8 <Lcd_string>
			if (data_received == screen_winner_this_round_C) { Lcd_cursor(&lcd,0,14); Lcd_string(&lcd,"L");
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d119      	bne.n	8001324 <Task1+0x1c4>
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	220e      	movs	r2, #14
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fa05 	bl	8000708 <Lcd_cursor>
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4980      	ldr	r1, [pc, #512]	; (8001504 <Task1+0x3a4>)
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f9df 	bl	80006c8 <Lcd_string>
															   Lcd_cursor(&lcd,1,14); Lcd_string(&lcd,"W"); }
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	220e      	movs	r2, #14
 8001310:	2101      	movs	r1, #1
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f9f8 	bl	8000708 <Lcd_cursor>
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4978      	ldr	r1, [pc, #480]	; (8001500 <Task1+0x3a0>)
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f9d2 	bl	80006c8 <Lcd_string>
			if (data_received == screen_winner_this_round_D) { Lcd_cursor(&lcd,0,14); Lcd_string(&lcd,"D");
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b05      	cmp	r3, #5
 8001328:	d119      	bne.n	800135e <Task1+0x1fe>
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	220e      	movs	r2, #14
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f9e8 	bl	8000708 <Lcd_cursor>
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4972      	ldr	r1, [pc, #456]	; (8001508 <Task1+0x3a8>)
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f9c2 	bl	80006c8 <Lcd_string>
															   Lcd_cursor(&lcd,1,14); Lcd_string(&lcd,"D"); }
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	220e      	movs	r2, #14
 800134a:	2101      	movs	r1, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f9db 	bl	8000708 <Lcd_cursor>
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	496c      	ldr	r1, [pc, #432]	; (8001508 <Task1+0x3a8>)
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f9b5 	bl	80006c8 <Lcd_string>
			if (data_received == screen_clean_place_cards) 	 { Lcd_cursor(&lcd,0,2); Lcd_string(&lcd,"         ");
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	2b06      	cmp	r3, #6
 8001362:	d133      	bne.n	80013cc <Task1+0x26c>
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	2202      	movs	r2, #2
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f9cb 	bl	8000708 <Lcd_cursor>
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4965      	ldr	r1, [pc, #404]	; (800150c <Task1+0x3ac>)
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f9a5 	bl	80006c8 <Lcd_string>
															   Lcd_cursor(&lcd,0,12); Lcd_string(&lcd,"   ");
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	220c      	movs	r2, #12
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f9be 	bl	8000708 <Lcd_cursor>
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4959      	ldr	r1, [pc, #356]	; (80014f8 <Task1+0x398>)
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f998 	bl	80006c8 <Lcd_string>
															   Lcd_cursor(&lcd,1,2); Lcd_string(&lcd,"         ");
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	2202      	movs	r2, #2
 800139e:	2101      	movs	r1, #1
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f9b1 	bl	8000708 <Lcd_cursor>
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	4958      	ldr	r1, [pc, #352]	; (800150c <Task1+0x3ac>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f98b 	bl	80006c8 <Lcd_string>
															   Lcd_cursor(&lcd,1,12); Lcd_string(&lcd,"   ");}
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	220c      	movs	r2, #12
 80013b8:	2101      	movs	r1, #1
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f9a4 	bl	8000708 <Lcd_cursor>
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	494c      	ldr	r1, [pc, #304]	; (80014f8 <Task1+0x398>)
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f97e 	bl	80006c8 <Lcd_string>
		}

		//-----------------------------------------------------------------WYGRANE_RUNDY---------------------------
		//Wyswietlenie liczby wygranych rund przez gracza
		if(((xQueueReceive(wins_U_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 80013cc:	4b50      	ldr	r3, [pc, #320]	; (8001510 <Task1+0x3b0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f107 010f 	add.w	r1, r7, #15
 80013d4:	2200      	movs	r2, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f005 f95a 	bl	8006690 <xQueueReceive>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d111      	bne.n	8001406 <Task1+0x2a6>
				&& (data_received >= 0) && (data_received <= 9))
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	2b09      	cmp	r3, #9
 80013e6:	d80e      	bhi.n	8001406 <Task1+0x2a6>
		{	Lcd_cursor(&lcd,0,15);	Lcd_int(&lcd,data_received); }
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	220f      	movs	r2, #15
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f989 	bl	8000708 <Lcd_cursor>
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	461a      	mov	r2, r3
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f949 	bl	8000698 <Lcd_int>

		//Wyswietlenie liczby wygranych rund przez komputer
		if(((xQueueReceive(wins_C_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 8001406:	4b43      	ldr	r3, [pc, #268]	; (8001514 <Task1+0x3b4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f107 010f 	add.w	r1, r7, #15
 800140e:	2200      	movs	r2, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f005 f93d 	bl	8006690 <xQueueReceive>
 8001416:	4603      	mov	r3, r0
 8001418:	2b01      	cmp	r3, #1
 800141a:	d111      	bne.n	8001440 <Task1+0x2e0>
				&& (data_received >= 0) && (data_received <= 9))
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	2b09      	cmp	r3, #9
 8001420:	d80e      	bhi.n	8001440 <Task1+0x2e0>
		{	Lcd_cursor(&lcd,1,15); Lcd_int(&lcd,data_received); }
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	220f      	movs	r2, #15
 8001428:	2101      	movs	r1, #1
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f96c 	bl	8000708 <Lcd_cursor>
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	461a      	mov	r2, r3
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f92c 	bl	8000698 <Lcd_int>

		//----------------------------------------------------------------ZDOBYTE_PUNKTY---------------------------
		//Wyswietlenie liczby punktow zdobytych przez gracza
		if(((xQueueReceive(points_U_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 8001440:	4b35      	ldr	r3, [pc, #212]	; (8001518 <Task1+0x3b8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f107 010f 	add.w	r1, r7, #15
 8001448:	2200      	movs	r2, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f005 f920 	bl	8006690 <xQueueReceive>
 8001450:	4603      	mov	r3, r0
 8001452:	2b01      	cmp	r3, #1
 8001454:	d111      	bne.n	800147a <Task1+0x31a>
				&& (data_received >= 0) && (data_received <= 99)) //Tutaj wrzuc 31
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	2b63      	cmp	r3, #99	; 0x63
 800145a:	d80e      	bhi.n	800147a <Task1+0x31a>
		{	Lcd_cursor(&lcd,0,12); Lcd_int(&lcd,data_received); }
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	220c      	movs	r2, #12
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f94f 	bl	8000708 <Lcd_cursor>
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	461a      	mov	r2, r3
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f90f 	bl	8000698 <Lcd_int>

		//Wyswietlenie liczby punktow zdobytych przez komputer
		if(((xQueueReceive(points_C_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 800147a:	4b28      	ldr	r3, [pc, #160]	; (800151c <Task1+0x3bc>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f107 010f 	add.w	r1, r7, #15
 8001482:	2200      	movs	r2, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f005 f903 	bl	8006690 <xQueueReceive>
 800148a:	4603      	mov	r3, r0
 800148c:	2b01      	cmp	r3, #1
 800148e:	d111      	bne.n	80014b4 <Task1+0x354>
				&& (data_received >= 0) && (data_received <= 99)) //Tutaj wrzuc 31
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	2b63      	cmp	r3, #99	; 0x63
 8001494:	d80e      	bhi.n	80014b4 <Task1+0x354>
		{	Lcd_cursor(&lcd,1,12); Lcd_int(&lcd,data_received); }
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	220c      	movs	r2, #12
 800149c:	2101      	movs	r1, #1
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f932 	bl	8000708 <Lcd_cursor>
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	461a      	mov	r2, r3
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f8f2 	bl	8000698 <Lcd_int>


		//--------------------------------------------------------WYSWIETLANIE WYLOSOWANYCH KART-------------------
		//DLA GRACZA
		//Karta nr 1
		if(((xQueueReceive(card1_U_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <Task1+0x3c0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f107 010f 	add.w	r1, r7, #15
 80014bc:	2200      	movs	r2, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 f8e6 	bl	8006690 <xQueueReceive>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	f040 8080 	bne.w	80015cc <Task1+0x46c>
				&& (data_received >= 2) && (data_received <= 14))
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d97c      	bls.n	80015cc <Task1+0x46c>
 80014d2:	e027      	b.n	8001524 <Task1+0x3c4>
 80014d4:	080097c8 	.word	0x080097c8
 80014d8:	080097d8 	.word	0x080097d8
 80014dc:	40021000 	.word	0x40021000
 80014e0:	080096f0 	.word	0x080096f0
 80014e4:	08009704 	.word	0x08009704
 80014e8:	200047d8 	.word	0x200047d8
 80014ec:	08009718 	.word	0x08009718
 80014f0:	0800972c 	.word	0x0800972c
 80014f4:	08009740 	.word	0x08009740
 80014f8:	0800974c 	.word	0x0800974c
 80014fc:	08009750 	.word	0x08009750
 8001500:	0800975c 	.word	0x0800975c
 8001504:	08009760 	.word	0x08009760
 8001508:	08009764 	.word	0x08009764
 800150c:	08009768 	.word	0x08009768
 8001510:	200046e4 	.word	0x200046e4
 8001514:	20004790 	.word	0x20004790
 8001518:	2000467c 	.word	0x2000467c
 800151c:	20004784 	.word	0x20004784
 8001520:	20004760 	.word	0x20004760
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	2b0e      	cmp	r3, #14
 8001528:	d850      	bhi.n	80015cc <Task1+0x46c>
		{
			Lcd_cursor(&lcd,0,2);
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	2202      	movs	r2, #2
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f8e8 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d90b      	bls.n	8001556 <Task1+0x3f6>
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	2b09      	cmp	r3, #9
 8001542:	d808      	bhi.n	8001556 <Task1+0x3f6>
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	461a      	mov	r2, r3
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f8a2 	bl	8000698 <Lcd_int>
 8001554:	e03b      	b.n	80015ce <Task1+0x46e>
			else switch (data_received)
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	3b0a      	subs	r3, #10
 800155a:	2b04      	cmp	r3, #4
 800155c:	d82f      	bhi.n	80015be <Task1+0x45e>
 800155e:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <Task1+0x404>)
 8001560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001564:	08001579 	.word	0x08001579
 8001568:	08001587 	.word	0x08001587
 800156c:	08001595 	.word	0x08001595
 8001570:	080015a3 	.word	0x080015a3
 8001574:	080015b1 	.word	0x080015b1
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	49bd      	ldr	r1, [pc, #756]	; (8001874 <Task1+0x714>)
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f8a2 	bl	80006c8 <Lcd_string>
 8001584:	e023      	b.n	80015ce <Task1+0x46e>
			case 11: { Lcd_string(&lcd,"J"); break; }
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	49bb      	ldr	r1, [pc, #748]	; (8001878 <Task1+0x718>)
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff f89b 	bl	80006c8 <Lcd_string>
 8001592:	e01c      	b.n	80015ce <Task1+0x46e>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	49b8      	ldr	r1, [pc, #736]	; (800187c <Task1+0x71c>)
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff f894 	bl	80006c8 <Lcd_string>
 80015a0:	e015      	b.n	80015ce <Task1+0x46e>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	49b6      	ldr	r1, [pc, #728]	; (8001880 <Task1+0x720>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff f88d 	bl	80006c8 <Lcd_string>
 80015ae:	e00e      	b.n	80015ce <Task1+0x46e>
			case 14: { Lcd_string(&lcd,"A"); break;	}
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	49b3      	ldr	r1, [pc, #716]	; (8001884 <Task1+0x724>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff f886 	bl	80006c8 <Lcd_string>
 80015bc:	e007      	b.n	80015ce <Task1+0x46e>
			default: { Lcd_string(&lcd,"X"); break;	}
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	49b1      	ldr	r1, [pc, #708]	; (8001888 <Task1+0x728>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff f87f 	bl	80006c8 <Lcd_string>
 80015ca:	e000      	b.n	80015ce <Task1+0x46e>
			}//End Switch
		}
 80015cc:	bf00      	nop

		//Karta nr 2
		if(((xQueueReceive(card2_U_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 80015ce:	4baf      	ldr	r3, [pc, #700]	; (800188c <Task1+0x72c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f107 010f 	add.w	r1, r7, #15
 80015d6:	2200      	movs	r2, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f005 f859 	bl	8006690 <xQueueReceive>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d157      	bne.n	8001694 <Task1+0x534>
				&& (data_received >= 2) && (data_received <= 14))
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d954      	bls.n	8001694 <Task1+0x534>
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	2b0e      	cmp	r3, #14
 80015ee:	d851      	bhi.n	8001694 <Task1+0x534>
		{
			Lcd_cursor(&lcd,0,3);
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	2203      	movs	r2, #3
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff f885 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d90b      	bls.n	800161c <Task1+0x4bc>
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	2b09      	cmp	r3, #9
 8001608:	d808      	bhi.n	800161c <Task1+0x4bc>
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	461a      	mov	r2, r3
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff f83f 	bl	8000698 <Lcd_int>
 800161a:	e03c      	b.n	8001696 <Task1+0x536>
			else switch (data_received)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	3b0a      	subs	r3, #10
 8001620:	2b04      	cmp	r3, #4
 8001622:	d830      	bhi.n	8001686 <Task1+0x526>
 8001624:	a201      	add	r2, pc, #4	; (adr r2, 800162c <Task1+0x4cc>)
 8001626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162a:	bf00      	nop
 800162c:	08001641 	.word	0x08001641
 8001630:	0800164f 	.word	0x0800164f
 8001634:	0800165d 	.word	0x0800165d
 8001638:	0800166b 	.word	0x0800166b
 800163c:	08001679 	.word	0x08001679
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	498b      	ldr	r1, [pc, #556]	; (8001874 <Task1+0x714>)
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff f83e 	bl	80006c8 <Lcd_string>
 800164c:	e023      	b.n	8001696 <Task1+0x536>
			case 11: { Lcd_string(&lcd,"J"); break; }
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	4989      	ldr	r1, [pc, #548]	; (8001878 <Task1+0x718>)
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff f837 	bl	80006c8 <Lcd_string>
 800165a:	e01c      	b.n	8001696 <Task1+0x536>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	4986      	ldr	r1, [pc, #536]	; (800187c <Task1+0x71c>)
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff f830 	bl	80006c8 <Lcd_string>
 8001668:	e015      	b.n	8001696 <Task1+0x536>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	4984      	ldr	r1, [pc, #528]	; (8001880 <Task1+0x720>)
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff f829 	bl	80006c8 <Lcd_string>
 8001676:	e00e      	b.n	8001696 <Task1+0x536>
			case 14: { Lcd_string(&lcd,"A"); break;	}
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	4981      	ldr	r1, [pc, #516]	; (8001884 <Task1+0x724>)
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff f822 	bl	80006c8 <Lcd_string>
 8001684:	e007      	b.n	8001696 <Task1+0x536>
			default: { Lcd_string(&lcd,"X"); break;	}
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	497f      	ldr	r1, [pc, #508]	; (8001888 <Task1+0x728>)
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff f81b 	bl	80006c8 <Lcd_string>
 8001692:	e000      	b.n	8001696 <Task1+0x536>
			}//End Switch
		}
 8001694:	bf00      	nop

		//Karta nr 3
		if(((xQueueReceive(card3_U_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 8001696:	4b7e      	ldr	r3, [pc, #504]	; (8001890 <Task1+0x730>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f107 010f 	add.w	r1, r7, #15
 800169e:	2200      	movs	r2, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f004 fff5 	bl	8006690 <xQueueReceive>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d157      	bne.n	800175c <Task1+0x5fc>
				&& (data_received >= 2) && (data_received <= 14))
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d954      	bls.n	800175c <Task1+0x5fc>
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	2b0e      	cmp	r3, #14
 80016b6:	d851      	bhi.n	800175c <Task1+0x5fc>
		{
			Lcd_cursor(&lcd,0,4);
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	2204      	movs	r2, #4
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff f821 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d90b      	bls.n	80016e4 <Task1+0x584>
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	2b09      	cmp	r3, #9
 80016d0:	d808      	bhi.n	80016e4 <Task1+0x584>
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	461a      	mov	r2, r3
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe ffdb 	bl	8000698 <Lcd_int>
 80016e2:	e03c      	b.n	800175e <Task1+0x5fe>
			else switch (data_received)
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	3b0a      	subs	r3, #10
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d830      	bhi.n	800174e <Task1+0x5ee>
 80016ec:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <Task1+0x594>)
 80016ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f2:	bf00      	nop
 80016f4:	08001709 	.word	0x08001709
 80016f8:	08001717 	.word	0x08001717
 80016fc:	08001725 	.word	0x08001725
 8001700:	08001733 	.word	0x08001733
 8001704:	08001741 	.word	0x08001741
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	4959      	ldr	r1, [pc, #356]	; (8001874 <Task1+0x714>)
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ffda 	bl	80006c8 <Lcd_string>
 8001714:	e023      	b.n	800175e <Task1+0x5fe>
			case 11: { Lcd_string(&lcd,"J"); break; }
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	4957      	ldr	r1, [pc, #348]	; (8001878 <Task1+0x718>)
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ffd3 	bl	80006c8 <Lcd_string>
 8001722:	e01c      	b.n	800175e <Task1+0x5fe>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	4954      	ldr	r1, [pc, #336]	; (800187c <Task1+0x71c>)
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe ffcc 	bl	80006c8 <Lcd_string>
 8001730:	e015      	b.n	800175e <Task1+0x5fe>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 8001732:	f107 0310 	add.w	r3, r7, #16
 8001736:	4952      	ldr	r1, [pc, #328]	; (8001880 <Task1+0x720>)
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe ffc5 	bl	80006c8 <Lcd_string>
 800173e:	e00e      	b.n	800175e <Task1+0x5fe>
			case 14: { Lcd_string(&lcd,"A"); break;	}
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	494f      	ldr	r1, [pc, #316]	; (8001884 <Task1+0x724>)
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe ffbe 	bl	80006c8 <Lcd_string>
 800174c:	e007      	b.n	800175e <Task1+0x5fe>
			default: { Lcd_string(&lcd,"X"); break;	}
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	494d      	ldr	r1, [pc, #308]	; (8001888 <Task1+0x728>)
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe ffb7 	bl	80006c8 <Lcd_string>
 800175a:	e000      	b.n	800175e <Task1+0x5fe>
			}//End Switch
		}
 800175c:	bf00      	nop

		//Karta nr 4
		if(((xQueueReceive(card4_U_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 800175e:	4b4d      	ldr	r3, [pc, #308]	; (8001894 <Task1+0x734>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f107 010f 	add.w	r1, r7, #15
 8001766:	2200      	movs	r2, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f004 ff91 	bl	8006690 <xQueueReceive>
 800176e:	4603      	mov	r3, r0
 8001770:	2b01      	cmp	r3, #1
 8001772:	d157      	bne.n	8001824 <Task1+0x6c4>
				&& (data_received >= 2) && (data_received <= 14))
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d954      	bls.n	8001824 <Task1+0x6c4>
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	2b0e      	cmp	r3, #14
 800177e:	d851      	bhi.n	8001824 <Task1+0x6c4>
		{
			Lcd_cursor(&lcd,0,5);
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	2205      	movs	r2, #5
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe ffbd 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d90b      	bls.n	80017ac <Task1+0x64c>
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	2b09      	cmp	r3, #9
 8001798:	d808      	bhi.n	80017ac <Task1+0x64c>
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	461a      	mov	r2, r3
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe ff77 	bl	8000698 <Lcd_int>
 80017aa:	e03c      	b.n	8001826 <Task1+0x6c6>
			else switch (data_received)
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	3b0a      	subs	r3, #10
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d830      	bhi.n	8001816 <Task1+0x6b6>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <Task1+0x65c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	080017d1 	.word	0x080017d1
 80017c0:	080017df 	.word	0x080017df
 80017c4:	080017ed 	.word	0x080017ed
 80017c8:	080017fb 	.word	0x080017fb
 80017cc:	08001809 	.word	0x08001809
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	4927      	ldr	r1, [pc, #156]	; (8001874 <Task1+0x714>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe ff76 	bl	80006c8 <Lcd_string>
 80017dc:	e023      	b.n	8001826 <Task1+0x6c6>
			case 11: { Lcd_string(&lcd,"J"); break; }
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	4925      	ldr	r1, [pc, #148]	; (8001878 <Task1+0x718>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe ff6f 	bl	80006c8 <Lcd_string>
 80017ea:	e01c      	b.n	8001826 <Task1+0x6c6>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	4922      	ldr	r1, [pc, #136]	; (800187c <Task1+0x71c>)
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe ff68 	bl	80006c8 <Lcd_string>
 80017f8:	e015      	b.n	8001826 <Task1+0x6c6>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	4920      	ldr	r1, [pc, #128]	; (8001880 <Task1+0x720>)
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe ff61 	bl	80006c8 <Lcd_string>
 8001806:	e00e      	b.n	8001826 <Task1+0x6c6>
			case 14: { Lcd_string(&lcd,"A"); break;	}
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	491d      	ldr	r1, [pc, #116]	; (8001884 <Task1+0x724>)
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe ff5a 	bl	80006c8 <Lcd_string>
 8001814:	e007      	b.n	8001826 <Task1+0x6c6>
			default: { Lcd_string(&lcd,"X"); break;	}
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	491b      	ldr	r1, [pc, #108]	; (8001888 <Task1+0x728>)
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe ff53 	bl	80006c8 <Lcd_string>
 8001822:	e000      	b.n	8001826 <Task1+0x6c6>
			}//End Switch
		}
 8001824:	bf00      	nop

		//Karta nr 5
		if(((xQueueReceive(card5_U_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <Task1+0x738>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f107 010f 	add.w	r1, r7, #15
 800182e:	2200      	movs	r2, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f004 ff2d 	bl	8006690 <xQueueReceive>
 8001836:	4603      	mov	r3, r0
 8001838:	2b01      	cmp	r3, #1
 800183a:	d16b      	bne.n	8001914 <Task1+0x7b4>
				&& (data_received >= 2) && (data_received <= 14))
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d968      	bls.n	8001914 <Task1+0x7b4>
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	2b0e      	cmp	r3, #14
 8001846:	d865      	bhi.n	8001914 <Task1+0x7b4>
		{
			Lcd_cursor(&lcd,0,6);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	2206      	movs	r2, #6
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe ff59 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d91f      	bls.n	800189c <Task1+0x73c>
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2b09      	cmp	r3, #9
 8001860:	d81c      	bhi.n	800189c <Task1+0x73c>
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	461a      	mov	r2, r3
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe ff13 	bl	8000698 <Lcd_int>
 8001872:	e050      	b.n	8001916 <Task1+0x7b6>
 8001874:	08009774 	.word	0x08009774
 8001878:	08009778 	.word	0x08009778
 800187c:	0800977c 	.word	0x0800977c
 8001880:	08009780 	.word	0x08009780
 8001884:	08009784 	.word	0x08009784
 8001888:	08009788 	.word	0x08009788
 800188c:	2000476c 	.word	0x2000476c
 8001890:	200046c8 	.word	0x200046c8
 8001894:	200046dc 	.word	0x200046dc
 8001898:	200047d0 	.word	0x200047d0
			else switch (data_received)
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	3b0a      	subs	r3, #10
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d830      	bhi.n	8001906 <Task1+0x7a6>
 80018a4:	a201      	add	r2, pc, #4	; (adr r2, 80018ac <Task1+0x74c>)
 80018a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018aa:	bf00      	nop
 80018ac:	080018c1 	.word	0x080018c1
 80018b0:	080018cf 	.word	0x080018cf
 80018b4:	080018dd 	.word	0x080018dd
 80018b8:	080018eb 	.word	0x080018eb
 80018bc:	080018f9 	.word	0x080018f9
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	49bd      	ldr	r1, [pc, #756]	; (8001bbc <Task1+0xa5c>)
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fefe 	bl	80006c8 <Lcd_string>
 80018cc:	e023      	b.n	8001916 <Task1+0x7b6>
			case 11: { Lcd_string(&lcd,"J"); break; }
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	49bb      	ldr	r1, [pc, #748]	; (8001bc0 <Task1+0xa60>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fef7 	bl	80006c8 <Lcd_string>
 80018da:	e01c      	b.n	8001916 <Task1+0x7b6>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	49b8      	ldr	r1, [pc, #736]	; (8001bc4 <Task1+0xa64>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fef0 	bl	80006c8 <Lcd_string>
 80018e8:	e015      	b.n	8001916 <Task1+0x7b6>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	49b6      	ldr	r1, [pc, #728]	; (8001bc8 <Task1+0xa68>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fee9 	bl	80006c8 <Lcd_string>
 80018f6:	e00e      	b.n	8001916 <Task1+0x7b6>
			case 14: { Lcd_string(&lcd,"A"); break;	}
 80018f8:	f107 0310 	add.w	r3, r7, #16
 80018fc:	49b3      	ldr	r1, [pc, #716]	; (8001bcc <Task1+0xa6c>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fee2 	bl	80006c8 <Lcd_string>
 8001904:	e007      	b.n	8001916 <Task1+0x7b6>
			default: { Lcd_string(&lcd,"X"); break;	}
 8001906:	f107 0310 	add.w	r3, r7, #16
 800190a:	49b1      	ldr	r1, [pc, #708]	; (8001bd0 <Task1+0xa70>)
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fedb 	bl	80006c8 <Lcd_string>
 8001912:	e000      	b.n	8001916 <Task1+0x7b6>
			}//End Switch
		}
 8001914:	bf00      	nop

		//Karta nr 6
		if(((xQueueReceive(card6_U_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 8001916:	4baf      	ldr	r3, [pc, #700]	; (8001bd4 <Task1+0xa74>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f107 010f 	add.w	r1, r7, #15
 800191e:	2200      	movs	r2, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f004 feb5 	bl	8006690 <xQueueReceive>
 8001926:	4603      	mov	r3, r0
 8001928:	2b01      	cmp	r3, #1
 800192a:	d157      	bne.n	80019dc <Task1+0x87c>
				&& (data_received >= 2) && (data_received <= 14))
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d954      	bls.n	80019dc <Task1+0x87c>
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	2b0e      	cmp	r3, #14
 8001936:	d851      	bhi.n	80019dc <Task1+0x87c>
		{
			Lcd_cursor(&lcd,0,7);
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	2207      	movs	r2, #7
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fee1 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d90b      	bls.n	8001964 <Task1+0x804>
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	2b09      	cmp	r3, #9
 8001950:	d808      	bhi.n	8001964 <Task1+0x804>
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	461a      	mov	r2, r3
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fe9b 	bl	8000698 <Lcd_int>
 8001962:	e03c      	b.n	80019de <Task1+0x87e>
			else switch (data_received)
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	3b0a      	subs	r3, #10
 8001968:	2b04      	cmp	r3, #4
 800196a:	d830      	bhi.n	80019ce <Task1+0x86e>
 800196c:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <Task1+0x814>)
 800196e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001972:	bf00      	nop
 8001974:	08001989 	.word	0x08001989
 8001978:	08001997 	.word	0x08001997
 800197c:	080019a5 	.word	0x080019a5
 8001980:	080019b3 	.word	0x080019b3
 8001984:	080019c1 	.word	0x080019c1
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	498b      	ldr	r1, [pc, #556]	; (8001bbc <Task1+0xa5c>)
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fe9a 	bl	80006c8 <Lcd_string>
 8001994:	e023      	b.n	80019de <Task1+0x87e>
			case 11: { Lcd_string(&lcd,"J"); break; }
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	4989      	ldr	r1, [pc, #548]	; (8001bc0 <Task1+0xa60>)
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fe93 	bl	80006c8 <Lcd_string>
 80019a2:	e01c      	b.n	80019de <Task1+0x87e>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 80019a4:	f107 0310 	add.w	r3, r7, #16
 80019a8:	4986      	ldr	r1, [pc, #536]	; (8001bc4 <Task1+0xa64>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fe8c 	bl	80006c8 <Lcd_string>
 80019b0:	e015      	b.n	80019de <Task1+0x87e>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 80019b2:	f107 0310 	add.w	r3, r7, #16
 80019b6:	4984      	ldr	r1, [pc, #528]	; (8001bc8 <Task1+0xa68>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fe85 	bl	80006c8 <Lcd_string>
 80019be:	e00e      	b.n	80019de <Task1+0x87e>
			case 14: { Lcd_string(&lcd,"A"); break;	}
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	4981      	ldr	r1, [pc, #516]	; (8001bcc <Task1+0xa6c>)
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fe7e 	bl	80006c8 <Lcd_string>
 80019cc:	e007      	b.n	80019de <Task1+0x87e>
			default: { Lcd_string(&lcd,"X"); break;	}
 80019ce:	f107 0310 	add.w	r3, r7, #16
 80019d2:	497f      	ldr	r1, [pc, #508]	; (8001bd0 <Task1+0xa70>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fe77 	bl	80006c8 <Lcd_string>
 80019da:	e000      	b.n	80019de <Task1+0x87e>
			}//End Switch
		}
 80019dc:	bf00      	nop

		//Karta nr 7
		if(((xQueueReceive(card7_U_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 80019de:	4b7e      	ldr	r3, [pc, #504]	; (8001bd8 <Task1+0xa78>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f107 010f 	add.w	r1, r7, #15
 80019e6:	2200      	movs	r2, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f004 fe51 	bl	8006690 <xQueueReceive>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d157      	bne.n	8001aa4 <Task1+0x944>
				&& (data_received >= 2) && (data_received <= 14))
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d954      	bls.n	8001aa4 <Task1+0x944>
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	2b0e      	cmp	r3, #14
 80019fe:	d851      	bhi.n	8001aa4 <Task1+0x944>
		{
			Lcd_cursor(&lcd,0,8);
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	2208      	movs	r2, #8
 8001a06:	2100      	movs	r1, #0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fe7d 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d90b      	bls.n	8001a2c <Task1+0x8cc>
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	2b09      	cmp	r3, #9
 8001a18:	d808      	bhi.n	8001a2c <Task1+0x8cc>
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	f107 0310 	add.w	r3, r7, #16
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fe37 	bl	8000698 <Lcd_int>
 8001a2a:	e03c      	b.n	8001aa6 <Task1+0x946>
			else switch (data_received)
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	3b0a      	subs	r3, #10
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d830      	bhi.n	8001a96 <Task1+0x936>
 8001a34:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <Task1+0x8dc>)
 8001a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3a:	bf00      	nop
 8001a3c:	08001a51 	.word	0x08001a51
 8001a40:	08001a5f 	.word	0x08001a5f
 8001a44:	08001a6d 	.word	0x08001a6d
 8001a48:	08001a7b 	.word	0x08001a7b
 8001a4c:	08001a89 	.word	0x08001a89
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	4959      	ldr	r1, [pc, #356]	; (8001bbc <Task1+0xa5c>)
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fe36 	bl	80006c8 <Lcd_string>
 8001a5c:	e023      	b.n	8001aa6 <Task1+0x946>
			case 11: { Lcd_string(&lcd,"J"); break; }
 8001a5e:	f107 0310 	add.w	r3, r7, #16
 8001a62:	4957      	ldr	r1, [pc, #348]	; (8001bc0 <Task1+0xa60>)
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fe2f 	bl	80006c8 <Lcd_string>
 8001a6a:	e01c      	b.n	8001aa6 <Task1+0x946>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	4954      	ldr	r1, [pc, #336]	; (8001bc4 <Task1+0xa64>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fe28 	bl	80006c8 <Lcd_string>
 8001a78:	e015      	b.n	8001aa6 <Task1+0x946>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	4952      	ldr	r1, [pc, #328]	; (8001bc8 <Task1+0xa68>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fe21 	bl	80006c8 <Lcd_string>
 8001a86:	e00e      	b.n	8001aa6 <Task1+0x946>
			case 14: { Lcd_string(&lcd,"A"); break;	}
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	494f      	ldr	r1, [pc, #316]	; (8001bcc <Task1+0xa6c>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fe1a 	bl	80006c8 <Lcd_string>
 8001a94:	e007      	b.n	8001aa6 <Task1+0x946>
			default: { Lcd_string(&lcd,"X"); break;	}
 8001a96:	f107 0310 	add.w	r3, r7, #16
 8001a9a:	494d      	ldr	r1, [pc, #308]	; (8001bd0 <Task1+0xa70>)
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fe13 	bl	80006c8 <Lcd_string>
 8001aa2:	e000      	b.n	8001aa6 <Task1+0x946>
			}//End Switch
		}
 8001aa4:	bf00      	nop

		//Karta nr 8
		if(((xQueueReceive(card8_U_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 8001aa6:	4b4d      	ldr	r3, [pc, #308]	; (8001bdc <Task1+0xa7c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f107 010f 	add.w	r1, r7, #15
 8001aae:	2200      	movs	r2, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f004 fded 	bl	8006690 <xQueueReceive>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d157      	bne.n	8001b6c <Task1+0xa0c>
				&& (data_received >= 2) && (data_received <= 14))
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d954      	bls.n	8001b6c <Task1+0xa0c>
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	2b0e      	cmp	r3, #14
 8001ac6:	d851      	bhi.n	8001b6c <Task1+0xa0c>
		{
			Lcd_cursor(&lcd,0,9);
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	2209      	movs	r2, #9
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fe19 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d90b      	bls.n	8001af4 <Task1+0x994>
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	2b09      	cmp	r3, #9
 8001ae0:	d808      	bhi.n	8001af4 <Task1+0x994>
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f107 0310 	add.w	r3, r7, #16
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fdd3 	bl	8000698 <Lcd_int>
 8001af2:	e03c      	b.n	8001b6e <Task1+0xa0e>
			else switch (data_received)
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	3b0a      	subs	r3, #10
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d830      	bhi.n	8001b5e <Task1+0x9fe>
 8001afc:	a201      	add	r2, pc, #4	; (adr r2, 8001b04 <Task1+0x9a4>)
 8001afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b02:	bf00      	nop
 8001b04:	08001b19 	.word	0x08001b19
 8001b08:	08001b27 	.word	0x08001b27
 8001b0c:	08001b35 	.word	0x08001b35
 8001b10:	08001b43 	.word	0x08001b43
 8001b14:	08001b51 	.word	0x08001b51
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	4927      	ldr	r1, [pc, #156]	; (8001bbc <Task1+0xa5c>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fdd2 	bl	80006c8 <Lcd_string>
 8001b24:	e023      	b.n	8001b6e <Task1+0xa0e>
			case 11: { Lcd_string(&lcd,"J"); break; }
 8001b26:	f107 0310 	add.w	r3, r7, #16
 8001b2a:	4925      	ldr	r1, [pc, #148]	; (8001bc0 <Task1+0xa60>)
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fdcb 	bl	80006c8 <Lcd_string>
 8001b32:	e01c      	b.n	8001b6e <Task1+0xa0e>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 8001b34:	f107 0310 	add.w	r3, r7, #16
 8001b38:	4922      	ldr	r1, [pc, #136]	; (8001bc4 <Task1+0xa64>)
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fdc4 	bl	80006c8 <Lcd_string>
 8001b40:	e015      	b.n	8001b6e <Task1+0xa0e>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	4920      	ldr	r1, [pc, #128]	; (8001bc8 <Task1+0xa68>)
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fdbd 	bl	80006c8 <Lcd_string>
 8001b4e:	e00e      	b.n	8001b6e <Task1+0xa0e>
			case 14: { Lcd_string(&lcd,"A"); break;	}
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	491d      	ldr	r1, [pc, #116]	; (8001bcc <Task1+0xa6c>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fdb6 	bl	80006c8 <Lcd_string>
 8001b5c:	e007      	b.n	8001b6e <Task1+0xa0e>
			default: { Lcd_string(&lcd,"X"); break;	}
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	491b      	ldr	r1, [pc, #108]	; (8001bd0 <Task1+0xa70>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fdaf 	bl	80006c8 <Lcd_string>
 8001b6a:	e000      	b.n	8001b6e <Task1+0xa0e>
			}//End Switch
		}
 8001b6c:	bf00      	nop

		//Karta nr 9
		if(((xQueueReceive(card9_U_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <Task1+0xa80>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f107 010f 	add.w	r1, r7, #15
 8001b76:	2200      	movs	r2, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f004 fd89 	bl	8006690 <xQueueReceive>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d16b      	bne.n	8001c5c <Task1+0xafc>
				&& (data_received >= 2) && (data_received <= 14))
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d968      	bls.n	8001c5c <Task1+0xafc>
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	2b0e      	cmp	r3, #14
 8001b8e:	d865      	bhi.n	8001c5c <Task1+0xafc>
		{
			Lcd_cursor(&lcd,0,10);
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	220a      	movs	r2, #10
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fdb5 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d91f      	bls.n	8001be4 <Task1+0xa84>
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	2b09      	cmp	r3, #9
 8001ba8:	d81c      	bhi.n	8001be4 <Task1+0xa84>
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	461a      	mov	r2, r3
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fd6f 	bl	8000698 <Lcd_int>
 8001bba:	e050      	b.n	8001c5e <Task1+0xafe>
 8001bbc:	08009774 	.word	0x08009774
 8001bc0:	08009778 	.word	0x08009778
 8001bc4:	0800977c 	.word	0x0800977c
 8001bc8:	08009780 	.word	0x08009780
 8001bcc:	08009784 	.word	0x08009784
 8001bd0:	08009788 	.word	0x08009788
 8001bd4:	2000474c 	.word	0x2000474c
 8001bd8:	20004758 	.word	0x20004758
 8001bdc:	20004764 	.word	0x20004764
 8001be0:	200046ec 	.word	0x200046ec
			else switch (data_received)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	3b0a      	subs	r3, #10
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d830      	bhi.n	8001c4e <Task1+0xaee>
 8001bec:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <Task1+0xa94>)
 8001bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf2:	bf00      	nop
 8001bf4:	08001c09 	.word	0x08001c09
 8001bf8:	08001c17 	.word	0x08001c17
 8001bfc:	08001c25 	.word	0x08001c25
 8001c00:	08001c33 	.word	0x08001c33
 8001c04:	08001c41 	.word	0x08001c41
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	49bb      	ldr	r1, [pc, #748]	; (8001efc <Task1+0xd9c>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fd5a 	bl	80006c8 <Lcd_string>
 8001c14:	e023      	b.n	8001c5e <Task1+0xafe>
			case 11: { Lcd_string(&lcd,"J"); break; }
 8001c16:	f107 0310 	add.w	r3, r7, #16
 8001c1a:	49b9      	ldr	r1, [pc, #740]	; (8001f00 <Task1+0xda0>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fd53 	bl	80006c8 <Lcd_string>
 8001c22:	e01c      	b.n	8001c5e <Task1+0xafe>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	49b6      	ldr	r1, [pc, #728]	; (8001f04 <Task1+0xda4>)
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fd4c 	bl	80006c8 <Lcd_string>
 8001c30:	e015      	b.n	8001c5e <Task1+0xafe>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 8001c32:	f107 0310 	add.w	r3, r7, #16
 8001c36:	49b4      	ldr	r1, [pc, #720]	; (8001f08 <Task1+0xda8>)
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fd45 	bl	80006c8 <Lcd_string>
 8001c3e:	e00e      	b.n	8001c5e <Task1+0xafe>
			case	 14: { Lcd_string(&lcd,"A"); break;	}
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	49b1      	ldr	r1, [pc, #708]	; (8001f0c <Task1+0xdac>)
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fd3e 	bl	80006c8 <Lcd_string>
 8001c4c:	e007      	b.n	8001c5e <Task1+0xafe>
			default: { Lcd_string(&lcd,"X"); break;	}
 8001c4e:	f107 0310 	add.w	r3, r7, #16
 8001c52:	49af      	ldr	r1, [pc, #700]	; (8001f10 <Task1+0xdb0>)
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fd37 	bl	80006c8 <Lcd_string>
 8001c5a:	e000      	b.n	8001c5e <Task1+0xafe>
			}//End Switch
		}
 8001c5c:	bf00      	nop

		//WYSWIETLANIE WYLOSOWANYCH KART------------------------------------------------------------------------------------------------------
		//DLA KOMPUTERA
		//Karta nr 1
		if(((xQueueReceive(card1_C_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 8001c5e:	4bad      	ldr	r3, [pc, #692]	; (8001f14 <Task1+0xdb4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f107 010f 	add.w	r1, r7, #15
 8001c66:	2200      	movs	r2, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 fd11 	bl	8006690 <xQueueReceive>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d153      	bne.n	8001d1c <Task1+0xbbc>
						&& (data_received >= 0) && (data_received <= 14))
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	2b0e      	cmp	r3, #14
 8001c78:	d850      	bhi.n	8001d1c <Task1+0xbbc>
		{
			Lcd_cursor(&lcd,1,2);
 8001c7a:	f107 0310 	add.w	r3, r7, #16
 8001c7e:	2202      	movs	r2, #2
 8001c80:	2101      	movs	r1, #1
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fd40 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d90b      	bls.n	8001ca6 <Task1+0xb46>
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2b09      	cmp	r3, #9
 8001c92:	d808      	bhi.n	8001ca6 <Task1+0xb46>
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	461a      	mov	r2, r3
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fcfa 	bl	8000698 <Lcd_int>
 8001ca4:	e03b      	b.n	8001d1e <Task1+0xbbe>
			else switch (data_received)
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	3b0a      	subs	r3, #10
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d82f      	bhi.n	8001d0e <Task1+0xbae>
 8001cae:	a201      	add	r2, pc, #4	; (adr r2, 8001cb4 <Task1+0xb54>)
 8001cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb4:	08001cc9 	.word	0x08001cc9
 8001cb8:	08001cd7 	.word	0x08001cd7
 8001cbc:	08001ce5 	.word	0x08001ce5
 8001cc0:	08001cf3 	.word	0x08001cf3
 8001cc4:	08001d01 	.word	0x08001d01
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 8001cc8:	f107 0310 	add.w	r3, r7, #16
 8001ccc:	498b      	ldr	r1, [pc, #556]	; (8001efc <Task1+0xd9c>)
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fcfa 	bl	80006c8 <Lcd_string>
 8001cd4:	e023      	b.n	8001d1e <Task1+0xbbe>
			case 11: { Lcd_string(&lcd,"J"); break; }
 8001cd6:	f107 0310 	add.w	r3, r7, #16
 8001cda:	4989      	ldr	r1, [pc, #548]	; (8001f00 <Task1+0xda0>)
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fcf3 	bl	80006c8 <Lcd_string>
 8001ce2:	e01c      	b.n	8001d1e <Task1+0xbbe>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	4986      	ldr	r1, [pc, #536]	; (8001f04 <Task1+0xda4>)
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fcec 	bl	80006c8 <Lcd_string>
 8001cf0:	e015      	b.n	8001d1e <Task1+0xbbe>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	4984      	ldr	r1, [pc, #528]	; (8001f08 <Task1+0xda8>)
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fce5 	bl	80006c8 <Lcd_string>
 8001cfe:	e00e      	b.n	8001d1e <Task1+0xbbe>
			case 14: { Lcd_string(&lcd,"A"); break;	}
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	4981      	ldr	r1, [pc, #516]	; (8001f0c <Task1+0xdac>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fcde 	bl	80006c8 <Lcd_string>
 8001d0c:	e007      	b.n	8001d1e <Task1+0xbbe>
			default: { Lcd_string(&lcd,"X"); break;	}
 8001d0e:	f107 0310 	add.w	r3, r7, #16
 8001d12:	497f      	ldr	r1, [pc, #508]	; (8001f10 <Task1+0xdb0>)
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fcd7 	bl	80006c8 <Lcd_string>
 8001d1a:	e000      	b.n	8001d1e <Task1+0xbbe>
			}//End Switch
		}
 8001d1c:	bf00      	nop

		//Karta nr 2
		if(((xQueueReceive(card2_C_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 8001d1e:	4b7e      	ldr	r3, [pc, #504]	; (8001f18 <Task1+0xdb8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f107 010f 	add.w	r1, r7, #15
 8001d26:	2200      	movs	r2, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f004 fcb1 	bl	8006690 <xQueueReceive>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d157      	bne.n	8001de4 <Task1+0xc84>
				&& (data_received >= 2) && (data_received <= 14))
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d954      	bls.n	8001de4 <Task1+0xc84>
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	2b0e      	cmp	r3, #14
 8001d3e:	d851      	bhi.n	8001de4 <Task1+0xc84>
		{
			Lcd_cursor(&lcd,1,3);
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	2203      	movs	r2, #3
 8001d46:	2101      	movs	r1, #1
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fcdd 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d90b      	bls.n	8001d6c <Task1+0xc0c>
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	2b09      	cmp	r3, #9
 8001d58:	d808      	bhi.n	8001d6c <Task1+0xc0c>
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fc97 	bl	8000698 <Lcd_int>
 8001d6a:	e03c      	b.n	8001de6 <Task1+0xc86>
			else switch (data_received)
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	3b0a      	subs	r3, #10
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d830      	bhi.n	8001dd6 <Task1+0xc76>
 8001d74:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <Task1+0xc1c>)
 8001d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7a:	bf00      	nop
 8001d7c:	08001d91 	.word	0x08001d91
 8001d80:	08001d9f 	.word	0x08001d9f
 8001d84:	08001dad 	.word	0x08001dad
 8001d88:	08001dbb 	.word	0x08001dbb
 8001d8c:	08001dc9 	.word	0x08001dc9
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	4959      	ldr	r1, [pc, #356]	; (8001efc <Task1+0xd9c>)
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fc96 	bl	80006c8 <Lcd_string>
 8001d9c:	e023      	b.n	8001de6 <Task1+0xc86>
			case 11: { Lcd_string(&lcd,"J"); break; }
 8001d9e:	f107 0310 	add.w	r3, r7, #16
 8001da2:	4957      	ldr	r1, [pc, #348]	; (8001f00 <Task1+0xda0>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fc8f 	bl	80006c8 <Lcd_string>
 8001daa:	e01c      	b.n	8001de6 <Task1+0xc86>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	4954      	ldr	r1, [pc, #336]	; (8001f04 <Task1+0xda4>)
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fc88 	bl	80006c8 <Lcd_string>
 8001db8:	e015      	b.n	8001de6 <Task1+0xc86>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 8001dba:	f107 0310 	add.w	r3, r7, #16
 8001dbe:	4952      	ldr	r1, [pc, #328]	; (8001f08 <Task1+0xda8>)
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fc81 	bl	80006c8 <Lcd_string>
 8001dc6:	e00e      	b.n	8001de6 <Task1+0xc86>
			case 14: { Lcd_string(&lcd,"A"); break;	}
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	494f      	ldr	r1, [pc, #316]	; (8001f0c <Task1+0xdac>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fc7a 	bl	80006c8 <Lcd_string>
 8001dd4:	e007      	b.n	8001de6 <Task1+0xc86>
			default: { Lcd_string(&lcd,"X"); break;	}
 8001dd6:	f107 0310 	add.w	r3, r7, #16
 8001dda:	494d      	ldr	r1, [pc, #308]	; (8001f10 <Task1+0xdb0>)
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fc73 	bl	80006c8 <Lcd_string>
 8001de2:	e000      	b.n	8001de6 <Task1+0xc86>
			}//End Switch
		}
 8001de4:	bf00      	nop

		//Karta nr 3
		if(((xQueueReceive(card3_C_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 8001de6:	4b4d      	ldr	r3, [pc, #308]	; (8001f1c <Task1+0xdbc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f107 010f 	add.w	r1, r7, #15
 8001dee:	2200      	movs	r2, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f004 fc4d 	bl	8006690 <xQueueReceive>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d157      	bne.n	8001eac <Task1+0xd4c>
				&& (data_received >= 2) && (data_received <= 14))
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d954      	bls.n	8001eac <Task1+0xd4c>
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	2b0e      	cmp	r3, #14
 8001e06:	d851      	bhi.n	8001eac <Task1+0xd4c>
		{
			Lcd_cursor(&lcd,1,4);
 8001e08:	f107 0310 	add.w	r3, r7, #16
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	2101      	movs	r1, #1
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fc79 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d90b      	bls.n	8001e34 <Task1+0xcd4>
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b09      	cmp	r3, #9
 8001e20:	d808      	bhi.n	8001e34 <Task1+0xcd4>
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	461a      	mov	r2, r3
 8001e26:	f107 0310 	add.w	r3, r7, #16
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fc33 	bl	8000698 <Lcd_int>
 8001e32:	e03c      	b.n	8001eae <Task1+0xd4e>
			else switch (data_received)
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	3b0a      	subs	r3, #10
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d830      	bhi.n	8001e9e <Task1+0xd3e>
 8001e3c:	a201      	add	r2, pc, #4	; (adr r2, 8001e44 <Task1+0xce4>)
 8001e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e42:	bf00      	nop
 8001e44:	08001e59 	.word	0x08001e59
 8001e48:	08001e67 	.word	0x08001e67
 8001e4c:	08001e75 	.word	0x08001e75
 8001e50:	08001e83 	.word	0x08001e83
 8001e54:	08001e91 	.word	0x08001e91
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	4927      	ldr	r1, [pc, #156]	; (8001efc <Task1+0xd9c>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fc32 	bl	80006c8 <Lcd_string>
 8001e64:	e023      	b.n	8001eae <Task1+0xd4e>
			case 11: { Lcd_string(&lcd,"J"); break; }
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	4925      	ldr	r1, [pc, #148]	; (8001f00 <Task1+0xda0>)
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fc2b 	bl	80006c8 <Lcd_string>
 8001e72:	e01c      	b.n	8001eae <Task1+0xd4e>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 8001e74:	f107 0310 	add.w	r3, r7, #16
 8001e78:	4922      	ldr	r1, [pc, #136]	; (8001f04 <Task1+0xda4>)
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fc24 	bl	80006c8 <Lcd_string>
 8001e80:	e015      	b.n	8001eae <Task1+0xd4e>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 8001e82:	f107 0310 	add.w	r3, r7, #16
 8001e86:	4920      	ldr	r1, [pc, #128]	; (8001f08 <Task1+0xda8>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fc1d 	bl	80006c8 <Lcd_string>
 8001e8e:	e00e      	b.n	8001eae <Task1+0xd4e>
			case 14: { Lcd_string(&lcd,"A"); break;	}
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	491d      	ldr	r1, [pc, #116]	; (8001f0c <Task1+0xdac>)
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fc16 	bl	80006c8 <Lcd_string>
 8001e9c:	e007      	b.n	8001eae <Task1+0xd4e>
			default: { Lcd_string(&lcd,"X"); break;	}
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	491b      	ldr	r1, [pc, #108]	; (8001f10 <Task1+0xdb0>)
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fc0f 	bl	80006c8 <Lcd_string>
 8001eaa:	e000      	b.n	8001eae <Task1+0xd4e>
			}//End Switch
		}
 8001eac:	bf00      	nop

		//Karta nr 4
		if(((xQueueReceive(card4_C_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 8001eae:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <Task1+0xdc0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f107 010f 	add.w	r1, r7, #15
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f004 fbe9 	bl	8006690 <xQueueReceive>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d16b      	bne.n	8001f9c <Task1+0xe3c>
				&& (data_received >= 2) && (data_received <= 14))
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d968      	bls.n	8001f9c <Task1+0xe3c>
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	2b0e      	cmp	r3, #14
 8001ece:	d865      	bhi.n	8001f9c <Task1+0xe3c>
		{
			Lcd_cursor(&lcd,1,5);
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	2205      	movs	r2, #5
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fc15 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d91f      	bls.n	8001f24 <Task1+0xdc4>
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	2b09      	cmp	r3, #9
 8001ee8:	d81c      	bhi.n	8001f24 <Task1+0xdc4>
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	461a      	mov	r2, r3
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fbcf 	bl	8000698 <Lcd_int>
 8001efa:	e050      	b.n	8001f9e <Task1+0xe3e>
 8001efc:	08009774 	.word	0x08009774
 8001f00:	08009778 	.word	0x08009778
 8001f04:	0800977c 	.word	0x0800977c
 8001f08:	08009780 	.word	0x08009780
 8001f0c:	08009784 	.word	0x08009784
 8001f10:	08009788 	.word	0x08009788
 8001f14:	200047cc 	.word	0x200047cc
 8001f18:	200046fc 	.word	0x200046fc
 8001f1c:	20004774 	.word	0x20004774
 8001f20:	200046d0 	.word	0x200046d0
			else switch (data_received)
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	3b0a      	subs	r3, #10
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d830      	bhi.n	8001f8e <Task1+0xe2e>
 8001f2c:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <Task1+0xdd4>)
 8001f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f32:	bf00      	nop
 8001f34:	08001f49 	.word	0x08001f49
 8001f38:	08001f57 	.word	0x08001f57
 8001f3c:	08001f65 	.word	0x08001f65
 8001f40:	08001f73 	.word	0x08001f73
 8001f44:	08001f81 	.word	0x08001f81
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	49bd      	ldr	r1, [pc, #756]	; (8002244 <Task1+0x10e4>)
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fbba 	bl	80006c8 <Lcd_string>
 8001f54:	e023      	b.n	8001f9e <Task1+0xe3e>
			case 11: { Lcd_string(&lcd,"J"); break; }
 8001f56:	f107 0310 	add.w	r3, r7, #16
 8001f5a:	49bb      	ldr	r1, [pc, #748]	; (8002248 <Task1+0x10e8>)
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fbb3 	bl	80006c8 <Lcd_string>
 8001f62:	e01c      	b.n	8001f9e <Task1+0xe3e>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	49b8      	ldr	r1, [pc, #736]	; (800224c <Task1+0x10ec>)
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fbac 	bl	80006c8 <Lcd_string>
 8001f70:	e015      	b.n	8001f9e <Task1+0xe3e>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 8001f72:	f107 0310 	add.w	r3, r7, #16
 8001f76:	49b6      	ldr	r1, [pc, #728]	; (8002250 <Task1+0x10f0>)
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fba5 	bl	80006c8 <Lcd_string>
 8001f7e:	e00e      	b.n	8001f9e <Task1+0xe3e>
			case 14: { Lcd_string(&lcd,"A"); break;	}
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	49b3      	ldr	r1, [pc, #716]	; (8002254 <Task1+0x10f4>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fb9e 	bl	80006c8 <Lcd_string>
 8001f8c:	e007      	b.n	8001f9e <Task1+0xe3e>
			default: { Lcd_string(&lcd,"X"); break;	}
 8001f8e:	f107 0310 	add.w	r3, r7, #16
 8001f92:	49b1      	ldr	r1, [pc, #708]	; (8002258 <Task1+0x10f8>)
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fb97 	bl	80006c8 <Lcd_string>
 8001f9a:	e000      	b.n	8001f9e <Task1+0xe3e>
			}//End Switch
		}
 8001f9c:	bf00      	nop

		//Karta nr 5
		if(((xQueueReceive(card5_C_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 8001f9e:	4baf      	ldr	r3, [pc, #700]	; (800225c <Task1+0x10fc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f107 010f 	add.w	r1, r7, #15
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f004 fb71 	bl	8006690 <xQueueReceive>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d157      	bne.n	8002064 <Task1+0xf04>
				&& (data_received >= 2) && (data_received <= 14))
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d954      	bls.n	8002064 <Task1+0xf04>
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	2b0e      	cmp	r3, #14
 8001fbe:	d851      	bhi.n	8002064 <Task1+0xf04>
		{
			Lcd_cursor(&lcd,1,6);
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	2206      	movs	r2, #6
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fb9d 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d90b      	bls.n	8001fec <Task1+0xe8c>
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	2b09      	cmp	r3, #9
 8001fd8:	d808      	bhi.n	8001fec <Task1+0xe8c>
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f107 0310 	add.w	r3, r7, #16
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fb57 	bl	8000698 <Lcd_int>
 8001fea:	e03c      	b.n	8002066 <Task1+0xf06>
			else switch (data_received)
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	3b0a      	subs	r3, #10
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d830      	bhi.n	8002056 <Task1+0xef6>
 8001ff4:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <Task1+0xe9c>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	08002011 	.word	0x08002011
 8002000:	0800201f 	.word	0x0800201f
 8002004:	0800202d 	.word	0x0800202d
 8002008:	0800203b 	.word	0x0800203b
 800200c:	08002049 	.word	0x08002049
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	498b      	ldr	r1, [pc, #556]	; (8002244 <Task1+0x10e4>)
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fb56 	bl	80006c8 <Lcd_string>
 800201c:	e023      	b.n	8002066 <Task1+0xf06>
			case 11: { Lcd_string(&lcd,"J"); break; }
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	4989      	ldr	r1, [pc, #548]	; (8002248 <Task1+0x10e8>)
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fb4f 	bl	80006c8 <Lcd_string>
 800202a:	e01c      	b.n	8002066 <Task1+0xf06>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 800202c:	f107 0310 	add.w	r3, r7, #16
 8002030:	4986      	ldr	r1, [pc, #536]	; (800224c <Task1+0x10ec>)
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fb48 	bl	80006c8 <Lcd_string>
 8002038:	e015      	b.n	8002066 <Task1+0xf06>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 800203a:	f107 0310 	add.w	r3, r7, #16
 800203e:	4984      	ldr	r1, [pc, #528]	; (8002250 <Task1+0x10f0>)
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fb41 	bl	80006c8 <Lcd_string>
 8002046:	e00e      	b.n	8002066 <Task1+0xf06>
			case 14: { Lcd_string(&lcd,"A"); break;	}
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	4981      	ldr	r1, [pc, #516]	; (8002254 <Task1+0x10f4>)
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fb3a 	bl	80006c8 <Lcd_string>
 8002054:	e007      	b.n	8002066 <Task1+0xf06>
			default: { Lcd_string(&lcd,"X"); break;	}
 8002056:	f107 0310 	add.w	r3, r7, #16
 800205a:	497f      	ldr	r1, [pc, #508]	; (8002258 <Task1+0x10f8>)
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fb33 	bl	80006c8 <Lcd_string>
 8002062:	e000      	b.n	8002066 <Task1+0xf06>
			}//End Switch
		}
 8002064:	bf00      	nop

		//Karta nr 6
		if(((xQueueReceive(card6_C_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 8002066:	4b7e      	ldr	r3, [pc, #504]	; (8002260 <Task1+0x1100>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f107 010f 	add.w	r1, r7, #15
 800206e:	2200      	movs	r2, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f004 fb0d 	bl	8006690 <xQueueReceive>
 8002076:	4603      	mov	r3, r0
 8002078:	2b01      	cmp	r3, #1
 800207a:	d157      	bne.n	800212c <Task1+0xfcc>
				&& (data_received >= 2) && (data_received <= 14))
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d954      	bls.n	800212c <Task1+0xfcc>
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	2b0e      	cmp	r3, #14
 8002086:	d851      	bhi.n	800212c <Task1+0xfcc>
		{
			Lcd_cursor(&lcd,1,7);
 8002088:	f107 0310 	add.w	r3, r7, #16
 800208c:	2207      	movs	r2, #7
 800208e:	2101      	movs	r1, #1
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fb39 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d90b      	bls.n	80020b4 <Task1+0xf54>
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	2b09      	cmp	r3, #9
 80020a0:	d808      	bhi.n	80020b4 <Task1+0xf54>
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	461a      	mov	r2, r3
 80020a6:	f107 0310 	add.w	r3, r7, #16
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe faf3 	bl	8000698 <Lcd_int>
 80020b2:	e03c      	b.n	800212e <Task1+0xfce>
			else switch (data_received)
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	3b0a      	subs	r3, #10
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d830      	bhi.n	800211e <Task1+0xfbe>
 80020bc:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <Task1+0xf64>)
 80020be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c2:	bf00      	nop
 80020c4:	080020d9 	.word	0x080020d9
 80020c8:	080020e7 	.word	0x080020e7
 80020cc:	080020f5 	.word	0x080020f5
 80020d0:	08002103 	.word	0x08002103
 80020d4:	08002111 	.word	0x08002111
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	4959      	ldr	r1, [pc, #356]	; (8002244 <Task1+0x10e4>)
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe faf2 	bl	80006c8 <Lcd_string>
 80020e4:	e023      	b.n	800212e <Task1+0xfce>
			case 11: { Lcd_string(&lcd,"J"); break; }
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	4957      	ldr	r1, [pc, #348]	; (8002248 <Task1+0x10e8>)
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe faeb 	bl	80006c8 <Lcd_string>
 80020f2:	e01c      	b.n	800212e <Task1+0xfce>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	4954      	ldr	r1, [pc, #336]	; (800224c <Task1+0x10ec>)
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fae4 	bl	80006c8 <Lcd_string>
 8002100:	e015      	b.n	800212e <Task1+0xfce>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 8002102:	f107 0310 	add.w	r3, r7, #16
 8002106:	4952      	ldr	r1, [pc, #328]	; (8002250 <Task1+0x10f0>)
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fadd 	bl	80006c8 <Lcd_string>
 800210e:	e00e      	b.n	800212e <Task1+0xfce>
			case 14: { Lcd_string(&lcd,"A"); break;	}
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	494f      	ldr	r1, [pc, #316]	; (8002254 <Task1+0x10f4>)
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fad6 	bl	80006c8 <Lcd_string>
 800211c:	e007      	b.n	800212e <Task1+0xfce>
			default: { Lcd_string(&lcd,"X"); break;	}
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	494d      	ldr	r1, [pc, #308]	; (8002258 <Task1+0x10f8>)
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe facf 	bl	80006c8 <Lcd_string>
 800212a:	e000      	b.n	800212e <Task1+0xfce>
			}//End Switch
		}
 800212c:	bf00      	nop

		//Karta nr 7
		if(((xQueueReceive(card7_C_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 800212e:	4b4d      	ldr	r3, [pc, #308]	; (8002264 <Task1+0x1104>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f107 010f 	add.w	r1, r7, #15
 8002136:	2200      	movs	r2, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f004 faa9 	bl	8006690 <xQueueReceive>
 800213e:	4603      	mov	r3, r0
 8002140:	2b01      	cmp	r3, #1
 8002142:	d157      	bne.n	80021f4 <Task1+0x1094>
				&& (data_received >= 2) && (data_received <= 14))
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d954      	bls.n	80021f4 <Task1+0x1094>
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	2b0e      	cmp	r3, #14
 800214e:	d851      	bhi.n	80021f4 <Task1+0x1094>
		{
			Lcd_cursor(&lcd,1,8);
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	2208      	movs	r2, #8
 8002156:	2101      	movs	r1, #1
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fad5 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d90b      	bls.n	800217c <Task1+0x101c>
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	2b09      	cmp	r3, #9
 8002168:	d808      	bhi.n	800217c <Task1+0x101c>
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	461a      	mov	r2, r3
 800216e:	f107 0310 	add.w	r3, r7, #16
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fa8f 	bl	8000698 <Lcd_int>
 800217a:	e03c      	b.n	80021f6 <Task1+0x1096>
			else switch (data_received)
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	3b0a      	subs	r3, #10
 8002180:	2b04      	cmp	r3, #4
 8002182:	d830      	bhi.n	80021e6 <Task1+0x1086>
 8002184:	a201      	add	r2, pc, #4	; (adr r2, 800218c <Task1+0x102c>)
 8002186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218a:	bf00      	nop
 800218c:	080021a1 	.word	0x080021a1
 8002190:	080021af 	.word	0x080021af
 8002194:	080021bd 	.word	0x080021bd
 8002198:	080021cb 	.word	0x080021cb
 800219c:	080021d9 	.word	0x080021d9
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	4927      	ldr	r1, [pc, #156]	; (8002244 <Task1+0x10e4>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe fa8e 	bl	80006c8 <Lcd_string>
 80021ac:	e023      	b.n	80021f6 <Task1+0x1096>
			case 11: { Lcd_string(&lcd,"J"); break; }
 80021ae:	f107 0310 	add.w	r3, r7, #16
 80021b2:	4925      	ldr	r1, [pc, #148]	; (8002248 <Task1+0x10e8>)
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe fa87 	bl	80006c8 <Lcd_string>
 80021ba:	e01c      	b.n	80021f6 <Task1+0x1096>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	4922      	ldr	r1, [pc, #136]	; (800224c <Task1+0x10ec>)
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fa80 	bl	80006c8 <Lcd_string>
 80021c8:	e015      	b.n	80021f6 <Task1+0x1096>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 80021ca:	f107 0310 	add.w	r3, r7, #16
 80021ce:	4920      	ldr	r1, [pc, #128]	; (8002250 <Task1+0x10f0>)
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe fa79 	bl	80006c8 <Lcd_string>
 80021d6:	e00e      	b.n	80021f6 <Task1+0x1096>
			case 14: { Lcd_string(&lcd,"A"); break;	}
 80021d8:	f107 0310 	add.w	r3, r7, #16
 80021dc:	491d      	ldr	r1, [pc, #116]	; (8002254 <Task1+0x10f4>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fa72 	bl	80006c8 <Lcd_string>
 80021e4:	e007      	b.n	80021f6 <Task1+0x1096>
			default: { Lcd_string(&lcd,"X"); break;	}
 80021e6:	f107 0310 	add.w	r3, r7, #16
 80021ea:	491b      	ldr	r1, [pc, #108]	; (8002258 <Task1+0x10f8>)
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe fa6b 	bl	80006c8 <Lcd_string>
 80021f2:	e000      	b.n	80021f6 <Task1+0x1096>
			}//End Switch
		}
 80021f4:	bf00      	nop

		//Karta nr 8
		if(((xQueueReceive(card8_C_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 80021f6:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <Task1+0x1108>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f107 010f 	add.w	r1, r7, #15
 80021fe:	2200      	movs	r2, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f004 fa45 	bl	8006690 <xQueueReceive>
 8002206:	4603      	mov	r3, r0
 8002208:	2b01      	cmp	r3, #1
 800220a:	d16b      	bne.n	80022e4 <Task1+0x1184>
				&& (data_received >= 2) && (data_received <= 14))
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d968      	bls.n	80022e4 <Task1+0x1184>
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	2b0e      	cmp	r3, #14
 8002216:	d865      	bhi.n	80022e4 <Task1+0x1184>
		{
			Lcd_cursor(&lcd,1,9);
 8002218:	f107 0310 	add.w	r3, r7, #16
 800221c:	2209      	movs	r2, #9
 800221e:	2101      	movs	r1, #1
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe fa71 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d91f      	bls.n	800226c <Task1+0x110c>
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	2b09      	cmp	r3, #9
 8002230:	d81c      	bhi.n	800226c <Task1+0x110c>
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	461a      	mov	r2, r3
 8002236:	f107 0310 	add.w	r3, r7, #16
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe fa2b 	bl	8000698 <Lcd_int>
 8002242:	e050      	b.n	80022e6 <Task1+0x1186>
 8002244:	08009774 	.word	0x08009774
 8002248:	08009778 	.word	0x08009778
 800224c:	0800977c 	.word	0x0800977c
 8002250:	08009780 	.word	0x08009780
 8002254:	08009784 	.word	0x08009784
 8002258:	08009788 	.word	0x08009788
 800225c:	200047dc 	.word	0x200047dc
 8002260:	2000477c 	.word	0x2000477c
 8002264:	200046e8 	.word	0x200046e8
 8002268:	200046f8 	.word	0x200046f8
			else switch (data_received)
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	3b0a      	subs	r3, #10
 8002270:	2b04      	cmp	r3, #4
 8002272:	d830      	bhi.n	80022d6 <Task1+0x1176>
 8002274:	a201      	add	r2, pc, #4	; (adr r2, 800227c <Task1+0x111c>)
 8002276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227a:	bf00      	nop
 800227c:	08002291 	.word	0x08002291
 8002280:	0800229f 	.word	0x0800229f
 8002284:	080022ad 	.word	0x080022ad
 8002288:	080022bb 	.word	0x080022bb
 800228c:	080022c9 	.word	0x080022c9
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 8002290:	f107 0310 	add.w	r3, r7, #16
 8002294:	4985      	ldr	r1, [pc, #532]	; (80024ac <Task1+0x134c>)
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fa16 	bl	80006c8 <Lcd_string>
 800229c:	e023      	b.n	80022e6 <Task1+0x1186>
			case 11: { Lcd_string(&lcd,"J"); break; }
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	4983      	ldr	r1, [pc, #524]	; (80024b0 <Task1+0x1350>)
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe fa0f 	bl	80006c8 <Lcd_string>
 80022aa:	e01c      	b.n	80022e6 <Task1+0x1186>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 80022ac:	f107 0310 	add.w	r3, r7, #16
 80022b0:	4980      	ldr	r1, [pc, #512]	; (80024b4 <Task1+0x1354>)
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fa08 	bl	80006c8 <Lcd_string>
 80022b8:	e015      	b.n	80022e6 <Task1+0x1186>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 80022ba:	f107 0310 	add.w	r3, r7, #16
 80022be:	497e      	ldr	r1, [pc, #504]	; (80024b8 <Task1+0x1358>)
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe fa01 	bl	80006c8 <Lcd_string>
 80022c6:	e00e      	b.n	80022e6 <Task1+0x1186>
			case 14: { Lcd_string(&lcd,"A"); break;	}
 80022c8:	f107 0310 	add.w	r3, r7, #16
 80022cc:	497b      	ldr	r1, [pc, #492]	; (80024bc <Task1+0x135c>)
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe f9fa 	bl	80006c8 <Lcd_string>
 80022d4:	e007      	b.n	80022e6 <Task1+0x1186>
			default: { Lcd_string(&lcd,"X"); break;	}
 80022d6:	f107 0310 	add.w	r3, r7, #16
 80022da:	4979      	ldr	r1, [pc, #484]	; (80024c0 <Task1+0x1360>)
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f9f3 	bl	80006c8 <Lcd_string>
 80022e2:	e000      	b.n	80022e6 <Task1+0x1186>
			}//End Switch
		}
 80022e4:	bf00      	nop

		//Karta nr 9
		if(((xQueueReceive(card9_C_LCDqueue, &(data_received), time_to_wait)) == pdTRUE)
 80022e6:	4b77      	ldr	r3, [pc, #476]	; (80024c4 <Task1+0x1364>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f107 010f 	add.w	r1, r7, #15
 80022ee:	2200      	movs	r2, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f004 f9cd 	bl	8006690 <xQueueReceive>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d157      	bne.n	80023ac <Task1+0x124c>
				&& (data_received >= 2) && (data_received <= 14))
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d954      	bls.n	80023ac <Task1+0x124c>
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	2b0e      	cmp	r3, #14
 8002306:	d851      	bhi.n	80023ac <Task1+0x124c>
		{
			Lcd_cursor(&lcd,1,10);
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	220a      	movs	r2, #10
 800230e:	2101      	movs	r1, #1
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe f9f9 	bl	8000708 <Lcd_cursor>
			if ((data_received >= 2) && (data_received <= 9)) Lcd_int(&lcd,data_received);
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d90b      	bls.n	8002334 <Task1+0x11d4>
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	2b09      	cmp	r3, #9
 8002320:	d808      	bhi.n	8002334 <Task1+0x11d4>
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	461a      	mov	r2, r3
 8002326:	f107 0310 	add.w	r3, r7, #16
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe f9b3 	bl	8000698 <Lcd_int>
 8002332:	e03c      	b.n	80023ae <Task1+0x124e>
			else switch (data_received)
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	3b0a      	subs	r3, #10
 8002338:	2b04      	cmp	r3, #4
 800233a:	d830      	bhi.n	800239e <Task1+0x123e>
 800233c:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <Task1+0x11e4>)
 800233e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002342:	bf00      	nop
 8002344:	08002359 	.word	0x08002359
 8002348:	08002367 	.word	0x08002367
 800234c:	08002375 	.word	0x08002375
 8002350:	08002383 	.word	0x08002383
 8002354:	08002391 	.word	0x08002391
			{
			case 10: { Lcd_string(&lcd,"T"); break; }
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	4953      	ldr	r1, [pc, #332]	; (80024ac <Task1+0x134c>)
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe f9b2 	bl	80006c8 <Lcd_string>
 8002364:	e023      	b.n	80023ae <Task1+0x124e>
			case 11: { Lcd_string(&lcd,"J"); break; }
 8002366:	f107 0310 	add.w	r3, r7, #16
 800236a:	4951      	ldr	r1, [pc, #324]	; (80024b0 <Task1+0x1350>)
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f9ab 	bl	80006c8 <Lcd_string>
 8002372:	e01c      	b.n	80023ae <Task1+0x124e>
			case 12: { Lcd_string(&lcd,"Q"); break; }
 8002374:	f107 0310 	add.w	r3, r7, #16
 8002378:	494e      	ldr	r1, [pc, #312]	; (80024b4 <Task1+0x1354>)
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe f9a4 	bl	80006c8 <Lcd_string>
 8002380:	e015      	b.n	80023ae <Task1+0x124e>
			case 13: { Lcd_string(&lcd,"K"); break;	}
 8002382:	f107 0310 	add.w	r3, r7, #16
 8002386:	494c      	ldr	r1, [pc, #304]	; (80024b8 <Task1+0x1358>)
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f99d 	bl	80006c8 <Lcd_string>
 800238e:	e00e      	b.n	80023ae <Task1+0x124e>
			case	 14: { Lcd_string(&lcd,"A"); break;	}
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	4949      	ldr	r1, [pc, #292]	; (80024bc <Task1+0x135c>)
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe f996 	bl	80006c8 <Lcd_string>
 800239c:	e007      	b.n	80023ae <Task1+0x124e>
			default: { Lcd_string(&lcd,"X"); break;	}
 800239e:	f107 0310 	add.w	r3, r7, #16
 80023a2:	4947      	ldr	r1, [pc, #284]	; (80024c0 <Task1+0x1360>)
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f98f 	bl	80006c8 <Lcd_string>
 80023aa:	e000      	b.n	80023ae <Task1+0x124e>
			}//End Switch
		}
 80023ac:	bf00      	nop

		//Wyswietlenie ekranu dla zwyciezcy
		if(((xQueueReceive(winner_the_gameLCDqueue, &(data_received), time_to_wait)) == pdTRUE))
 80023ae:	4b46      	ldr	r3, [pc, #280]	; (80024c8 <Task1+0x1368>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f107 010f 	add.w	r1, r7, #15
 80023b6:	2200      	movs	r2, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f004 f969 	bl	8006690 <xQueueReceive>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d13a      	bne.n	800243a <Task1+0x12da>
		{
			if (data_received == screen_winner_this_game_U)
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d11a      	bne.n	8002400 <Task1+0x12a0>
			{
				Lcd_cursor(&lcd,0,0); Lcd_string(&lcd,"USER won theGame");
 80023ca:	f107 0310 	add.w	r3, r7, #16
 80023ce:	2200      	movs	r2, #0
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f998 	bl	8000708 <Lcd_cursor>
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	493b      	ldr	r1, [pc, #236]	; (80024cc <Task1+0x136c>)
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe f972 	bl	80006c8 <Lcd_string>
				Lcd_cursor(&lcd,1,0); Lcd_string(&lcd,"  USER  :  CPU  ");
 80023e4:	f107 0310 	add.w	r3, r7, #16
 80023e8:	2200      	movs	r2, #0
 80023ea:	2101      	movs	r1, #1
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f98b 	bl	8000708 <Lcd_cursor>
 80023f2:	f107 0310 	add.w	r3, r7, #16
 80023f6:	4936      	ldr	r1, [pc, #216]	; (80024d0 <Task1+0x1370>)
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe f965 	bl	80006c8 <Lcd_string>
 80023fe:	e01c      	b.n	800243a <Task1+0x12da>
			}
			else if (data_received == screen_winner_this_game_C)
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d119      	bne.n	800243a <Task1+0x12da>
			{
				Lcd_cursor(&lcd,0,0); Lcd_string(&lcd,"CPU won the game");
 8002406:	f107 0310 	add.w	r3, r7, #16
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe f97a 	bl	8000708 <Lcd_cursor>
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	492e      	ldr	r1, [pc, #184]	; (80024d4 <Task1+0x1374>)
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe f954 	bl	80006c8 <Lcd_string>
				Lcd_cursor(&lcd,1,0); Lcd_string(&lcd,"  USER  :  CPU  ");
 8002420:	f107 0310 	add.w	r3, r7, #16
 8002424:	2200      	movs	r2, #0
 8002426:	2101      	movs	r1, #1
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f96d 	bl	8000708 <Lcd_cursor>
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	4927      	ldr	r1, [pc, #156]	; (80024d0 <Task1+0x1370>)
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f947 	bl	80006c8 <Lcd_string>
			}
		}

		//Wyświetlenie wygranych rund przez gracza na ekranie podsumowywującym grę
		if(((xQueueReceive(wins_U_end_LCDqueue, &(data_received), time_to_wait)) == pdTRUE))
 800243a:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <Task1+0x1378>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f107 010f 	add.w	r1, r7, #15
 8002442:	2200      	movs	r2, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f004 f923 	bl	8006690 <xQueueReceive>
 800244a:	4603      	mov	r3, r0
 800244c:	2b01      	cmp	r3, #1
 800244e:	d10e      	bne.n	800246e <Task1+0x130e>
		{
			Lcd_cursor(&lcd,1,7);
 8002450:	f107 0310 	add.w	r3, r7, #16
 8002454:	2207      	movs	r2, #7
 8002456:	2101      	movs	r1, #1
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe f955 	bl	8000708 <Lcd_cursor>
			Lcd_int(&lcd,data_received);
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	461a      	mov	r2, r3
 8002462:	f107 0310 	add.w	r3, r7, #16
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f915 	bl	8000698 <Lcd_int>
		}

		//Wyświetlenie wygranych rund przez komputer na ekranie podsumowywującym grę
		if(((xQueueReceive(wins_C_end_LCDqueue, &(data_received), time_to_wait)) == pdTRUE))
 800246e:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <Task1+0x137c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f107 010f 	add.w	r1, r7, #15
 8002476:	2200      	movs	r2, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f004 f909 	bl	8006690 <xQueueReceive>
 800247e:	4603      	mov	r3, r0
 8002480:	2b01      	cmp	r3, #1
 8002482:	d10e      	bne.n	80024a2 <Task1+0x1342>
		{
			Lcd_cursor(&lcd,1,9);
 8002484:	f107 0310 	add.w	r3, r7, #16
 8002488:	2209      	movs	r2, #9
 800248a:	2101      	movs	r1, #1
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe f93b 	bl	8000708 <Lcd_cursor>
			Lcd_int(&lcd,data_received);
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	461a      	mov	r2, r3
 8002496:	f107 0310 	add.w	r3, r7, #16
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe f8fb 	bl	8000698 <Lcd_int>
		}
		osDelay(100);
 80024a2:	2064      	movs	r0, #100	; 0x64
 80024a4:	f003 fd57 	bl	8005f56 <osDelay>
		if((xQueueReceive(interfaceLCDqueue, &(data_received), 10)) == pdTRUE)
 80024a8:	f7fe bea2 	b.w	80011f0 <Task1+0x90>
 80024ac:	08009774 	.word	0x08009774
 80024b0:	08009778 	.word	0x08009778
 80024b4:	0800977c 	.word	0x0800977c
 80024b8:	08009780 	.word	0x08009780
 80024bc:	08009784 	.word	0x08009784
 80024c0:	08009788 	.word	0x08009788
 80024c4:	20004754 	.word	0x20004754
 80024c8:	20004674 	.word	0x20004674
 80024cc:	0800978c 	.word	0x0800978c
 80024d0:	080097a0 	.word	0x080097a0
 80024d4:	080097b4 	.word	0x080097b4
 80024d8:	20004780 	.word	0x20004780
 80024dc:	200046d8 	.word	0x200046d8

080024e0 <Task2>:
	}
}

//Obsługa przycisków
void Task2 (void *argument)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	//Wyzerowanie semaforow obsługujących przyciski:
	xSemaphoreTake(Semaphore_nowa_gra_pressed, 0);
 80024e8:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <Task2+0xb8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f004 f9ae 	bl	8006850 <xQueueSemaphoreTake>
	xSemaphoreTake(Semaphore_reset_pressed, 0);
 80024f4:	4b29      	ldr	r3, [pc, #164]	; (800259c <Task2+0xbc>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f004 f9a8 	bl	8006850 <xQueueSemaphoreTake>
	xSemaphoreTake(Semaphore_kolejna_karta_pressed, 0);
 8002500:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <Task2+0xc0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f004 f9a2 	bl	8006850 <xQueueSemaphoreTake>
	xSemaphoreTake(Semaphore_wystarczy_kart_pressed, 0);
 800250c:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <Task2+0xc4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f004 f99c 	bl	8006850 <xQueueSemaphoreTake>

	for(;;)
	{
		if (Pressed_nowa_gra == 1)
 8002518:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <Task2+0xc8>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d10a      	bne.n	8002536 <Task2+0x56>
		{
			xSemaphoreGive(Semaphore_nowa_gra_pressed);
 8002520:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <Task2+0xb8>)
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	2300      	movs	r3, #0
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	f003 ff17 	bl	800635c <xQueueGenericSend>
			Pressed_nowa_gra = 0;
 800252e:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <Task2+0xc8>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	e02b      	b.n	800258e <Task2+0xae>
		}
		else if (Pressed_reset == 1)
 8002536:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <Task2+0xcc>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d10a      	bne.n	8002554 <Task2+0x74>
		{
			xSemaphoreGive(Semaphore_reset_pressed);
 800253e:	4b17      	ldr	r3, [pc, #92]	; (800259c <Task2+0xbc>)
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	2300      	movs	r3, #0
 8002544:	2200      	movs	r2, #0
 8002546:	2100      	movs	r1, #0
 8002548:	f003 ff08 	bl	800635c <xQueueGenericSend>
			Pressed_reset = 0;
 800254c:	4b17      	ldr	r3, [pc, #92]	; (80025ac <Task2+0xcc>)
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	e01c      	b.n	800258e <Task2+0xae>
		}
		else if (Pressed_kolejna_karta == 1)
 8002554:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <Task2+0xd0>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d10a      	bne.n	8002572 <Task2+0x92>
		{
			xSemaphoreGive(Semaphore_kolejna_karta_pressed);
 800255c:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <Task2+0xc0>)
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	2300      	movs	r3, #0
 8002562:	2200      	movs	r2, #0
 8002564:	2100      	movs	r1, #0
 8002566:	f003 fef9 	bl	800635c <xQueueGenericSend>
			Pressed_kolejna_karta = 0;
 800256a:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <Task2+0xd0>)
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
 8002570:	e00d      	b.n	800258e <Task2+0xae>
		}
		else if (Pressed_wystarczy_kart == 1)
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <Task2+0xd4>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d109      	bne.n	800258e <Task2+0xae>
		{
			xSemaphoreGive(Semaphore_wystarczy_kart_pressed);
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <Task2+0xc4>)
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	2300      	movs	r3, #0
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	f003 feea 	bl	800635c <xQueueGenericSend>
			Pressed_wystarczy_kart = 0;
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <Task2+0xd4>)
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
		}

		osDelay(100);
 800258e:	2064      	movs	r0, #100	; 0x64
 8002590:	f003 fce1 	bl	8005f56 <osDelay>
		if (Pressed_nowa_gra == 1)
 8002594:	e7c0      	b.n	8002518 <Task2+0x38>
 8002596:	bf00      	nop
 8002598:	20004750 	.word	0x20004750
 800259c:	2000475c 	.word	0x2000475c
 80025a0:	200047c8 	.word	0x200047c8
 80025a4:	200046e0 	.word	0x200046e0
 80025a8:	20000813 	.word	0x20000813
 80025ac:	20000814 	.word	0x20000814
 80025b0:	20000816 	.word	0x20000816
 80025b4:	20000815 	.word	0x20000815

080025b8 <Task3>:
	}
}

//Zarzadzanie grą
void Task3 (void *argument)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b094      	sub	sp, #80	; 0x50
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	//Zdobyte punkty, wygrane rundy
	uint8_t number_of_wins_USER = 0;//liczba wygranych rund przez gracza
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	uint8_t number_of_wins_CPU = 0; //liczba wygranych rund przez komputer
 80025c6:	2300      	movs	r3, #0
 80025c8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	uint8_t number_of_points_USER = 0;//liczba punktow zdobyta w obecnej rundzie przez gracza
 80025cc:	2300      	movs	r3, #0
 80025ce:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	uint8_t number_of_points_CPU = 0; //liczba punktow zdobyta w obecnej rundzie przez komputer
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	//Dobieranie kart
	uint8_t nr_cards_drawn_USER = 0; //Liczba dobranych kart przez gracza
 80025d8:	2300      	movs	r3, #0
 80025da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t nr_cards_drawn_CPU = 0; //Liczba dobranych kart przez komputer
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t nr_of_cards_taken = 0; //liczba wzietych kart z talii
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint8_t allow_draw_a_card_USER = 0; //1 - wolno dobierac karty, 0 - nie wolno dobierac kart
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	uint8_t allow_draw_a_card_CPU = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	//Rozeznanie czasowe obecnej rundy i całej gry
	uint8_t round_continues = 1; //Czy runda nadal trwa? 1 - Tak, 0 - Nie
 80025f6:	2301      	movs	r3, #1
 80025f8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	uint8_t if_started_game = 0; //1 gdy gra została rozpoczęta, 0 gdy jeszcze nie została rozpoczęta
 80025fc:	2300      	movs	r3, #0
 80025fe:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	uint8_t game_finish = 0; //1 - gra zostala zakonczona, pojawil sie ekran koncowy z wynikami, 0 - gra trwa dalej
 8002602:	2300      	movs	r3, #0
 8002604:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

	uint8_t special_screen = screen_default; //Zmienna przechowujaca jaki szablon ekranu ma zostac wyswietlony
 8002608:	2301      	movs	r3, #1
 800260a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	//Zmienne informujace, czy wartosc jakiejsc zmiennej wyswietlanej na LCD ulegla zmianie. Jezeli nie, to jej nie wysylaj
	uint8_t change_special_screen = 0; //1 - wartośc uległa zmianie, prześlij ją na ekran LCD
 800260e:	2300      	movs	r3, #0
 8002610:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t change_number_of_points_USER = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	uint8_t change_number_of_points_CPU = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	uint8_t change_number_of_wins_USER = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint8_t change_number_of_wins_CPU = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	//Tablice informujace czy nastapila jakas zmiana w wartosci karty
	//1 - tak, wystapila, wiec nalezy ta zmiane przeslac do task3 w celu wyswietlenia na LCD
	//0 - nie, nie wystapila, wiec nie trzeba nic robic
	uint8_t change_card_U[10] = {0};
 800262c:	2300      	movs	r3, #0
 800262e:	637b      	str	r3, [r7, #52]	; 0x34
 8002630:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	809a      	strh	r2, [r3, #4]
	uint8_t change_card_C[10] = {0};
 800263a:	2300      	movs	r3, #0
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
 800263e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	809a      	strh	r2, [r3, #4]

	//Tablice przechowujace karty do wyswietlenia
	uint8_t card_to_show_U[10] = {0};
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	f107 0320 	add.w	r3, r7, #32
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	809a      	strh	r2, [r3, #4]
	uint8_t card_to_show_C[10] = {0};
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	809a      	strh	r2, [r3, #4]

	for(;;)
	{
		//Jezeli zostal wcisniety przycisk nowa gra---------------------------------------OBSLUGA PRZYCISKU!!!
		if( xSemaphoreTake( Semaphore_nowa_gra_pressed, ( TickType_t ) 10 ) == pdTRUE )
 8002664:	4bce      	ldr	r3, [pc, #824]	; (80029a0 <Task3+0x3e8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	210a      	movs	r1, #10
 800266a:	4618      	mov	r0, r3
 800266c:	f004 f8f0 	bl	8006850 <xQueueSemaphoreTake>
 8002670:	4603      	mov	r3, r0
 8002672:	2b01      	cmp	r3, #1
 8002674:	f040 80c1 	bne.w	80027fa <Task3+0x242>
		{
			game_finish = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

			if (if_started_game == 1)
 800267e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002682:	2b01      	cmp	r3, #1
 8002684:	d10c      	bne.n	80026a0 <Task3+0xe8>
			{
				round_continues = 0; //Runda sie skonczyla
 8002686:	2300      	movs	r3, #0
 8002688:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				if_board_1_prepare = 0; //Talia kart (tablica z wylosowanymi liczbami) nie jest gotowa
 800268c:	4bc5      	ldr	r3, [pc, #788]	; (80029a4 <Task3+0x3ec>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
				nr_random_card_to_draw_board_1 = 0; //Umozliwi to losowanie kart
 8002692:	4bc5      	ldr	r3, [pc, #788]	; (80029a8 <Task3+0x3f0>)
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
				//reset_random_card_board = 1;
				if_started_game = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800269e:	e0ac      	b.n	80027fa <Task3+0x242>
			}
			else if (if_board_1_prepare == 1)
 80026a0:	4bc0      	ldr	r3, [pc, #768]	; (80029a4 <Task3+0x3ec>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	f040 80a2 	bne.w	80027ee <Task3+0x236>
			{
				if_started_game = 1;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
				round_continues = 1; //Runda trwa
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				nr_of_cards_taken = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

				//Ustawienia dla nowo rozpoczetej gry
				//number_of_wins_USER = 0; //Wyzerowanie liczby wygranych rund przez gracza
				change_number_of_wins_USER = 1; //Poinforuj o zmianie liczy wygranych rund przez gracza
 80026bc:	2301      	movs	r3, #1
 80026be:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

				//number_of_wins_CPU = 0;  //Wyzerowanie liczby wygranych rund przez komputer
				change_number_of_wins_CPU = 1; //Poinforuj o zmianie liczy wygranych rund przez komputer
 80026c2:	2301      	movs	r3, #1
 80026c4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

				allow_draw_a_card_USER = 1; //Odblokowanie mozliwosci dobierania kart dla uzytkownika
 80026c8:	2301      	movs	r3, #1
 80026ca:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
				allow_draw_a_card_CPU = 1;  //Odblokowanie mozliwosci dobierania kart dla komputera
 80026ce:	2301      	movs	r3, #1
 80026d0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
				nr_cards_drawn_USER = 0; //Wyzerowanie liczby kart dobranych przez uzytkownika
 80026d4:	2300      	movs	r3, #0
 80026d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				nr_cards_drawn_CPU = 0; //Wyzerowanie liczby kart dobranych przez komputer
 80026da:	2300      	movs	r3, #0
 80026dc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

				//Wyswietlenie domyslnego ekranu
				special_screen = screen_default;
 80026e0:	2301      	movs	r3, #1
 80026e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				change_special_screen = 1;
 80026e6:	2301      	movs	r3, #1
 80026e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

				//Wylosowanie pierwszej oraz drugiej karty dla gracza-----------------------------------------
				number_of_points_USER = card_for_number( random_card_board_1[nr_of_cards_taken] );
 80026ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026f0:	4aae      	ldr	r2, [pc, #696]	; (80029ac <Task3+0x3f4>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe f8c9 	bl	800088c <card_for_number>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				card_to_show_U[1] = random_card_board_1[nr_of_cards_taken];
 8002700:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002704:	4aa9      	ldr	r2, [pc, #676]	; (80029ac <Task3+0x3f4>)
 8002706:	5cd3      	ldrb	r3, [r2, r3]
 8002708:	777b      	strb	r3, [r7, #29]
				change_card_U[1] = 1; //Poinformuj o zmianie wartosci card_to_show_U[1] - to umozliwi jej wyswietlenie
 800270a:	2301      	movs	r3, #1
 800270c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				nr_of_cards_taken++;
 8002710:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002714:	3301      	adds	r3, #1
 8002716:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

				number_of_points_USER += card_for_number( random_card_board_1[nr_of_cards_taken] );
 800271a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800271e:	4aa3      	ldr	r2, [pc, #652]	; (80029ac <Task3+0x3f4>)
 8002720:	5cd3      	ldrb	r3, [r2, r3]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe f8b2 	bl	800088c <card_for_number>
 8002728:	4603      	mov	r3, r0
 800272a:	461a      	mov	r2, r3
 800272c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002730:	4413      	add	r3, r2
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				change_number_of_points_USER = 1;
 8002738:	2301      	movs	r3, #1
 800273a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				card_to_show_U[2] = random_card_board_1[nr_of_cards_taken];
 800273e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002742:	4a9a      	ldr	r2, [pc, #616]	; (80029ac <Task3+0x3f4>)
 8002744:	5cd3      	ldrb	r3, [r2, r3]
 8002746:	77bb      	strb	r3, [r7, #30]
				change_card_U[2] = 1;
 8002748:	2301      	movs	r3, #1
 800274a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				nr_of_cards_taken++;
 800274e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002752:	3301      	adds	r3, #1
 8002754:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
				nr_cards_drawn_USER = 2;
 8002758:	2302      	movs	r3, #2
 800275a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

				if(number_of_points_USER == 21) allow_draw_a_card_USER = 0;
 800275e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002762:	2b15      	cmp	r3, #21
 8002764:	d102      	bne.n	800276c <Task3+0x1b4>
 8002766:	2300      	movs	r3, #0
 8002768:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

				//Wylosowanie i wyswietlenie pierwszej oraz drugiej karty dla komputera---------------------------------------
				number_of_points_CPU = card_for_number( random_card_board_1[nr_of_cards_taken] );
 800276c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002770:	4a8e      	ldr	r2, [pc, #568]	; (80029ac <Task3+0x3f4>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe f889 	bl	800088c <card_for_number>
 800277a:	4603      	mov	r3, r0
 800277c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				card_to_show_C[1] = random_card_board_1[nr_of_cards_taken];
 8002780:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002784:	4a89      	ldr	r2, [pc, #548]	; (80029ac <Task3+0x3f4>)
 8002786:	5cd3      	ldrb	r3, [r2, r3]
 8002788:	747b      	strb	r3, [r7, #17]
				change_card_C[1] = 1;
 800278a:	2301      	movs	r3, #1
 800278c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002790:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002794:	3301      	adds	r3, #1
 8002796:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

				number_of_points_CPU += card_for_number( random_card_board_1[nr_of_cards_taken] );
 800279a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800279e:	4a83      	ldr	r2, [pc, #524]	; (80029ac <Task3+0x3f4>)
 80027a0:	5cd3      	ldrb	r3, [r2, r3]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe f872 	bl	800088c <card_for_number>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80027b0:	4413      	add	r3, r2
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				change_number_of_points_CPU = 1;
 80027b8:	2301      	movs	r3, #1
 80027ba:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				card_to_show_C[2] = random_card_board_1[nr_of_cards_taken];
 80027be:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027c2:	4a7a      	ldr	r2, [pc, #488]	; (80029ac <Task3+0x3f4>)
 80027c4:	5cd3      	ldrb	r3, [r2, r3]
 80027c6:	74bb      	strb	r3, [r7, #18]
				change_card_C[2] = 1;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 80027ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027d2:	3301      	adds	r3, #1
 80027d4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
				nr_cards_drawn_CPU = 2;
 80027d8:	2302      	movs	r3, #2
 80027da:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

				if(number_of_points_CPU == 21) allow_draw_a_card_CPU = 0;
 80027de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80027e2:	2b15      	cmp	r3, #21
 80027e4:	d109      	bne.n	80027fa <Task3+0x242>
 80027e6:	2300      	movs	r3, #0
 80027e8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80027ec:	e005      	b.n	80027fa <Task3+0x242>
			}
			else
			{
				special_screen = screen_loading;
 80027ee:	2302      	movs	r3, #2
 80027f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				change_special_screen = 1;
 80027f4:	2301      	movs	r3, #1
 80027f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}//Koniec obslugi przycisku nowa gra

		//Jezeli zostal wcisniety przycisk kolejna karta----------------------------------OBSLUGA PRZYCISKU!!!
		if( xSemaphoreTake( Semaphore_kolejna_karta_pressed, ( TickType_t ) 10 ) == pdTRUE )
 80027fa:	4b6d      	ldr	r3, [pc, #436]	; (80029b0 <Task3+0x3f8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	210a      	movs	r1, #10
 8002800:	4618      	mov	r0, r3
 8002802:	f004 f825 	bl	8006850 <xQueueSemaphoreTake>
 8002806:	4603      	mov	r3, r0
 8002808:	2b01      	cmp	r3, #1
 800280a:	f040 82e2 	bne.w	8002dd2 <Task3+0x81a>
		{
			if (game_finish == 0)
 800280e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 82dd 	bne.w	8002dd2 <Task3+0x81a>
			{
			//Jezeli runda sie juz skonczyla i chcemy przejsc do kolejnej
			if (round_continues == 0)
 8002818:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800281c:	2b00      	cmp	r3, #0
 800281e:	f040 80a3 	bne.w	8002968 <Task3+0x3b0>
			{
				if (if_board_1_prepare == 1)
 8002822:	4b60      	ldr	r3, [pc, #384]	; (80029a4 <Task3+0x3ec>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	f040 8097 	bne.w	800295a <Task3+0x3a2>
				{
					nr_of_cards_taken = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					if_started_game = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
					round_continues = 1; //Rozpocznij runde
 8002838:	2301      	movs	r3, #1
 800283a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
					special_screen = screen_clean_place_cards; //Wyczysc wylosowane karty
 800283e:	2306      	movs	r3, #6
 8002840:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					change_special_screen = 1; //Poinformuj o koniecznosci wyswietlenia nowego szablonu
 8002844:	2301      	movs	r3, #1
 8002846:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

					allow_draw_a_card_USER = 1;
 800284a:	2301      	movs	r3, #1
 800284c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
					allow_draw_a_card_CPU = 1;
 8002850:	2301      	movs	r3, #1
 8002852:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b


					//Wylosowanie pierwszej oraz drugiej karty dla gracza-----------------------------------------
					number_of_points_USER = card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002856:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800285a:	4a54      	ldr	r2, [pc, #336]	; (80029ac <Task3+0x3f4>)
 800285c:	5cd3      	ldrb	r3, [r2, r3]
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe f814 	bl	800088c <card_for_number>
 8002864:	4603      	mov	r3, r0
 8002866:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					card_to_show_U[1] = random_card_board_1[nr_of_cards_taken];
 800286a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800286e:	4a4f      	ldr	r2, [pc, #316]	; (80029ac <Task3+0x3f4>)
 8002870:	5cd3      	ldrb	r3, [r2, r3]
 8002872:	777b      	strb	r3, [r7, #29]
					change_card_U[1] = 1; //Poinformuj o zmianie wartosci card_to_show_U[1] - to umozliwi jej wyswietlenie
 8002874:	2301      	movs	r3, #1
 8002876:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					nr_of_cards_taken++;
 800287a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800287e:	3301      	adds	r3, #1
 8002880:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

					number_of_points_USER += card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002884:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002888:	4a48      	ldr	r2, [pc, #288]	; (80029ac <Task3+0x3f4>)
 800288a:	5cd3      	ldrb	r3, [r2, r3]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd fffd 	bl	800088c <card_for_number>
 8002892:	4603      	mov	r3, r0
 8002894:	461a      	mov	r2, r3
 8002896:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800289a:	4413      	add	r3, r2
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					change_number_of_points_USER = 1;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					card_to_show_U[2] = random_card_board_1[nr_of_cards_taken];
 80028a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028ac:	4a3f      	ldr	r2, [pc, #252]	; (80029ac <Task3+0x3f4>)
 80028ae:	5cd3      	ldrb	r3, [r2, r3]
 80028b0:	77bb      	strb	r3, [r7, #30]
					change_card_U[2] = 1;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					nr_of_cards_taken++;
 80028b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028bc:	3301      	adds	r3, #1
 80028be:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					nr_cards_drawn_USER = 2;
 80028c2:	2302      	movs	r3, #2
 80028c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

					if(number_of_points_USER == 21) allow_draw_a_card_USER = 0;
 80028c8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80028cc:	2b15      	cmp	r3, #21
 80028ce:	d102      	bne.n	80028d6 <Task3+0x31e>
 80028d0:	2300      	movs	r3, #0
 80028d2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

					//Wylosowanie i wyswietlenie pierwszej oraz drugiej karty dla komputera---------------------------------------
					number_of_points_CPU = card_for_number( random_card_board_1[nr_of_cards_taken] );
 80028d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028da:	4a34      	ldr	r2, [pc, #208]	; (80029ac <Task3+0x3f4>)
 80028dc:	5cd3      	ldrb	r3, [r2, r3]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fd ffd4 	bl	800088c <card_for_number>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					card_to_show_C[1] = random_card_board_1[nr_of_cards_taken];
 80028ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028ee:	4a2f      	ldr	r2, [pc, #188]	; (80029ac <Task3+0x3f4>)
 80028f0:	5cd3      	ldrb	r3, [r2, r3]
 80028f2:	747b      	strb	r3, [r7, #17]
					change_card_C[1] = 1;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
					nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 80028fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028fe:	3301      	adds	r3, #1
 8002900:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

					number_of_points_CPU += card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002904:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002908:	4a28      	ldr	r2, [pc, #160]	; (80029ac <Task3+0x3f4>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd ffbd 	bl	800088c <card_for_number>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
 8002916:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800291a:	4413      	add	r3, r2
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					change_number_of_points_CPU = 1;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					card_to_show_C[2] = random_card_board_1[nr_of_cards_taken];
 8002928:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800292c:	4a1f      	ldr	r2, [pc, #124]	; (80029ac <Task3+0x3f4>)
 800292e:	5cd3      	ldrb	r3, [r2, r3]
 8002930:	74bb      	strb	r3, [r7, #18]
					change_card_C[2] = 1;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002938:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800293c:	3301      	adds	r3, #1
 800293e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					nr_cards_drawn_CPU = 2;
 8002942:	2302      	movs	r3, #2
 8002944:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

					if(number_of_points_CPU == 21) allow_draw_a_card_CPU = 0;
 8002948:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800294c:	2b15      	cmp	r3, #21
 800294e:	f040 8241 	bne.w	8002dd4 <Task3+0x81c>
 8002952:	2300      	movs	r3, #0
 8002954:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8002958:	e23c      	b.n	8002dd4 <Task3+0x81c>
				}
				else
				{
					special_screen = screen_loading;
 800295a:	2302      	movs	r3, #2
 800295c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					change_special_screen = 1;
 8002960:	2301      	movs	r3, #1
 8002962:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002966:	e235      	b.n	8002dd4 <Task3+0x81c>
				}
			}
			else //round continues == 1, ta sama runda dalej, trzeba dobrac karty
			{
				if(allow_draw_a_card_USER == 1)
 8002968:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800296c:	2b01      	cmp	r3, #1
 800296e:	f040 811c 	bne.w	8002baa <Task3+0x5f2>
				{
				switch (nr_cards_drawn_USER)
 8002972:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002976:	3b02      	subs	r3, #2
 8002978:	2b06      	cmp	r3, #6
 800297a:	f200 8117 	bhi.w	8002bac <Task3+0x5f4>
 800297e:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <Task3+0x3cc>)
 8002980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002984:	080029b5 	.word	0x080029b5
 8002988:	080029fb 	.word	0x080029fb
 800298c:	08002a43 	.word	0x08002a43
 8002990:	08002a8b 	.word	0x08002a8b
 8002994:	08002ad3 	.word	0x08002ad3
 8002998:	08002b1b 	.word	0x08002b1b
 800299c:	08002b63 	.word	0x08002b63
 80029a0:	20004750 	.word	0x20004750
 80029a4:	2000080a 	.word	0x2000080a
 80029a8:	20000808 	.word	0x20000808
 80029ac:	20004794 	.word	0x20004794
 80029b0:	200047c8 	.word	0x200047c8
				{
				case 2:
				{
					number_of_points_USER += card_for_number( random_card_board_1[nr_of_cards_taken] );
 80029b4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029b8:	4ad0      	ldr	r2, [pc, #832]	; (8002cfc <Task3+0x744>)
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd ff65 	bl	800088c <card_for_number>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80029ca:	4413      	add	r3, r2
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					change_number_of_points_USER = 1;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					card_to_show_U[3] = random_card_board_1[nr_of_cards_taken];
 80029d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029dc:	4ac7      	ldr	r2, [pc, #796]	; (8002cfc <Task3+0x744>)
 80029de:	5cd3      	ldrb	r3, [r2, r3]
 80029e0:	77fb      	strb	r3, [r7, #31]
					change_card_U[3] = 1;
 80029e2:	2301      	movs	r3, #1
 80029e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 80029e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029ec:	3301      	adds	r3, #1
 80029ee:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					nr_cards_drawn_USER = 3;
 80029f2:	2303      	movs	r3, #3
 80029f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 80029f8:	e0d8      	b.n	8002bac <Task3+0x5f4>
				}
				case 3:
				{
					number_of_points_USER += card_for_number( random_card_board_1[nr_of_cards_taken] );
 80029fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029fe:	4abf      	ldr	r2, [pc, #764]	; (8002cfc <Task3+0x744>)
 8002a00:	5cd3      	ldrb	r3, [r2, r3]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fd ff42 	bl	800088c <card_for_number>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002a10:	4413      	add	r3, r2
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					change_number_of_points_USER = 1;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					card_to_show_U[4] = random_card_board_1[nr_of_cards_taken];
 8002a1e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a22:	4ab6      	ldr	r2, [pc, #728]	; (8002cfc <Task3+0x744>)
 8002a24:	5cd3      	ldrb	r3, [r2, r3]
 8002a26:	f887 3020 	strb.w	r3, [r7, #32]
					change_card_U[4] = 1;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
					nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002a30:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a34:	3301      	adds	r3, #1
 8002a36:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					nr_cards_drawn_USER = 4;
 8002a3a:	2304      	movs	r3, #4
 8002a3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 8002a40:	e0b4      	b.n	8002bac <Task3+0x5f4>
				}
				case 4:
				{
					number_of_points_USER += card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002a42:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a46:	4aad      	ldr	r2, [pc, #692]	; (8002cfc <Task3+0x744>)
 8002a48:	5cd3      	ldrb	r3, [r2, r3]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd ff1e 	bl	800088c <card_for_number>
 8002a50:	4603      	mov	r3, r0
 8002a52:	461a      	mov	r2, r3
 8002a54:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002a58:	4413      	add	r3, r2
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					change_number_of_points_USER = 1;
 8002a60:	2301      	movs	r3, #1
 8002a62:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					card_to_show_U[5] = random_card_board_1[nr_of_cards_taken];
 8002a66:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a6a:	4aa4      	ldr	r2, [pc, #656]	; (8002cfc <Task3+0x744>)
 8002a6c:	5cd3      	ldrb	r3, [r2, r3]
 8002a6e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					change_card_U[5] = 1;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002a78:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					nr_cards_drawn_USER = 5;
 8002a82:	2305      	movs	r3, #5
 8002a84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 8002a88:	e090      	b.n	8002bac <Task3+0x5f4>
				}
				case 5:
				{
					number_of_points_USER += card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002a8a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a8e:	4a9b      	ldr	r2, [pc, #620]	; (8002cfc <Task3+0x744>)
 8002a90:	5cd3      	ldrb	r3, [r2, r3]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fd fefa 	bl	800088c <card_for_number>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002aa0:	4413      	add	r3, r2
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					change_number_of_points_USER = 1;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					card_to_show_U[6] = random_card_board_1[nr_of_cards_taken];
 8002aae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ab2:	4a92      	ldr	r2, [pc, #584]	; (8002cfc <Task3+0x744>)
 8002ab4:	5cd3      	ldrb	r3, [r2, r3]
 8002ab6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					change_card_U[6] = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
					nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002ac0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					nr_cards_drawn_USER = 6;
 8002aca:	2306      	movs	r3, #6
 8002acc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 8002ad0:	e06c      	b.n	8002bac <Task3+0x5f4>
				}
				case 6:
				{
					number_of_points_USER += card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002ad2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ad6:	4a89      	ldr	r2, [pc, #548]	; (8002cfc <Task3+0x744>)
 8002ad8:	5cd3      	ldrb	r3, [r2, r3]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fd fed6 	bl	800088c <card_for_number>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002ae8:	4413      	add	r3, r2
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					change_number_of_points_USER = 1;
 8002af0:	2301      	movs	r3, #1
 8002af2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					card_to_show_U[7] = random_card_board_1[nr_of_cards_taken];
 8002af6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002afa:	4a80      	ldr	r2, [pc, #512]	; (8002cfc <Task3+0x744>)
 8002afc:	5cd3      	ldrb	r3, [r2, r3]
 8002afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					change_card_U[7] = 1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002b08:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					nr_cards_drawn_USER = 7;
 8002b12:	2307      	movs	r3, #7
 8002b14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 8002b18:	e048      	b.n	8002bac <Task3+0x5f4>
				}
				case 7:
				{
					number_of_points_USER += card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002b1a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b1e:	4a77      	ldr	r2, [pc, #476]	; (8002cfc <Task3+0x744>)
 8002b20:	5cd3      	ldrb	r3, [r2, r3]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd feb2 	bl	800088c <card_for_number>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002b30:	4413      	add	r3, r2
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					change_number_of_points_USER = 1;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					card_to_show_U[8] = random_card_board_1[nr_of_cards_taken];
 8002b3e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b42:	4a6e      	ldr	r2, [pc, #440]	; (8002cfc <Task3+0x744>)
 8002b44:	5cd3      	ldrb	r3, [r2, r3]
 8002b46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					change_card_U[8] = 1;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002b50:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b54:	3301      	adds	r3, #1
 8002b56:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					nr_cards_drawn_USER = 8;
 8002b5a:	2308      	movs	r3, #8
 8002b5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 8002b60:	e024      	b.n	8002bac <Task3+0x5f4>
				}
				case 8:
				{
					number_of_points_USER += card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002b62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b66:	4a65      	ldr	r2, [pc, #404]	; (8002cfc <Task3+0x744>)
 8002b68:	5cd3      	ldrb	r3, [r2, r3]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd fe8e 	bl	800088c <card_for_number>
 8002b70:	4603      	mov	r3, r0
 8002b72:	461a      	mov	r2, r3
 8002b74:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002b78:	4413      	add	r3, r2
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					change_number_of_points_USER = 1;
 8002b80:	2301      	movs	r3, #1
 8002b82:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					card_to_show_U[9] = random_card_board_1[nr_of_cards_taken];
 8002b86:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b8a:	4a5c      	ldr	r2, [pc, #368]	; (8002cfc <Task3+0x744>)
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					change_card_U[9] = 1;
 8002b92:	2301      	movs	r3, #1
 8002b94:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002b98:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					nr_cards_drawn_USER = 9;
 8002ba2:	2309      	movs	r3, #9
 8002ba4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 8002ba8:	e000      	b.n	8002bac <Task3+0x5f4>
				}

				}//End Switch User
				}//if alllow_user
 8002baa:	bf00      	nop

				if (allow_draw_a_card_CPU == 1)
 8002bac:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	f040 810e 	bne.w	8002dd2 <Task3+0x81a>
				{
				switch (nr_cards_drawn_CPU)
 8002bb6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002bba:	3b02      	subs	r3, #2
 8002bbc:	2b06      	cmp	r3, #6
 8002bbe:	f200 8109 	bhi.w	8002dd4 <Task3+0x81c>
 8002bc2:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <Task3+0x610>)
 8002bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc8:	08002be5 	.word	0x08002be5
 8002bcc:	08002c2b 	.word	0x08002c2b
 8002bd0:	08002c71 	.word	0x08002c71
 8002bd4:	08002cb7 	.word	0x08002cb7
 8002bd8:	08002d01 	.word	0x08002d01
 8002bdc:	08002d47 	.word	0x08002d47
 8002be0:	08002d8d 	.word	0x08002d8d
				{
				case 2:
				{
					number_of_points_CPU += card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002be4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002be8:	4a44      	ldr	r2, [pc, #272]	; (8002cfc <Task3+0x744>)
 8002bea:	5cd3      	ldrb	r3, [r2, r3]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fe4d 	bl	800088c <card_for_number>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002bfa:	4413      	add	r3, r2
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					change_number_of_points_CPU = 1;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					card_to_show_C[3] = random_card_board_1[nr_of_cards_taken];
 8002c08:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c0c:	4a3b      	ldr	r2, [pc, #236]	; (8002cfc <Task3+0x744>)
 8002c0e:	5cd3      	ldrb	r3, [r2, r3]
 8002c10:	74fb      	strb	r3, [r7, #19]
					change_card_C[3] = 1;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002c18:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					nr_cards_drawn_CPU = 3;
 8002c22:	2303      	movs	r3, #3
 8002c24:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
					break;
 8002c28:	e0d4      	b.n	8002dd4 <Task3+0x81c>
				}
				case 3:
				{
					number_of_points_CPU += card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002c2a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c2e:	4a33      	ldr	r2, [pc, #204]	; (8002cfc <Task3+0x744>)
 8002c30:	5cd3      	ldrb	r3, [r2, r3]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fe2a 	bl	800088c <card_for_number>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c40:	4413      	add	r3, r2
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					change_number_of_points_CPU = 1;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					card_to_show_C[4] = random_card_board_1[nr_of_cards_taken];
 8002c4e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c52:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <Task3+0x744>)
 8002c54:	5cd3      	ldrb	r3, [r2, r3]
 8002c56:	753b      	strb	r3, [r7, #20]
					change_card_C[4] = 1;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002c5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c62:	3301      	adds	r3, #1
 8002c64:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					nr_cards_drawn_CPU = 4;
 8002c68:	2304      	movs	r3, #4
 8002c6a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
					break;
 8002c6e:	e0b1      	b.n	8002dd4 <Task3+0x81c>
				}
				case 4:
				{
					number_of_points_CPU += card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002c70:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c74:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <Task3+0x744>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fe07 	bl	800088c <card_for_number>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	461a      	mov	r2, r3
 8002c82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c86:	4413      	add	r3, r2
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					change_number_of_points_CPU = 1;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					card_to_show_C[5] = random_card_board_1[nr_of_cards_taken];
 8002c94:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c98:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <Task3+0x744>)
 8002c9a:	5cd3      	ldrb	r3, [r2, r3]
 8002c9c:	757b      	strb	r3, [r7, #21]
					change_card_C[5] = 1;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002ca4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					nr_cards_drawn_CPU = 5;
 8002cae:	2305      	movs	r3, #5
 8002cb0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
					break;
 8002cb4:	e08e      	b.n	8002dd4 <Task3+0x81c>
				}
				case 5:
				{
					number_of_points_CPU += card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002cb6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002cba:	4a10      	ldr	r2, [pc, #64]	; (8002cfc <Task3+0x744>)
 8002cbc:	5cd3      	ldrb	r3, [r2, r3]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fde4 	bl	800088c <card_for_number>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ccc:	4413      	add	r3, r2
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					change_number_of_points_CPU = 1;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					card_to_show_C[6] = random_card_board_1[nr_of_cards_taken];
 8002cda:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002cde:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <Task3+0x744>)
 8002ce0:	5cd3      	ldrb	r3, [r2, r3]
 8002ce2:	75bb      	strb	r3, [r7, #22]
					change_card_C[6] = 1;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002cea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					nr_cards_drawn_CPU = 6;
 8002cf4:	2306      	movs	r3, #6
 8002cf6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
					break;
 8002cfa:	e06b      	b.n	8002dd4 <Task3+0x81c>
 8002cfc:	20004794 	.word	0x20004794
				}
				case 6:
				{
					number_of_points_CPU += card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002d00:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d04:	4ad6      	ldr	r2, [pc, #856]	; (8003060 <Task3+0xaa8>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fdbf 	bl	800088c <card_for_number>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002d16:	4413      	add	r3, r2
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					change_number_of_points_CPU = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					card_to_show_C[7] = random_card_board_1[nr_of_cards_taken];
 8002d24:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d28:	4acd      	ldr	r2, [pc, #820]	; (8003060 <Task3+0xaa8>)
 8002d2a:	5cd3      	ldrb	r3, [r2, r3]
 8002d2c:	75fb      	strb	r3, [r7, #23]
					change_card_C[7] = 1;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002d34:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					nr_cards_drawn_CPU = 7;
 8002d3e:	2307      	movs	r3, #7
 8002d40:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
					break;
 8002d44:	e046      	b.n	8002dd4 <Task3+0x81c>
				}
				case 7:
				{
					number_of_points_CPU += card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002d46:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d4a:	4ac5      	ldr	r2, [pc, #788]	; (8003060 <Task3+0xaa8>)
 8002d4c:	5cd3      	ldrb	r3, [r2, r3]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fd9c 	bl	800088c <card_for_number>
 8002d54:	4603      	mov	r3, r0
 8002d56:	461a      	mov	r2, r3
 8002d58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002d5c:	4413      	add	r3, r2
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					change_number_of_points_CPU = 1;
 8002d64:	2301      	movs	r3, #1
 8002d66:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					card_to_show_C[8] = random_card_board_1[nr_of_cards_taken];
 8002d6a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d6e:	4abc      	ldr	r2, [pc, #752]	; (8003060 <Task3+0xaa8>)
 8002d70:	5cd3      	ldrb	r3, [r2, r3]
 8002d72:	763b      	strb	r3, [r7, #24]
					change_card_C[8] = 1;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002d7a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					nr_cards_drawn_CPU = 8;
 8002d84:	2308      	movs	r3, #8
 8002d86:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
					break;
 8002d8a:	e023      	b.n	8002dd4 <Task3+0x81c>
				}
				case 8:
				{
					number_of_points_CPU += card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002d8c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d90:	4ab3      	ldr	r2, [pc, #716]	; (8003060 <Task3+0xaa8>)
 8002d92:	5cd3      	ldrb	r3, [r2, r3]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fd79 	bl	800088c <card_for_number>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002da2:	4413      	add	r3, r2
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					change_number_of_points_CPU = 1;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

					card_to_show_C[9] = random_card_board_1[nr_of_cards_taken];
 8002db0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002db4:	4aaa      	ldr	r2, [pc, #680]	; (8003060 <Task3+0xaa8>)
 8002db6:	5cd3      	ldrb	r3, [r2, r3]
 8002db8:	767b      	strb	r3, [r7, #25]
					change_card_C[9] = 1;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

					nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002dc0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					nr_cards_drawn_CPU = 9;
 8002dca:	2309      	movs	r3, #9
 8002dcc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
					break;
 8002dd0:	e000      	b.n	8002dd4 <Task3+0x81c>
				}
				}//End Switch User
				}//if allow CPU
 8002dd2:	bf00      	nop
			}//if game_finish

		}//Koniec obslugi przycisku kolejna karta

		//Jezeli zostal wcisniety przycisk reset------------------------------------------OBSLUGA PRZYCISKU!!!
		if( xSemaphoreTake( Semaphore_reset_pressed, ( TickType_t ) 10 ) == pdTRUE )
 8002dd4:	4ba3      	ldr	r3, [pc, #652]	; (8003064 <Task3+0xaac>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	210a      	movs	r1, #10
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f003 fd38 	bl	8006850 <xQueueSemaphoreTake>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	f040 80c7 	bne.w	8002f76 <Task3+0x9be>
		{
			game_finish = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

			if (if_started_game == 1)
 8002dee:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d10c      	bne.n	8002e10 <Task3+0x858>
			{
				round_continues = 0; //Runda sie skonczyla
 8002df6:	2300      	movs	r3, #0
 8002df8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				if_board_1_prepare = 0; //Talia kart (tablica z wylosowanymi liczbami) nie jest gotowa
 8002dfc:	4b9a      	ldr	r3, [pc, #616]	; (8003068 <Task3+0xab0>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
				nr_random_card_to_draw_board_1 = 0; //Umozliwi to losowanie kart
 8002e02:	4b9a      	ldr	r3, [pc, #616]	; (800306c <Task3+0xab4>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
				//reset_random_card_board = 1;
				if_started_game = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8002e0e:	e0b2      	b.n	8002f76 <Task3+0x9be>
			}
			else if (if_board_1_prepare == 1)
 8002e10:	4b95      	ldr	r3, [pc, #596]	; (8003068 <Task3+0xab0>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	f040 80a8 	bne.w	8002f6a <Task3+0x9b2>
			{
				if_started_game = 1;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
				round_continues = 1; //Runda trwa
 8002e20:	2301      	movs	r3, #1
 8002e22:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				nr_of_cards_taken = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

				//Ustawienia dla nowo rozpoczetej gry
				number_of_wins_USER = 0; //Wyzerowanie liczby wygranych rund przez gracza
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
				change_number_of_wins_USER = 1; //Poinforuj o zmianie liczy wygranych rund przez gracza
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

				number_of_wins_CPU = 0;  //Wyzerowanie liczby wygranych rund przez komputer
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				change_number_of_wins_CPU = 1; //Poinforuj o zmianie liczy wygranych rund przez komputer
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

				allow_draw_a_card_USER = 1; //Odblokowanie mozliwosci dobierania kart dla uzytkownika
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
				allow_draw_a_card_CPU = 1;  //Odblokowanie mozliwosci dobierania kart dla komputera
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
				nr_cards_drawn_USER = 0; //Wyzerowanie liczby kart dobranych przez uzytkownika
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				nr_cards_drawn_CPU = 0; //Wyzerowanie liczby kart dobranych przez komputer
 8002e56:	2300      	movs	r3, #0
 8002e58:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

				//Wyswietlenie domyslnego ekranu
				special_screen = screen_default;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				change_special_screen = 1;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

				//Wylosowanie pierwszej oraz drugiej karty dla gracza-----------------------------------------
				number_of_points_USER = card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002e68:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002e6c:	4a7c      	ldr	r2, [pc, #496]	; (8003060 <Task3+0xaa8>)
 8002e6e:	5cd3      	ldrb	r3, [r2, r3]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd fd0b 	bl	800088c <card_for_number>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				card_to_show_U[1] = random_card_board_1[nr_of_cards_taken];
 8002e7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002e80:	4a77      	ldr	r2, [pc, #476]	; (8003060 <Task3+0xaa8>)
 8002e82:	5cd3      	ldrb	r3, [r2, r3]
 8002e84:	777b      	strb	r3, [r7, #29]
				change_card_U[1] = 1; //Poinformuj o zmianie wartosci card_to_show_U[1] - to umozliwi jej wyswietlenie
 8002e86:	2301      	movs	r3, #1
 8002e88:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				nr_of_cards_taken++;
 8002e8c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002e90:	3301      	adds	r3, #1
 8002e92:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

				number_of_points_USER += card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002e96:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002e9a:	4a71      	ldr	r2, [pc, #452]	; (8003060 <Task3+0xaa8>)
 8002e9c:	5cd3      	ldrb	r3, [r2, r3]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd fcf4 	bl	800088c <card_for_number>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002eac:	4413      	add	r3, r2
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				change_number_of_points_USER = 1;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				card_to_show_U[2] = random_card_board_1[nr_of_cards_taken];
 8002eba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ebe:	4a68      	ldr	r2, [pc, #416]	; (8003060 <Task3+0xaa8>)
 8002ec0:	5cd3      	ldrb	r3, [r2, r3]
 8002ec2:	77bb      	strb	r3, [r7, #30]
				change_card_U[2] = 1;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				nr_of_cards_taken++;
 8002eca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
				nr_cards_drawn_USER = 2;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

				if(number_of_points_USER == 21) allow_draw_a_card_USER = 0;
 8002eda:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002ede:	2b15      	cmp	r3, #21
 8002ee0:	d102      	bne.n	8002ee8 <Task3+0x930>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

				//Wylosowanie i wyswietlenie pierwszej oraz drugiej karty dla komputera---------------------------------------
				number_of_points_CPU = card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002ee8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002eec:	4a5c      	ldr	r2, [pc, #368]	; (8003060 <Task3+0xaa8>)
 8002eee:	5cd3      	ldrb	r3, [r2, r3]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd fccb 	bl	800088c <card_for_number>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				card_to_show_C[1] = random_card_board_1[nr_of_cards_taken];
 8002efc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f00:	4a57      	ldr	r2, [pc, #348]	; (8003060 <Task3+0xaa8>)
 8002f02:	5cd3      	ldrb	r3, [r2, r3]
 8002f04:	747b      	strb	r3, [r7, #17]
				change_card_C[1] = 1;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002f0c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f10:	3301      	adds	r3, #1
 8002f12:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

				number_of_points_CPU += card_for_number( random_card_board_1[nr_of_cards_taken] );
 8002f16:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f1a:	4a51      	ldr	r2, [pc, #324]	; (8003060 <Task3+0xaa8>)
 8002f1c:	5cd3      	ldrb	r3, [r2, r3]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fcb4 	bl	800088c <card_for_number>
 8002f24:	4603      	mov	r3, r0
 8002f26:	461a      	mov	r2, r3
 8002f28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f2c:	4413      	add	r3, r2
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				change_number_of_points_CPU = 1;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				card_to_show_C[2] = random_card_board_1[nr_of_cards_taken];
 8002f3a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f3e:	4a48      	ldr	r2, [pc, #288]	; (8003060 <Task3+0xaa8>)
 8002f40:	5cd3      	ldrb	r3, [r2, r3]
 8002f42:	74bb      	strb	r3, [r7, #18]
				change_card_C[2] = 1;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				nr_of_cards_taken++; //Zwieksz o jeden liczbe wzietych kart ze stosu
 8002f4a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
				nr_cards_drawn_CPU = 2;
 8002f54:	2302      	movs	r3, #2
 8002f56:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

				if(number_of_points_CPU == 21) allow_draw_a_card_CPU = 0;
 8002f5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f5e:	2b15      	cmp	r3, #21
 8002f60:	d109      	bne.n	8002f76 <Task3+0x9be>
 8002f62:	2300      	movs	r3, #0
 8002f64:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8002f68:	e005      	b.n	8002f76 <Task3+0x9be>
				}
				else
				{
					special_screen = screen_loading;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					change_special_screen = 1;
 8002f70:	2301      	movs	r3, #1
 8002f72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
		}


		//Jezeli zostal wcisniety przycisk wystarczy kart
		if( xSemaphoreTake( Semaphore_wystarczy_kart_pressed, ( TickType_t ) 10 ) == pdTRUE )
 8002f76:	4b3e      	ldr	r3, [pc, #248]	; (8003070 <Task3+0xab8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	210a      	movs	r1, #10
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f003 fc67 	bl	8006850 <xQueueSemaphoreTake>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d106      	bne.n	8002f96 <Task3+0x9de>
		{
			if (game_finish == 0)
 8002f88:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d102      	bne.n	8002f96 <Task3+0x9de>
			{
				allow_draw_a_card_USER = 0; //Zabroń dobierania kart graczowi
 8002f90:	2300      	movs	r3, #0
 8002f92:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		}

		//Kiedy zakonczyc runde?
		//Jezeli gracz ma wiecej badz równo 21 punktow
		//gdy komputer ma większą bądź równą wartość zadanych punktów
		if (number_of_points_USER >= 21) allow_draw_a_card_USER = 0;
 8002f96:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002f9a:	2b14      	cmp	r3, #20
 8002f9c:	d902      	bls.n	8002fa4 <Task3+0x9ec>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		if (number_of_points_CPU > value_fight_CPU) allow_draw_a_card_CPU = 0;
 8002fa4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002fa8:	2b10      	cmp	r3, #16
 8002faa:	d902      	bls.n	8002fb2 <Task3+0x9fa>
 8002fac:	2300      	movs	r3, #0
 8002fae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b


		//Jezeli zaistnieje warunek do zakonczenia rundy to:
		if ( (allow_draw_a_card_USER == 0) && (allow_draw_a_card_CPU == 0) &&(if_started_game == 1) )
 8002fb2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f040 8144 	bne.w	8003244 <Task3+0xc8c>
 8002fbc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 813f 	bne.w	8003244 <Task3+0xc8c>
 8002fc6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	f040 813a 	bne.w	8003244 <Task3+0xc8c>
		{
			{
				round_continues = 0; //Runda sie skończyła
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				if_board_1_prepare = 0; //Talia kart (tablica z wylosowanymi liczbami) nie jest gotowa
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <Task3+0xab0>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]
				nr_random_card_to_draw_board_1 = 0; //Umożliwi to losowanie kart
 8002fdc:	4b23      	ldr	r3, [pc, #140]	; (800306c <Task3+0xab4>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	701a      	strb	r2, [r3, #0]
				if_started_game = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			}

			//Kto wygral RUNDE? Przyznaj punkt zwyciezcy
			//Jezeli komputer oraz gracz maja powyzej 21 punktow, ale gracz ma mniej punktow to wygrywa gracz itp.
				 if ((number_of_points_USER > 21) && (number_of_points_CPU > 21) && (number_of_points_USER < number_of_points_CPU))
 8002fe8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002fec:	2b15      	cmp	r3, #21
 8002fee:	d919      	bls.n	8003024 <Task3+0xa6c>
 8002ff0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ff4:	2b15      	cmp	r3, #21
 8002ff6:	d915      	bls.n	8003024 <Task3+0xa6c>
 8002ff8:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002ffc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003000:	429a      	cmp	r2, r3
 8003002:	d20f      	bcs.n	8003024 <Task3+0xa6c>
				 	{ number_of_wins_USER++; change_number_of_wins_USER = 1;
 8003004:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003008:	3301      	adds	r3, #1
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8003010:	2301      	movs	r3, #1
 8003012:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				 	  special_screen = screen_winner_this_round_U; change_special_screen = 1; }
 8003016:	2303      	movs	r3, #3
 8003018:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800301c:	2301      	movs	r3, #1
 800301e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003022:	e0d3      	b.n	80031cc <Task3+0xc14>
			else if ((number_of_points_USER > 21) && (number_of_points_CPU > 21) && (number_of_points_USER > number_of_points_CPU))
 8003024:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003028:	2b15      	cmp	r3, #21
 800302a:	d923      	bls.n	8003074 <Task3+0xabc>
 800302c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003030:	2b15      	cmp	r3, #21
 8003032:	d91f      	bls.n	8003074 <Task3+0xabc>
 8003034:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8003038:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800303c:	429a      	cmp	r2, r3
 800303e:	d919      	bls.n	8003074 <Task3+0xabc>
					{ number_of_wins_CPU++; change_number_of_wins_CPU = 1;
 8003040:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003044:	3301      	adds	r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800304c:	2301      	movs	r3, #1
 800304e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
					  special_screen = screen_winner_this_round_C; change_special_screen = 1; }
 8003052:	2304      	movs	r3, #4
 8003054:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003058:	2301      	movs	r3, #1
 800305a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800305e:	e0b5      	b.n	80031cc <Task3+0xc14>
 8003060:	20004794 	.word	0x20004794
 8003064:	2000475c 	.word	0x2000475c
 8003068:	2000080a 	.word	0x2000080a
 800306c:	20000808 	.word	0x20000808
 8003070:	200046e0 	.word	0x200046e0
			else if ((number_of_points_USER < 21) && (number_of_points_CPU < 21) && (number_of_points_USER > number_of_points_CPU))
 8003074:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003078:	2b14      	cmp	r3, #20
 800307a:	d819      	bhi.n	80030b0 <Task3+0xaf8>
 800307c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003080:	2b14      	cmp	r3, #20
 8003082:	d815      	bhi.n	80030b0 <Task3+0xaf8>
 8003084:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8003088:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800308c:	429a      	cmp	r2, r3
 800308e:	d90f      	bls.n	80030b0 <Task3+0xaf8>
					{ number_of_wins_USER++; change_number_of_wins_USER = 1;
 8003090:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003094:	3301      	adds	r3, #1
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800309c:	2301      	movs	r3, #1
 800309e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  special_screen = screen_winner_this_round_U; change_special_screen = 1; }
 80030a2:	2303      	movs	r3, #3
 80030a4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80030ae:	e08d      	b.n	80031cc <Task3+0xc14>
			else if ((number_of_points_USER < 21) && (number_of_points_CPU < 21) && (number_of_points_USER < number_of_points_CPU))
 80030b0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80030b4:	2b14      	cmp	r3, #20
 80030b6:	d819      	bhi.n	80030ec <Task3+0xb34>
 80030b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030bc:	2b14      	cmp	r3, #20
 80030be:	d815      	bhi.n	80030ec <Task3+0xb34>
 80030c0:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80030c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d20f      	bcs.n	80030ec <Task3+0xb34>
					{ number_of_wins_CPU++; change_number_of_wins_CPU = 1;
 80030cc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80030d0:	3301      	adds	r3, #1
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
					  special_screen = screen_winner_this_round_C; change_special_screen = 1; }
 80030de:	2304      	movs	r3, #4
 80030e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80030e4:	2301      	movs	r3, #1
 80030e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80030ea:	e06f      	b.n	80031cc <Task3+0xc14>
			else if ((number_of_points_USER == 21) && (number_of_points_CPU != 21))
 80030ec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80030f0:	2b15      	cmp	r3, #21
 80030f2:	d113      	bne.n	800311c <Task3+0xb64>
 80030f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030f8:	2b15      	cmp	r3, #21
 80030fa:	d00f      	beq.n	800311c <Task3+0xb64>
					{ number_of_wins_USER++; change_number_of_wins_USER = 1;
 80030fc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003100:	3301      	adds	r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8003108:	2301      	movs	r3, #1
 800310a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  special_screen = screen_winner_this_round_U; change_special_screen = 1; }
 800310e:	2303      	movs	r3, #3
 8003110:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003114:	2301      	movs	r3, #1
 8003116:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800311a:	e057      	b.n	80031cc <Task3+0xc14>
			else if ((number_of_points_USER != 21) && (number_of_points_CPU == 21))
 800311c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003120:	2b15      	cmp	r3, #21
 8003122:	d013      	beq.n	800314c <Task3+0xb94>
 8003124:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003128:	2b15      	cmp	r3, #21
 800312a:	d10f      	bne.n	800314c <Task3+0xb94>
					{ number_of_wins_CPU++; change_number_of_wins_CPU = 1;
 800312c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003130:	3301      	adds	r3, #1
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8003138:	2301      	movs	r3, #1
 800313a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
					  special_screen = screen_winner_this_round_C; change_special_screen = 1; }
 800313e:	2304      	movs	r3, #4
 8003140:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003144:	2301      	movs	r3, #1
 8003146:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800314a:	e03f      	b.n	80031cc <Task3+0xc14>
			else if ( (number_of_points_USER == number_of_points_CPU) && (number_of_points_USER != 0))
 800314c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8003150:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003154:	429a      	cmp	r2, r3
 8003156:	d10a      	bne.n	800316e <Task3+0xbb6>
 8003158:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800315c:	2b00      	cmp	r3, #0
 800315e:	d006      	beq.n	800316e <Task3+0xbb6>
					{ special_screen = screen_winner_this_round_D; change_special_screen = 1; }
 8003160:	2305      	movs	r3, #5
 8003162:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003166:	2301      	movs	r3, #1
 8003168:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800316c:	e02e      	b.n	80031cc <Task3+0xc14>
			else if ((number_of_points_USER < 21) && (number_of_points_CPU > 21))
 800316e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003172:	2b14      	cmp	r3, #20
 8003174:	d813      	bhi.n	800319e <Task3+0xbe6>
 8003176:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800317a:	2b15      	cmp	r3, #21
 800317c:	d90f      	bls.n	800319e <Task3+0xbe6>
					{ number_of_wins_USER++; change_number_of_wins_USER = 1;
 800317e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003182:	3301      	adds	r3, #1
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800318a:	2301      	movs	r3, #1
 800318c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  special_screen = screen_winner_this_round_U; change_special_screen = 1; }
 8003190:	2303      	movs	r3, #3
 8003192:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003196:	2301      	movs	r3, #1
 8003198:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800319c:	e016      	b.n	80031cc <Task3+0xc14>
			else if ((number_of_points_USER > 21) && (number_of_points_CPU < 21))
 800319e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80031a2:	2b15      	cmp	r3, #21
 80031a4:	d912      	bls.n	80031cc <Task3+0xc14>
 80031a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80031aa:	2b14      	cmp	r3, #20
 80031ac:	d80e      	bhi.n	80031cc <Task3+0xc14>
					{ number_of_wins_CPU++; change_number_of_wins_CPU = 1;
 80031ae:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80031b2:	3301      	adds	r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80031ba:	2301      	movs	r3, #1
 80031bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
					  special_screen = screen_winner_this_round_C; change_special_screen = 1; }
 80031c0:	2304      	movs	r3, #4
 80031c2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			//Kto wygral cala gre? Ten kto zwyciężył w większej ilości rund
			if ((number_of_wins_USER == amount_rounds_to_win_game) || (number_of_wins_CPU == amount_rounds_to_win_game))
 80031cc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d003      	beq.n	80031dc <Task3+0xc24>
 80031d4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d133      	bne.n	8003244 <Task3+0xc8c>
			{
				uint8_t winner_this_epic_game;
				if (number_of_wins_USER > number_of_wins_CPU)
 80031dc:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80031e0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d90a      	bls.n	80031fe <Task3+0xc46>
				{
					winner_this_epic_game = screen_winner_this_game_U;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
					xQueueSend(winner_the_gameLCDqueue, &winner_this_epic_game, time_to_wait);
 80031ec:	4bcf      	ldr	r3, [pc, #828]	; (800352c <Task3+0xf74>)
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	f107 010f 	add.w	r1, r7, #15
 80031f4:	2300      	movs	r3, #0
 80031f6:	2200      	movs	r2, #0
 80031f8:	f003 f8b0 	bl	800635c <xQueueGenericSend>
 80031fc:	e009      	b.n	8003212 <Task3+0xc5a>
				}
				else
				{
					winner_this_epic_game = screen_winner_this_game_C;
 80031fe:	2302      	movs	r3, #2
 8003200:	73fb      	strb	r3, [r7, #15]
					xQueueSend(winner_the_gameLCDqueue, &winner_this_epic_game, time_to_wait);
 8003202:	4bca      	ldr	r3, [pc, #808]	; (800352c <Task3+0xf74>)
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	f107 010f 	add.w	r1, r7, #15
 800320a:	2300      	movs	r3, #0
 800320c:	2200      	movs	r2, #0
 800320e:	f003 f8a5 	bl	800635c <xQueueGenericSend>
				}
				xQueueSend(wins_U_end_LCDqueue, &number_of_wins_USER, time_to_wait); //Wyświetl liczbę wygranych rund przez gracza na ekranie podsumowywującym grę
 8003212:	4bc7      	ldr	r3, [pc, #796]	; (8003530 <Task3+0xf78>)
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	f107 0142 	add.w	r1, r7, #66	; 0x42
 800321a:	2300      	movs	r3, #0
 800321c:	2200      	movs	r2, #0
 800321e:	f003 f89d 	bl	800635c <xQueueGenericSend>
				xQueueSend(wins_C_end_LCDqueue, &number_of_wins_CPU, time_to_wait);  //Wyświetl liczbę wygranych rund przez komputer na ekranie podsumowywującym grę
 8003222:	4bc4      	ldr	r3, [pc, #784]	; (8003534 <Task3+0xf7c>)
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	f107 0141 	add.w	r1, r7, #65	; 0x41
 800322a:	2300      	movs	r3, #0
 800322c:	2200      	movs	r2, #0
 800322e:	f003 f895 	bl	800635c <xQueueGenericSend>
				game_finish = 1; //Gra skończona
 8003232:	2301      	movs	r3, #1
 8003234:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				number_of_wins_USER = 0; //Wyzeruj liczbę wygranych rund przez gracza
 8003238:	2300      	movs	r3, #0
 800323a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
				number_of_wins_CPU = 0;  //Wyzeruj liczbę wygranych rund przez komputer
 800323e:	2300      	movs	r3, #0
 8003240:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		//Sprawdź za pomocą zmiennych change... wartości których zmiennych uległy zmianie
		//Jeżeli wartość jest taka sama jak poprzednio to nie wysyłaj tego do LCD (Task3)
		//Natomiast jeżeli wartość się zmieniła to wyślij to na LCD

		//Wyświetlenie domyślnego ekranu tzw. szablonu
		if (change_special_screen == 1) { LCD_show_template; change_special_screen = 0; }
 8003244:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003248:	2b01      	cmp	r3, #1
 800324a:	d10a      	bne.n	8003262 <Task3+0xcaa>
 800324c:	4bba      	ldr	r3, [pc, #744]	; (8003538 <Task3+0xf80>)
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	f107 013e 	add.w	r1, r7, #62	; 0x3e
 8003254:	2300      	movs	r3, #0
 8003256:	2200      	movs	r2, #0
 8003258:	f003 f880 	bl	800635c <xQueueGenericSend>
 800325c:	2300      	movs	r3, #0
 800325e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		//Wyświetlenie wylosowanych kart
		//przez gracza
		if (change_card_U[1] == 1) { LCD_show_card1_U; change_card_U[1] = 0; }
 8003262:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003266:	2b01      	cmp	r3, #1
 8003268:	d10b      	bne.n	8003282 <Task3+0xcca>
 800326a:	4bb4      	ldr	r3, [pc, #720]	; (800353c <Task3+0xf84>)
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	f107 031c 	add.w	r3, r7, #28
 8003272:	1c59      	adds	r1, r3, #1
 8003274:	2300      	movs	r3, #0
 8003276:	2200      	movs	r2, #0
 8003278:	f003 f870 	bl	800635c <xQueueGenericSend>
 800327c:	2300      	movs	r3, #0
 800327e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		if (change_card_U[2] == 1) { LCD_show_card2_U; change_card_U[2] = 0; }
 8003282:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003286:	2b01      	cmp	r3, #1
 8003288:	d10b      	bne.n	80032a2 <Task3+0xcea>
 800328a:	4bad      	ldr	r3, [pc, #692]	; (8003540 <Task3+0xf88>)
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	f107 031c 	add.w	r3, r7, #28
 8003292:	1c99      	adds	r1, r3, #2
 8003294:	2300      	movs	r3, #0
 8003296:	2200      	movs	r2, #0
 8003298:	f003 f860 	bl	800635c <xQueueGenericSend>
 800329c:	2300      	movs	r3, #0
 800329e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (change_card_U[3] == 1) { LCD_show_card3_U; change_card_U[3] = 0; }
 80032a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d10b      	bne.n	80032c2 <Task3+0xd0a>
 80032aa:	4ba6      	ldr	r3, [pc, #664]	; (8003544 <Task3+0xf8c>)
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	f107 031c 	add.w	r3, r7, #28
 80032b2:	1cd9      	adds	r1, r3, #3
 80032b4:	2300      	movs	r3, #0
 80032b6:	2200      	movs	r2, #0
 80032b8:	f003 f850 	bl	800635c <xQueueGenericSend>
 80032bc:	2300      	movs	r3, #0
 80032be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (change_card_U[4] == 1) { LCD_show_card4_U; change_card_U[4] = 0; }
 80032c2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d10b      	bne.n	80032e2 <Task3+0xd2a>
 80032ca:	4b9f      	ldr	r3, [pc, #636]	; (8003548 <Task3+0xf90>)
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	f107 031c 	add.w	r3, r7, #28
 80032d2:	1d19      	adds	r1, r3, #4
 80032d4:	2300      	movs	r3, #0
 80032d6:	2200      	movs	r2, #0
 80032d8:	f003 f840 	bl	800635c <xQueueGenericSend>
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		if (change_card_U[5] == 1) { LCD_show_card5_U; change_card_U[5] = 0; }
 80032e2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d10b      	bne.n	8003302 <Task3+0xd4a>
 80032ea:	4b98      	ldr	r3, [pc, #608]	; (800354c <Task3+0xf94>)
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	f107 031c 	add.w	r3, r7, #28
 80032f2:	1d59      	adds	r1, r3, #5
 80032f4:	2300      	movs	r3, #0
 80032f6:	2200      	movs	r2, #0
 80032f8:	f003 f830 	bl	800635c <xQueueGenericSend>
 80032fc:	2300      	movs	r3, #0
 80032fe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		if (change_card_U[6] == 1) { LCD_show_card6_U; change_card_U[6] = 0; }
 8003302:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003306:	2b01      	cmp	r3, #1
 8003308:	d10b      	bne.n	8003322 <Task3+0xd6a>
 800330a:	4b91      	ldr	r3, [pc, #580]	; (8003550 <Task3+0xf98>)
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	f107 031c 	add.w	r3, r7, #28
 8003312:	1d99      	adds	r1, r3, #6
 8003314:	2300      	movs	r3, #0
 8003316:	2200      	movs	r2, #0
 8003318:	f003 f820 	bl	800635c <xQueueGenericSend>
 800331c:	2300      	movs	r3, #0
 800331e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		if (change_card_U[7] == 1) { LCD_show_card7_U; change_card_U[7] = 0; }
 8003322:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003326:	2b01      	cmp	r3, #1
 8003328:	d10b      	bne.n	8003342 <Task3+0xd8a>
 800332a:	4b8a      	ldr	r3, [pc, #552]	; (8003554 <Task3+0xf9c>)
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	f107 031c 	add.w	r3, r7, #28
 8003332:	1dd9      	adds	r1, r3, #7
 8003334:	2300      	movs	r3, #0
 8003336:	2200      	movs	r2, #0
 8003338:	f003 f810 	bl	800635c <xQueueGenericSend>
 800333c:	2300      	movs	r3, #0
 800333e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if (change_card_U[8] == 1) { LCD_show_card8_U; change_card_U[8] = 0; }
 8003342:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003346:	2b01      	cmp	r3, #1
 8003348:	d10c      	bne.n	8003364 <Task3+0xdac>
 800334a:	4b83      	ldr	r3, [pc, #524]	; (8003558 <Task3+0xfa0>)
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	f107 031c 	add.w	r3, r7, #28
 8003352:	f103 0108 	add.w	r1, r3, #8
 8003356:	2300      	movs	r3, #0
 8003358:	2200      	movs	r2, #0
 800335a:	f002 ffff 	bl	800635c <xQueueGenericSend>
 800335e:	2300      	movs	r3, #0
 8003360:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		if (change_card_U[9] == 1) { LCD_show_card9_U; change_card_U[9] = 0; }
 8003364:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003368:	2b01      	cmp	r3, #1
 800336a:	d10c      	bne.n	8003386 <Task3+0xdce>
 800336c:	4b7b      	ldr	r3, [pc, #492]	; (800355c <Task3+0xfa4>)
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	f107 031c 	add.w	r3, r7, #28
 8003374:	f103 0109 	add.w	r1, r3, #9
 8003378:	2300      	movs	r3, #0
 800337a:	2200      	movs	r2, #0
 800337c:	f002 ffee 	bl	800635c <xQueueGenericSend>
 8003380:	2300      	movs	r3, #0
 8003382:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		//przez komputer
		if (change_card_C[1] == 1) { LCD_show_card1_C; change_card_C[1] = 0; }
 8003386:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800338a:	2b01      	cmp	r3, #1
 800338c:	d10b      	bne.n	80033a6 <Task3+0xdee>
 800338e:	4b74      	ldr	r3, [pc, #464]	; (8003560 <Task3+0xfa8>)
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	f107 0310 	add.w	r3, r7, #16
 8003396:	1c59      	adds	r1, r3, #1
 8003398:	2300      	movs	r3, #0
 800339a:	2200      	movs	r2, #0
 800339c:	f002 ffde 	bl	800635c <xQueueGenericSend>
 80033a0:	2300      	movs	r3, #0
 80033a2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if (change_card_C[2] == 1) { LCD_show_card2_C; change_card_C[2] = 0; }
 80033a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d10b      	bne.n	80033c6 <Task3+0xe0e>
 80033ae:	4b6d      	ldr	r3, [pc, #436]	; (8003564 <Task3+0xfac>)
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	f107 0310 	add.w	r3, r7, #16
 80033b6:	1c99      	adds	r1, r3, #2
 80033b8:	2300      	movs	r3, #0
 80033ba:	2200      	movs	r2, #0
 80033bc:	f002 ffce 	bl	800635c <xQueueGenericSend>
 80033c0:	2300      	movs	r3, #0
 80033c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		if (change_card_C[3] == 1) { LCD_show_card3_C; change_card_C[3] = 0; }
 80033c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d10b      	bne.n	80033e6 <Task3+0xe2e>
 80033ce:	4b66      	ldr	r3, [pc, #408]	; (8003568 <Task3+0xfb0>)
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	f107 0310 	add.w	r3, r7, #16
 80033d6:	1cd9      	adds	r1, r3, #3
 80033d8:	2300      	movs	r3, #0
 80033da:	2200      	movs	r2, #0
 80033dc:	f002 ffbe 	bl	800635c <xQueueGenericSend>
 80033e0:	2300      	movs	r3, #0
 80033e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if (change_card_C[4] == 1) { LCD_show_card4_C; change_card_C[4] = 0; }
 80033e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10b      	bne.n	8003406 <Task3+0xe4e>
 80033ee:	4b5f      	ldr	r3, [pc, #380]	; (800356c <Task3+0xfb4>)
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	f107 0310 	add.w	r3, r7, #16
 80033f6:	1d19      	adds	r1, r3, #4
 80033f8:	2300      	movs	r3, #0
 80033fa:	2200      	movs	r2, #0
 80033fc:	f002 ffae 	bl	800635c <xQueueGenericSend>
 8003400:	2300      	movs	r3, #0
 8003402:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		if (change_card_C[5] == 1) { LCD_show_card5_C; change_card_C[5] = 0; }
 8003406:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800340a:	2b01      	cmp	r3, #1
 800340c:	d10b      	bne.n	8003426 <Task3+0xe6e>
 800340e:	4b58      	ldr	r3, [pc, #352]	; (8003570 <Task3+0xfb8>)
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	f107 0310 	add.w	r3, r7, #16
 8003416:	1d59      	adds	r1, r3, #5
 8003418:	2300      	movs	r3, #0
 800341a:	2200      	movs	r2, #0
 800341c:	f002 ff9e 	bl	800635c <xQueueGenericSend>
 8003420:	2300      	movs	r3, #0
 8003422:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (change_card_C[6] == 1) { LCD_show_card6_C; change_card_C[6] = 0; }
 8003426:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800342a:	2b01      	cmp	r3, #1
 800342c:	d10b      	bne.n	8003446 <Task3+0xe8e>
 800342e:	4b51      	ldr	r3, [pc, #324]	; (8003574 <Task3+0xfbc>)
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	f107 0310 	add.w	r3, r7, #16
 8003436:	1d99      	adds	r1, r3, #6
 8003438:	2300      	movs	r3, #0
 800343a:	2200      	movs	r2, #0
 800343c:	f002 ff8e 	bl	800635c <xQueueGenericSend>
 8003440:	2300      	movs	r3, #0
 8003442:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if (change_card_C[7] == 1) { LCD_show_card7_C; change_card_C[7] = 0; }
 8003446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800344a:	2b01      	cmp	r3, #1
 800344c:	d10b      	bne.n	8003466 <Task3+0xeae>
 800344e:	4b4a      	ldr	r3, [pc, #296]	; (8003578 <Task3+0xfc0>)
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	f107 0310 	add.w	r3, r7, #16
 8003456:	1dd9      	adds	r1, r3, #7
 8003458:	2300      	movs	r3, #0
 800345a:	2200      	movs	r2, #0
 800345c:	f002 ff7e 	bl	800635c <xQueueGenericSend>
 8003460:	2300      	movs	r3, #0
 8003462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (change_card_C[8] == 1) { LCD_show_card8_C; change_card_C[8] = 0; }
 8003466:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800346a:	2b01      	cmp	r3, #1
 800346c:	d10c      	bne.n	8003488 <Task3+0xed0>
 800346e:	4b43      	ldr	r3, [pc, #268]	; (800357c <Task3+0xfc4>)
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	f107 0310 	add.w	r3, r7, #16
 8003476:	f103 0108 	add.w	r1, r3, #8
 800347a:	2300      	movs	r3, #0
 800347c:	2200      	movs	r2, #0
 800347e:	f002 ff6d 	bl	800635c <xQueueGenericSend>
 8003482:	2300      	movs	r3, #0
 8003484:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		if (change_card_C[9] == 1) { LCD_show_card9_C; change_card_C[9] = 0; }
 8003488:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800348c:	2b01      	cmp	r3, #1
 800348e:	d10c      	bne.n	80034aa <Task3+0xef2>
 8003490:	4b3b      	ldr	r3, [pc, #236]	; (8003580 <Task3+0xfc8>)
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	f107 0310 	add.w	r3, r7, #16
 8003498:	f103 0109 	add.w	r1, r3, #9
 800349c:	2300      	movs	r3, #0
 800349e:	2200      	movs	r2, #0
 80034a0:	f002 ff5c 	bl	800635c <xQueueGenericSend>
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		//Wyświetlenie liczby zdobytych punktów przez gracza
		if (change_number_of_points_USER == 1) { LCD_show_points_U; change_number_of_points_USER = 0; }
 80034aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d10a      	bne.n	80034c8 <Task3+0xf10>
 80034b2:	4b34      	ldr	r3, [pc, #208]	; (8003584 <Task3+0xfcc>)
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80034ba:	2300      	movs	r3, #0
 80034bc:	2200      	movs	r2, #0
 80034be:	f002 ff4d 	bl	800635c <xQueueGenericSend>
 80034c2:	2300      	movs	r3, #0
 80034c4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

		//Wyświetlenie liczby zdobytych punktów przez komputer
		if (change_number_of_points_CPU == 1) {	LCD_show_points_C; change_number_of_points_CPU = 0;	}
 80034c8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d10a      	bne.n	80034e6 <Task3+0xf2e>
 80034d0:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <Task3+0xfd0>)
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80034d8:	2300      	movs	r3, #0
 80034da:	2200      	movs	r2, #0
 80034dc:	f002 ff3e 	bl	800635c <xQueueGenericSend>
 80034e0:	2300      	movs	r3, #0
 80034e2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

		//Wyświetlenie liczby wygranych rund gracza
		if (change_number_of_wins_USER == 1) { LCD_show_round_wins_U; change_number_of_wins_USER = 0; }
 80034e6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d10a      	bne.n	8003504 <Task3+0xf4c>
 80034ee:	4b27      	ldr	r3, [pc, #156]	; (800358c <Task3+0xfd4>)
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	f107 0142 	add.w	r1, r7, #66	; 0x42
 80034f6:	2300      	movs	r3, #0
 80034f8:	2200      	movs	r2, #0
 80034fa:	f002 ff2f 	bl	800635c <xQueueGenericSend>
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

		//Wyświetlenie liczby wygranych rund komputera
		if (change_number_of_wins_CPU == 1) { LCD_show_round_wins_C; change_number_of_wins_CPU = 0; }
 8003504:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003508:	2b01      	cmp	r3, #1
 800350a:	d10a      	bne.n	8003522 <Task3+0xf6a>
 800350c:	4b20      	ldr	r3, [pc, #128]	; (8003590 <Task3+0xfd8>)
 800350e:	6818      	ldr	r0, [r3, #0]
 8003510:	f107 0141 	add.w	r1, r7, #65	; 0x41
 8003514:	2300      	movs	r3, #0
 8003516:	2200      	movs	r2, #0
 8003518:	f002 ff20 	bl	800635c <xQueueGenericSend>
 800351c:	2300      	movs	r3, #0
 800351e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		osDelay(100);
 8003522:	2064      	movs	r0, #100	; 0x64
 8003524:	f002 fd17 	bl	8005f56 <osDelay>
		if( xSemaphoreTake( Semaphore_nowa_gra_pressed, ( TickType_t ) 10 ) == pdTRUE )
 8003528:	f7ff b89c 	b.w	8002664 <Task3+0xac>
 800352c:	20004674 	.word	0x20004674
 8003530:	20004780 	.word	0x20004780
 8003534:	200046d8 	.word	0x200046d8
 8003538:	200047d8 	.word	0x200047d8
 800353c:	20004760 	.word	0x20004760
 8003540:	2000476c 	.word	0x2000476c
 8003544:	200046c8 	.word	0x200046c8
 8003548:	200046dc 	.word	0x200046dc
 800354c:	200047d0 	.word	0x200047d0
 8003550:	2000474c 	.word	0x2000474c
 8003554:	20004758 	.word	0x20004758
 8003558:	20004764 	.word	0x20004764
 800355c:	200046ec 	.word	0x200046ec
 8003560:	200047cc 	.word	0x200047cc
 8003564:	200046fc 	.word	0x200046fc
 8003568:	20004774 	.word	0x20004774
 800356c:	200046d0 	.word	0x200046d0
 8003570:	200047dc 	.word	0x200047dc
 8003574:	2000477c 	.word	0x2000477c
 8003578:	200046e8 	.word	0x200046e8
 800357c:	200046f8 	.word	0x200046f8
 8003580:	20004754 	.word	0x20004754
 8003584:	2000467c 	.word	0x2000467c
 8003588:	20004784 	.word	0x20004784
 800358c:	200046e4 	.word	0x200046e4
 8003590:	20004790 	.word	0x20004790

08003594 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800359c:	2001      	movs	r0, #1
 800359e:	f002 fcda 	bl	8005f56 <osDelay>
 80035a2:	e7fb      	b.n	800359c <StartDefaultTask+0x8>

080035a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4aa0      	ldr	r2, [pc, #640]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d101      	bne.n	80035ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80035b6:	f000 fcd7 	bl	8003f68 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */

  //Obsluga przerwania od przepelnienia TIM4

  //Obsluga przyciskow z uzyciem debouncingu oraz losowanie kart (liczb) i wpisywanie ich do tablicy
  if (htim->Instance == TIM4)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a9e      	ldr	r2, [pc, #632]	; (8003838 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	f040 8304 	bne.w	8003bce <HAL_TIM_PeriodElapsedCallback+0x62a>
  {
	  if (nr_random_card_to_draw_board_1 < 52) //Jeżeli liczba wylosowanych kart jest mniejsza niż 52 (52 - liczba kart w talii)
 80035c6:	4b9d      	ldr	r3, [pc, #628]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b33      	cmp	r3, #51	; 0x33
 80035cc:	f200 8212 	bhi.w	80039f4 <HAL_TIM_PeriodElapsedCallback+0x450>
	  {
		  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) //Jeżeli przekonwetowano odczytaną wartość analogową na cyfrową
 80035d0:	210a      	movs	r1, #10
 80035d2:	489b      	ldr	r0, [pc, #620]	; (8003840 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80035d4:	f000 fe04 	bl	80041e0 <HAL_ADC_PollForConversion>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f040 81dc 	bne.w	8003998 <HAL_TIM_PeriodElapsedCallback+0x3f4>
		  {
			  ADC_measure = ((HAL_ADC_GetValue(&hadc1)) % 12) + 2; //"Wylosuj" liczbę z zakresu od 2 do 14
 80035e0:	4897      	ldr	r0, [pc, #604]	; (8003840 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80035e2:	f000 fe88 	bl	80042f6 <HAL_ADC_GetValue>
 80035e6:	4601      	mov	r1, r0
 80035e8:	4b96      	ldr	r3, [pc, #600]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80035ea:	fba3 2301 	umull	r2, r3, r3, r1
 80035ee:	08da      	lsrs	r2, r3, #3
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	1aca      	subs	r2, r1, r3
 80035fa:	b293      	uxth	r3, r2
 80035fc:	3302      	adds	r3, #2
 80035fe:	b29a      	uxth	r2, r3
 8003600:	4b91      	ldr	r3, [pc, #580]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003602:	801a      	strh	r2, [r3, #0]
			  HAL_ADC_Start(&hadc1); //Rozpocznik kolejny pomiar przetwornikiem ADC
 8003604:	488e      	ldr	r0, [pc, #568]	; (8003840 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003606:	f000 fd37 	bl	8004078 <HAL_ADC_Start>

			  assignment_card_to_board = 0; //1 - przypisano wylosowaną "kartę", 0 - wylosowana karta nie została przypisana
 800360a:	4b90      	ldr	r3, [pc, #576]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
			  while (assignment_card_to_board == 0) //Dopóki wylosowana karta nie została przypisana to
 8003610:	bf00      	nop
 8003612:	e1a1      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
			  {
				  switch (ADC_measure)
 8003614:	4b8c      	ldr	r3, [pc, #560]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	3b02      	subs	r3, #2
 800361a:	2b0c      	cmp	r3, #12
 800361c:	f200 819c 	bhi.w	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 8003620:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003626:	bf00      	nop
 8003628:	0800365d 	.word	0x0800365d
 800362c:	08003693 	.word	0x08003693
 8003630:	080036c9 	.word	0x080036c9
 8003634:	080036ff 	.word	0x080036ff
 8003638:	08003735 	.word	0x08003735
 800363c:	0800376b 	.word	0x0800376b
 8003640:	080037a1 	.word	0x080037a1
 8003644:	080037d7 	.word	0x080037d7
 8003648:	0800380d 	.word	0x0800380d
 800364c:	08003887 	.word	0x08003887
 8003650:	080038bd 	.word	0x080038bd
 8003654:	080038f3 	.word	0x080038f3
 8003658:	08003929 	.word	0x08003929
				  {
				  case 2: { if (number_of_cards_2 > 0) {random_card_board_1[nr_random_card_to_draw_board_1] = 2; number_of_cards_2--; assignment_card_to_board = 1;} else ADC_measure++; break;}
 800365c:	4b7c      	ldr	r3, [pc, #496]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00f      	beq.n	8003684 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8003664:	4b75      	ldr	r3, [pc, #468]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	4b7a      	ldr	r3, [pc, #488]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800366c:	2102      	movs	r1, #2
 800366e:	5499      	strb	r1, [r3, r2]
 8003670:	4b77      	ldr	r3, [pc, #476]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	3b01      	subs	r3, #1
 8003676:	b2da      	uxtb	r2, r3
 8003678:	4b75      	ldr	r3, [pc, #468]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	4b73      	ldr	r3, [pc, #460]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800367e:	2201      	movs	r2, #1
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e169      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 8003684:	4b70      	ldr	r3, [pc, #448]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	3301      	adds	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	4b6e      	ldr	r3, [pc, #440]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800368e:	801a      	strh	r2, [r3, #0]
 8003690:	e162      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
				  case 3: { if (number_of_cards_3 > 0) {random_card_board_1[nr_random_card_to_draw_board_1] = 3; number_of_cards_3--; assignment_card_to_board = 1;} else ADC_measure++; break;}
 8003692:	4b71      	ldr	r3, [pc, #452]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00f      	beq.n	80036ba <HAL_TIM_PeriodElapsedCallback+0x116>
 800369a:	4b68      	ldr	r3, [pc, #416]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x298>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	4b6c      	ldr	r3, [pc, #432]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80036a2:	2103      	movs	r1, #3
 80036a4:	5499      	strb	r1, [r3, r2]
 80036a6:	4b6c      	ldr	r3, [pc, #432]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4b6a      	ldr	r3, [pc, #424]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	4b66      	ldr	r3, [pc, #408]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	701a      	strb	r2, [r3, #0]
 80036b8:	e14e      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 80036ba:	4b63      	ldr	r3, [pc, #396]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	3301      	adds	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	4b61      	ldr	r3, [pc, #388]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80036c4:	801a      	strh	r2, [r3, #0]
 80036c6:	e147      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
				  case 4: { if (number_of_cards_4 > 0) {random_card_board_1[nr_random_card_to_draw_board_1] = 4; number_of_cards_4--; assignment_card_to_board = 1;} else ADC_measure++; break;}
 80036c8:	4b64      	ldr	r3, [pc, #400]	; (800385c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00f      	beq.n	80036f0 <HAL_TIM_PeriodElapsedCallback+0x14c>
 80036d0:	4b5a      	ldr	r3, [pc, #360]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b5f      	ldr	r3, [pc, #380]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80036d8:	2104      	movs	r1, #4
 80036da:	5499      	strb	r1, [r3, r2]
 80036dc:	4b5f      	ldr	r3, [pc, #380]	; (800385c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	4b5d      	ldr	r3, [pc, #372]	; (800385c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	4b58      	ldr	r3, [pc, #352]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	e133      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 80036f0:	4b55      	ldr	r3, [pc, #340]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	3301      	adds	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	4b53      	ldr	r3, [pc, #332]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80036fa:	801a      	strh	r2, [r3, #0]
 80036fc:	e12c      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
				  case 5: { if (number_of_cards_5 > 0) {random_card_board_1[nr_random_card_to_draw_board_1] = 5; number_of_cards_5--; assignment_card_to_board = 1;} else ADC_measure++; break;}
 80036fe:	4b58      	ldr	r3, [pc, #352]	; (8003860 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00f      	beq.n	8003726 <HAL_TIM_PeriodElapsedCallback+0x182>
 8003706:	4b4d      	ldr	r3, [pc, #308]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	4b51      	ldr	r3, [pc, #324]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800370e:	2105      	movs	r1, #5
 8003710:	5499      	strb	r1, [r3, r2]
 8003712:	4b53      	ldr	r3, [pc, #332]	; (8003860 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	3b01      	subs	r3, #1
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4b51      	ldr	r3, [pc, #324]	; (8003860 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	4b4b      	ldr	r3, [pc, #300]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]
 8003724:	e118      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 8003726:	4b48      	ldr	r3, [pc, #288]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	3301      	adds	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	4b46      	ldr	r3, [pc, #280]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	e111      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
				  case 6: { if (number_of_cards_6 > 0) {random_card_board_1[nr_random_card_to_draw_board_1] = 6; number_of_cards_6--; assignment_card_to_board = 1;} else ADC_measure++; break;}
 8003734:	4b4b      	ldr	r3, [pc, #300]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00f      	beq.n	800375c <HAL_TIM_PeriodElapsedCallback+0x1b8>
 800373c:	4b3f      	ldr	r3, [pc, #252]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x298>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b44      	ldr	r3, [pc, #272]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003744:	2106      	movs	r1, #6
 8003746:	5499      	strb	r1, [r3, r2]
 8003748:	4b46      	ldr	r3, [pc, #280]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	3b01      	subs	r3, #1
 800374e:	b2da      	uxtb	r2, r3
 8003750:	4b44      	ldr	r3, [pc, #272]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	4b3d      	ldr	r3, [pc, #244]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e0fd      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 800375c:	4b3a      	ldr	r3, [pc, #232]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	3301      	adds	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	4b38      	ldr	r3, [pc, #224]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003766:	801a      	strh	r2, [r3, #0]
 8003768:	e0f6      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
				  case 7: { if (number_of_cards_7 > 0) {random_card_board_1[nr_random_card_to_draw_board_1] = 7; number_of_cards_7--; assignment_card_to_board = 1;} else ADC_measure++; break;}
 800376a:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00f      	beq.n	8003792 <HAL_TIM_PeriodElapsedCallback+0x1ee>
 8003772:	4b32      	ldr	r3, [pc, #200]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	4b36      	ldr	r3, [pc, #216]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800377a:	2107      	movs	r1, #7
 800377c:	5499      	strb	r1, [r3, r2]
 800377e:	4b3a      	ldr	r3, [pc, #232]	; (8003868 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	3b01      	subs	r3, #1
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b38      	ldr	r3, [pc, #224]	; (8003868 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	4b30      	ldr	r3, [pc, #192]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]
 8003790:	e0e2      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 8003792:	4b2d      	ldr	r3, [pc, #180]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	3301      	adds	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800379c:	801a      	strh	r2, [r3, #0]
 800379e:	e0db      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
				  case 8: { if (number_of_cards_8 > 0) {random_card_board_1[nr_random_card_to_draw_board_1] = 8; number_of_cards_8--; assignment_card_to_board = 1;} else ADC_measure++; break;}
 80037a0:	4b32      	ldr	r3, [pc, #200]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00f      	beq.n	80037c8 <HAL_TIM_PeriodElapsedCallback+0x224>
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	4b29      	ldr	r3, [pc, #164]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80037b0:	2108      	movs	r1, #8
 80037b2:	5499      	strb	r1, [r3, r2]
 80037b4:	4b2d      	ldr	r3, [pc, #180]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	4b2b      	ldr	r3, [pc, #172]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	4b22      	ldr	r3, [pc, #136]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	e0c7      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 80037c8:	4b1f      	ldr	r3, [pc, #124]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	3301      	adds	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80037d2:	801a      	strh	r2, [r3, #0]
 80037d4:	e0c0      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
				  case 9: { if (number_of_cards_9 > 0) {random_card_board_1[nr_random_card_to_draw_board_1] = 9; number_of_cards_9--; assignment_card_to_board = 1;} else ADC_measure++; break;}
 80037d6:	4b26      	ldr	r3, [pc, #152]	; (8003870 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00f      	beq.n	80037fe <HAL_TIM_PeriodElapsedCallback+0x25a>
 80037de:	4b17      	ldr	r3, [pc, #92]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80037e6:	2109      	movs	r1, #9
 80037e8:	5499      	strb	r1, [r3, r2]
 80037ea:	4b21      	ldr	r3, [pc, #132]	; (8003870 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	4b1f      	ldr	r3, [pc, #124]	; (8003870 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	4b15      	ldr	r3, [pc, #84]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]
 80037fc:	e0ac      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	3301      	adds	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	4b10      	ldr	r3, [pc, #64]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003808:	801a      	strh	r2, [r3, #0]
 800380a:	e0a5      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
				  case 10: { if (number_of_cards_T > 0) {random_card_board_1[nr_random_card_to_draw_board_1] = 10; number_of_cards_T--; assignment_card_to_board = 1;} else ADC_measure++; break;}
 800380c:	4b19      	ldr	r3, [pc, #100]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d031      	beq.n	8003878 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 8003814:	4b09      	ldr	r3, [pc, #36]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800381c:	210a      	movs	r1, #10
 800381e:	5499      	strb	r1, [r3, r2]
 8003820:	4b14      	ldr	r3, [pc, #80]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	3b01      	subs	r3, #1
 8003826:	b2da      	uxtb	r2, r3
 8003828:	4b12      	ldr	r3, [pc, #72]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	4b07      	ldr	r3, [pc, #28]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800382e:	2201      	movs	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	e091      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 8003834:	40010000 	.word	0x40010000
 8003838:	40000800 	.word	0x40000800
 800383c:	20000808 	.word	0x20000808
 8003840:	20004704 	.word	0x20004704
 8003844:	aaaaaaab 	.word	0xaaaaaaab
 8003848:	200046d4 	.word	0x200046d4
 800384c:	20000809 	.word	0x20000809
 8003850:	20000000 	.word	0x20000000
 8003854:	20004794 	.word	0x20004794
 8003858:	20000001 	.word	0x20000001
 800385c:	20000002 	.word	0x20000002
 8003860:	20000003 	.word	0x20000003
 8003864:	20000004 	.word	0x20000004
 8003868:	20000005 	.word	0x20000005
 800386c:	20000006 	.word	0x20000006
 8003870:	20000007 	.word	0x20000007
 8003874:	20000008 	.word	0x20000008
 8003878:	4ba2      	ldr	r3, [pc, #648]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	3301      	adds	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	4ba0      	ldr	r3, [pc, #640]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8003882:	801a      	strh	r2, [r3, #0]
 8003884:	e068      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
				  case 11: { if (number_of_cards_J > 0) {random_card_board_1[nr_random_card_to_draw_board_1] = 11; number_of_cards_J--; assignment_card_to_board = 1;} else ADC_measure++; break;}
 8003886:	4ba0      	ldr	r3, [pc, #640]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00f      	beq.n	80038ae <HAL_TIM_PeriodElapsedCallback+0x30a>
 800388e:	4b9f      	ldr	r3, [pc, #636]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	4b9e      	ldr	r3, [pc, #632]	; (8003b10 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8003896:	210b      	movs	r1, #11
 8003898:	5499      	strb	r1, [r3, r2]
 800389a:	4b9b      	ldr	r3, [pc, #620]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	3b01      	subs	r3, #1
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4b99      	ldr	r3, [pc, #612]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	4b9b      	ldr	r3, [pc, #620]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	e054      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 80038ae:	4b95      	ldr	r3, [pc, #596]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	3301      	adds	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	4b93      	ldr	r3, [pc, #588]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80038b8:	801a      	strh	r2, [r3, #0]
 80038ba:	e04d      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
				  case 12: { if (number_of_cards_Q > 0) {random_card_board_1[nr_random_card_to_draw_board_1] = 12; number_of_cards_Q--; assignment_card_to_board = 1;} else ADC_measure++; break;}
 80038bc:	4b96      	ldr	r3, [pc, #600]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00f      	beq.n	80038e4 <HAL_TIM_PeriodElapsedCallback+0x340>
 80038c4:	4b91      	ldr	r3, [pc, #580]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x568>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	461a      	mov	r2, r3
 80038ca:	4b91      	ldr	r3, [pc, #580]	; (8003b10 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80038cc:	210c      	movs	r1, #12
 80038ce:	5499      	strb	r1, [r3, r2]
 80038d0:	4b91      	ldr	r3, [pc, #580]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	4b8f      	ldr	r3, [pc, #572]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80038da:	701a      	strb	r2, [r3, #0]
 80038dc:	4b8d      	ldr	r3, [pc, #564]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	e039      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 80038e4:	4b87      	ldr	r3, [pc, #540]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	3301      	adds	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	4b85      	ldr	r3, [pc, #532]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80038ee:	801a      	strh	r2, [r3, #0]
 80038f0:	e032      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
				  case 13: { if (number_of_cards_K > 0) {random_card_board_1[nr_random_card_to_draw_board_1] = 13; number_of_cards_K--; assignment_card_to_board = 1;} else ADC_measure++; break;}
 80038f2:	4b8a      	ldr	r3, [pc, #552]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x578>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00f      	beq.n	800391a <HAL_TIM_PeriodElapsedCallback+0x376>
 80038fa:	4b84      	ldr	r3, [pc, #528]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x568>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	4b83      	ldr	r3, [pc, #524]	; (8003b10 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8003902:	210d      	movs	r1, #13
 8003904:	5499      	strb	r1, [r3, r2]
 8003906:	4b85      	ldr	r3, [pc, #532]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x578>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	3b01      	subs	r3, #1
 800390c:	b2da      	uxtb	r2, r3
 800390e:	4b83      	ldr	r3, [pc, #524]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x578>)
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	4b80      	ldr	r3, [pc, #512]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8003914:	2201      	movs	r2, #1
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	e01e      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 800391a:	4b7a      	ldr	r3, [pc, #488]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	3301      	adds	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	4b78      	ldr	r3, [pc, #480]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8003924:	801a      	strh	r2, [r3, #0]
 8003926:	e017      	b.n	8003958 <HAL_TIM_PeriodElapsedCallback+0x3b4>
				  case 14: { if (number_of_cards_A > 0) {random_card_board_1[nr_random_card_to_draw_board_1] = 14; number_of_cards_A--; assignment_card_to_board = 1;} else ADC_measure = 2; break;}
 8003928:	4b7d      	ldr	r3, [pc, #500]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00f      	beq.n	8003950 <HAL_TIM_PeriodElapsedCallback+0x3ac>
 8003930:	4b76      	ldr	r3, [pc, #472]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	4b76      	ldr	r3, [pc, #472]	; (8003b10 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8003938:	210e      	movs	r1, #14
 800393a:	5499      	strb	r1, [r3, r2]
 800393c:	4b78      	ldr	r3, [pc, #480]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	3b01      	subs	r3, #1
 8003942:	b2da      	uxtb	r2, r3
 8003944:	4b76      	ldr	r3, [pc, #472]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8003946:	701a      	strb	r2, [r3, #0]
 8003948:	4b72      	ldr	r3, [pc, #456]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x570>)
 800394a:	2201      	movs	r2, #1
 800394c:	701a      	strb	r2, [r3, #0]
 800394e:	e002      	b.n	8003956 <HAL_TIM_PeriodElapsedCallback+0x3b2>
 8003950:	4b6c      	ldr	r3, [pc, #432]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8003952:	2202      	movs	r2, #2
 8003954:	801a      	strh	r2, [r3, #0]
 8003956:	bf00      	nop
			  while (assignment_card_to_board == 0) //Dopóki wylosowana karta nie została przypisana to
 8003958:	4b6e      	ldr	r3, [pc, #440]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x570>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	f43f ae59 	beq.w	8003614 <HAL_TIM_PeriodElapsedCallback+0x70>
				  }//Koniec switcha
			  }

			  //Zapis do tablicy wylosowanej karty na co czwartej pozycji 0,4,...,48,1,5,...,49,2,6,...,50,3,7,...,51
			  nr_random_card_to_draw_board_1 = nr_random_card_to_draw_board_1 + 4;
 8003962:	4b6a      	ldr	r3, [pc, #424]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	3304      	adds	r3, #4
 8003968:	b2da      	uxtb	r2, r3
 800396a:	4b68      	ldr	r3, [pc, #416]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x568>)
 800396c:	701a      	strb	r2, [r3, #0]
			  if (nr_random_card_to_draw_board_1 == 52) nr_random_card_to_draw_board_1 = 1;
 800396e:	4b67      	ldr	r3, [pc, #412]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b34      	cmp	r3, #52	; 0x34
 8003974:	d102      	bne.n	800397c <HAL_TIM_PeriodElapsedCallback+0x3d8>
 8003976:	4b65      	ldr	r3, [pc, #404]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
			  if (nr_random_card_to_draw_board_1 == 53) nr_random_card_to_draw_board_1 = 2;
 800397c:	4b63      	ldr	r3, [pc, #396]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x568>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b35      	cmp	r3, #53	; 0x35
 8003982:	d102      	bne.n	800398a <HAL_TIM_PeriodElapsedCallback+0x3e6>
 8003984:	4b61      	ldr	r3, [pc, #388]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8003986:	2202      	movs	r2, #2
 8003988:	701a      	strb	r2, [r3, #0]
			  if (nr_random_card_to_draw_board_1 == 54) nr_random_card_to_draw_board_1 = 3;
 800398a:	4b60      	ldr	r3, [pc, #384]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x568>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b36      	cmp	r3, #54	; 0x36
 8003990:	d102      	bne.n	8003998 <HAL_TIM_PeriodElapsedCallback+0x3f4>
 8003992:	4b5e      	ldr	r3, [pc, #376]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8003994:	2203      	movs	r2, #3
 8003996:	701a      	strb	r2, [r3, #0]
		  }

		  if(nr_random_card_to_draw_board_1 == 55) //Jeżeli zakończono losowanie kart spowodowane brakiem kart do losowania to
 8003998:	4b5c      	ldr	r3, [pc, #368]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x568>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b37      	cmp	r3, #55	; 0x37
 800399e:	d129      	bne.n	80039f4 <HAL_TIM_PeriodElapsedCallback+0x450>
		  {
			  if_board_1_prepare = 1; //Informuje, ze tablica jest z wylosowanymi liczba jest gotowa do użycia
 80039a0:	4b60      	ldr	r3, [pc, #384]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	701a      	strb	r2, [r3, #0]
			  //Uzupełnij talię kartami, aby można było z niej losować
			  number_of_cards_2 = 4;
 80039a6:	4b60      	ldr	r3, [pc, #384]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0x584>)
 80039a8:	2204      	movs	r2, #4
 80039aa:	701a      	strb	r2, [r3, #0]
			  number_of_cards_3 = 4;
 80039ac:	4b5f      	ldr	r3, [pc, #380]	; (8003b2c <HAL_TIM_PeriodElapsedCallback+0x588>)
 80039ae:	2204      	movs	r2, #4
 80039b0:	701a      	strb	r2, [r3, #0]
			  number_of_cards_4 = 4;
 80039b2:	4b5f      	ldr	r3, [pc, #380]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80039b4:	2204      	movs	r2, #4
 80039b6:	701a      	strb	r2, [r3, #0]
			  number_of_cards_5 = 4;
 80039b8:	4b5e      	ldr	r3, [pc, #376]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80039ba:	2204      	movs	r2, #4
 80039bc:	701a      	strb	r2, [r3, #0]
			  number_of_cards_6 = 4;
 80039be:	4b5e      	ldr	r3, [pc, #376]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x594>)
 80039c0:	2204      	movs	r2, #4
 80039c2:	701a      	strb	r2, [r3, #0]
			  number_of_cards_7 = 4;
 80039c4:	4b5d      	ldr	r3, [pc, #372]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x598>)
 80039c6:	2204      	movs	r2, #4
 80039c8:	701a      	strb	r2, [r3, #0]
			  number_of_cards_8 = 4;
 80039ca:	4b5d      	ldr	r3, [pc, #372]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80039cc:	2204      	movs	r2, #4
 80039ce:	701a      	strb	r2, [r3, #0]
			  number_of_cards_9 = 4;
 80039d0:	4b5c      	ldr	r3, [pc, #368]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80039d2:	2204      	movs	r2, #4
 80039d4:	701a      	strb	r2, [r3, #0]
			  number_of_cards_T = 4;
 80039d6:	4b5c      	ldr	r3, [pc, #368]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80039d8:	2204      	movs	r2, #4
 80039da:	701a      	strb	r2, [r3, #0]
			  number_of_cards_J = 4;
 80039dc:	4b4a      	ldr	r3, [pc, #296]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80039de:	2204      	movs	r2, #4
 80039e0:	701a      	strb	r2, [r3, #0]
			  number_of_cards_Q = 4;
 80039e2:	4b4d      	ldr	r3, [pc, #308]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80039e4:	2204      	movs	r2, #4
 80039e6:	701a      	strb	r2, [r3, #0]
			  number_of_cards_K = 4;
 80039e8:	4b4c      	ldr	r3, [pc, #304]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x578>)
 80039ea:	2204      	movs	r2, #4
 80039ec:	701a      	strb	r2, [r3, #0]
			  number_of_cards_A = 4;
 80039ee:	4b4c      	ldr	r3, [pc, #304]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80039f0:	2204      	movs	r2, #4
 80039f2:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  //Obsługa i eliminacja debouncingu dla uzywanych czterech przyciskow
	  if (HAL_GPIO_ReadPin(Przycisk_nowa_gra_GPIO_Port, Przycisk_nowa_gra_Pin) == GPIO_PIN_RESET)
 80039f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039f8:	4854      	ldr	r0, [pc, #336]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80039fa:	f001 f91d 	bl	8004c38 <HAL_GPIO_ReadPin>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10f      	bne.n	8003a24 <HAL_TIM_PeriodElapsedCallback+0x480>
	  {
		  DebCount_nowa_gra++;
 8003a04:	4b52      	ldr	r3, [pc, #328]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	4b50      	ldr	r3, [pc, #320]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8003a0e:	701a      	strb	r2, [r3, #0]
		  DebCount_reset = 0;
 8003a10:	4b50      	ldr	r3, [pc, #320]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	701a      	strb	r2, [r3, #0]
		  DebCount_wystarczy_kart = 0;
 8003a16:	4b50      	ldr	r3, [pc, #320]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
		  DebCount_kolejna_karta = 0;
 8003a1c:	4b4f      	ldr	r3, [pc, #316]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	701a      	strb	r2, [r3, #0]
 8003a22:	e05f      	b.n	8003ae4 <HAL_TIM_PeriodElapsedCallback+0x540>
	  }
	  else if (HAL_GPIO_ReadPin(Przycisk_reset_GPIO_Port, Przycisk_reset_Pin) == GPIO_PIN_RESET)
 8003a24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a28:	4848      	ldr	r0, [pc, #288]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8003a2a:	f001 f905 	bl	8004c38 <HAL_GPIO_ReadPin>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10f      	bne.n	8003a54 <HAL_TIM_PeriodElapsedCallback+0x4b0>
	  {
		  DebCount_nowa_gra = 0;
 8003a34:	4b46      	ldr	r3, [pc, #280]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
		  DebCount_reset++;
 8003a3a:	4b46      	ldr	r3, [pc, #280]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4b44      	ldr	r3, [pc, #272]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003a44:	701a      	strb	r2, [r3, #0]
		  DebCount_wystarczy_kart = 0;
 8003a46:	4b44      	ldr	r3, [pc, #272]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
		  DebCount_kolejna_karta = 0;
 8003a4c:	4b43      	ldr	r3, [pc, #268]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	e047      	b.n	8003ae4 <HAL_TIM_PeriodElapsedCallback+0x540>
	  }
	  else if (HAL_GPIO_ReadPin(Przycisk_wystarczy_kart_GPIO_Port, Przycisk_wystarczy_kart_Pin) == GPIO_PIN_RESET)
 8003a54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a58:	483c      	ldr	r0, [pc, #240]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8003a5a:	f001 f8ed 	bl	8004c38 <HAL_GPIO_ReadPin>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10f      	bne.n	8003a84 <HAL_TIM_PeriodElapsedCallback+0x4e0>
	  {
		  DebCount_nowa_gra = 0;
 8003a64:	4b3a      	ldr	r3, [pc, #232]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]
		  DebCount_reset = 0;
 8003a6a:	4b3a      	ldr	r3, [pc, #232]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
		  DebCount_wystarczy_kart++;
 8003a70:	4b39      	ldr	r3, [pc, #228]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	4b37      	ldr	r3, [pc, #220]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8003a7a:	701a      	strb	r2, [r3, #0]
		  DebCount_kolejna_karta = 0;
 8003a7c:	4b37      	ldr	r3, [pc, #220]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	e02f      	b.n	8003ae4 <HAL_TIM_PeriodElapsedCallback+0x540>
	  }
	  else if (HAL_GPIO_ReadPin(Przycisk_kolejna_karta_GPIO_Port, Przycisk_kolejna_karta_Pin) == GPIO_PIN_RESET)
 8003a84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a88:	4830      	ldr	r0, [pc, #192]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8003a8a:	f001 f8d5 	bl	8004c38 <HAL_GPIO_ReadPin>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10f      	bne.n	8003ab4 <HAL_TIM_PeriodElapsedCallback+0x510>
	  {
		  DebCount_nowa_gra = 0;
 8003a94:	4b2e      	ldr	r3, [pc, #184]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	701a      	strb	r2, [r3, #0]
		  DebCount_reset = 0;
 8003a9a:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
		  DebCount_wystarczy_kart = 0;
 8003aa0:	4b2d      	ldr	r3, [pc, #180]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
		  DebCount_kolejna_karta++;
 8003aa6:	4b2d      	ldr	r3, [pc, #180]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	e017      	b.n	8003ae4 <HAL_TIM_PeriodElapsedCallback+0x540>
	  }
	  else
	  {
		  DebCount_nowa_gra = 0;
 8003ab4:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
		  DebCount_reset = 0;
 8003aba:	4b26      	ldr	r3, [pc, #152]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
		  DebCount_wystarczy_kart = 0;
 8003ac0:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
		  DebCount_kolejna_karta = 0;
 8003ac6:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]

		  Switched_nowa_gra = 0;
 8003acc:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
		  Switched_reset = 0;
 8003ad2:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	701a      	strb	r2, [r3, #0]
		  Switched_wystarczy_kart = 0;
 8003ad8:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	701a      	strb	r2, [r3, #0]
		  Switched_kolejna_karta = 0;
 8003ade:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
	  }

	  if ( (DebCount_nowa_gra >= time_to_press) && (Switched_nowa_gra == 0) )
 8003ae4:	4b1a      	ldr	r3, [pc, #104]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d943      	bls.n	8003b74 <HAL_TIM_PeriodElapsedCallback+0x5d0>
 8003aec:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d13f      	bne.n	8003b74 <HAL_TIM_PeriodElapsedCallback+0x5d0>
	  {
		  Switched_nowa_gra = 1;
 8003af4:	4b1a      	ldr	r3, [pc, #104]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
		  Pressed_nowa_gra = 1;
 8003afa:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
 8003b00:	e065      	b.n	8003bce <HAL_TIM_PeriodElapsedCallback+0x62a>
 8003b02:	bf00      	nop
 8003b04:	200046d4 	.word	0x200046d4
 8003b08:	20000009 	.word	0x20000009
 8003b0c:	20000808 	.word	0x20000808
 8003b10:	20004794 	.word	0x20004794
 8003b14:	20000809 	.word	0x20000809
 8003b18:	2000000a 	.word	0x2000000a
 8003b1c:	2000000b 	.word	0x2000000b
 8003b20:	2000000c 	.word	0x2000000c
 8003b24:	2000080a 	.word	0x2000080a
 8003b28:	20000000 	.word	0x20000000
 8003b2c:	20000001 	.word	0x20000001
 8003b30:	20000002 	.word	0x20000002
 8003b34:	20000003 	.word	0x20000003
 8003b38:	20000004 	.word	0x20000004
 8003b3c:	20000005 	.word	0x20000005
 8003b40:	20000006 	.word	0x20000006
 8003b44:	20000007 	.word	0x20000007
 8003b48:	20000008 	.word	0x20000008
 8003b4c:	40020c00 	.word	0x40020c00
 8003b50:	2000080b 	.word	0x2000080b
 8003b54:	2000080c 	.word	0x2000080c
 8003b58:	2000080d 	.word	0x2000080d
 8003b5c:	2000080e 	.word	0x2000080e
 8003b60:	2000080f 	.word	0x2000080f
 8003b64:	20000810 	.word	0x20000810
 8003b68:	20000811 	.word	0x20000811
 8003b6c:	20000812 	.word	0x20000812
 8003b70:	20000813 	.word	0x20000813
	  }
	  else if ( (DebCount_reset >= time_to_press) && (Switched_reset == 0) )
 8003b74:	4b18      	ldr	r3, [pc, #96]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x634>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d90a      	bls.n	8003b92 <HAL_TIM_PeriodElapsedCallback+0x5ee>
 8003b7c:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x638>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d106      	bne.n	8003b92 <HAL_TIM_PeriodElapsedCallback+0x5ee>
	  {
		  Switched_reset = 1;
 8003b84:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x638>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
		  Pressed_reset = 1;
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	e01d      	b.n	8003bce <HAL_TIM_PeriodElapsedCallback+0x62a>
	  }
	  else if ( (DebCount_wystarczy_kart >= time_to_press) && (Switched_wystarczy_kart == 0) )
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d90a      	bls.n	8003bb0 <HAL_TIM_PeriodElapsedCallback+0x60c>
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_TIM_PeriodElapsedCallback+0x60c>
	  {
		  Switched_wystarczy_kart = 1;
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	701a      	strb	r2, [r3, #0]
		  Pressed_wystarczy_kart = 1;
 8003ba8:	4b10      	ldr	r3, [pc, #64]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x648>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]
 8003bae:	e00e      	b.n	8003bce <HAL_TIM_PeriodElapsedCallback+0x62a>
	  }
	  else if ( (DebCount_kolejna_karta >= time_to_press) && (Switched_kolejna_karta == 0) )
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d90a      	bls.n	8003bce <HAL_TIM_PeriodElapsedCallback+0x62a>
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <HAL_TIM_PeriodElapsedCallback+0x62a>
	  {
		  Switched_kolejna_karta = 1;
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
		  Pressed_kolejna_karta = 1;
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <HAL_TIM_PeriodElapsedCallback+0x654>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
	  }
  }


  /* USER CODE END Callback 1 */
}
 8003bcc:	e7ff      	b.n	8003bce <HAL_TIM_PeriodElapsedCallback+0x62a>
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	2000080c 	.word	0x2000080c
 8003bdc:	20000810 	.word	0x20000810
 8003be0:	20000814 	.word	0x20000814
 8003be4:	2000080d 	.word	0x2000080d
 8003be8:	20000811 	.word	0x20000811
 8003bec:	20000815 	.word	0x20000815
 8003bf0:	2000080e 	.word	0x2000080e
 8003bf4:	20000812 	.word	0x20000812
 8003bf8:	20000816 	.word	0x20000816

08003bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c00:	b672      	cpsid	i
}
 8003c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c04:	e7fe      	b.n	8003c04 <Error_Handler+0x8>
	...

08003c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	607b      	str	r3, [r7, #4]
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <HAL_MspInit+0x54>)
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	4a11      	ldr	r2, [pc, #68]	; (8003c5c <HAL_MspInit+0x54>)
 8003c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <HAL_MspInit+0x54>)
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c26:	607b      	str	r3, [r7, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	603b      	str	r3, [r7, #0]
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <HAL_MspInit+0x54>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <HAL_MspInit+0x54>)
 8003c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c38:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3a:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <HAL_MspInit+0x54>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c46:	2200      	movs	r2, #0
 8003c48:	210f      	movs	r1, #15
 8003c4a:	f06f 0001 	mvn.w	r0, #1
 8003c4e:	f000 fe45 	bl	80048dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40023800 	.word	0x40023800

08003c60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	; 0x28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c68:	f107 0314 	add.w	r3, r7, #20
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	60da      	str	r2, [r3, #12]
 8003c76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a17      	ldr	r2, [pc, #92]	; (8003cdc <HAL_ADC_MspInit+0x7c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d127      	bne.n	8003cd2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	4b16      	ldr	r3, [pc, #88]	; (8003ce0 <HAL_ADC_MspInit+0x80>)
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	4a15      	ldr	r2, [pc, #84]	; (8003ce0 <HAL_ADC_MspInit+0x80>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c90:	6453      	str	r3, [r2, #68]	; 0x44
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <HAL_ADC_MspInit+0x80>)
 8003c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <HAL_ADC_MspInit+0x80>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	4a0e      	ldr	r2, [pc, #56]	; (8003ce0 <HAL_ADC_MspInit+0x80>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	6313      	str	r3, [r2, #48]	; 0x30
 8003cae:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <HAL_ADC_MspInit+0x80>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc6:	f107 0314 	add.w	r3, r7, #20
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4805      	ldr	r0, [pc, #20]	; (8003ce4 <HAL_ADC_MspInit+0x84>)
 8003cce:	f000 fe2f 	bl	8004930 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003cd2:	bf00      	nop
 8003cd4:	3728      	adds	r7, #40	; 0x28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40012000 	.word	0x40012000
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	40020000 	.word	0x40020000

08003ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <HAL_TIM_Base_MspInit+0x48>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d115      	bne.n	8003d26 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <HAL_TIM_Base_MspInit+0x4c>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	4a0c      	ldr	r2, [pc, #48]	; (8003d34 <HAL_TIM_Base_MspInit+0x4c>)
 8003d04:	f043 0304 	orr.w	r3, r3, #4
 8003d08:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_TIM_Base_MspInit+0x4c>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003d16:	2200      	movs	r2, #0
 8003d18:	2105      	movs	r1, #5
 8003d1a:	201e      	movs	r0, #30
 8003d1c:	f000 fdde 	bl	80048dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003d20:	201e      	movs	r0, #30
 8003d22:	f000 fdf7 	bl	8004914 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40000800 	.word	0x40000800
 8003d34:	40023800 	.word	0x40023800

08003d38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08c      	sub	sp, #48	; 0x30
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003d48:	2200      	movs	r2, #0
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	2019      	movs	r0, #25
 8003d4e:	f000 fdc5 	bl	80048dc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003d52:	2019      	movs	r0, #25
 8003d54:	f000 fdde 	bl	8004914 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <HAL_InitTick+0xa4>)
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d60:	4a1e      	ldr	r2, [pc, #120]	; (8003ddc <HAL_InitTick+0xa4>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6453      	str	r3, [r2, #68]	; 0x44
 8003d68:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <HAL_InitTick+0xa4>)
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d74:	f107 0210 	add.w	r2, r7, #16
 8003d78:	f107 0314 	add.w	r3, r7, #20
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f001 fc06 	bl	8005590 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003d84:	f001 fbf0 	bl	8005568 <HAL_RCC_GetPCLK2Freq>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	4a13      	ldr	r2, [pc, #76]	; (8003de0 <HAL_InitTick+0xa8>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	0c9b      	lsrs	r3, r3, #18
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003d9c:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <HAL_InitTick+0xac>)
 8003d9e:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <HAL_InitTick+0xb0>)
 8003da0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <HAL_InitTick+0xac>)
 8003da4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003da8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003daa:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <HAL_InitTick+0xac>)
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <HAL_InitTick+0xac>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_InitTick+0xac>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003dbc:	4809      	ldr	r0, [pc, #36]	; (8003de4 <HAL_InitTick+0xac>)
 8003dbe:	f001 fc19 	bl	80055f4 <HAL_TIM_Base_Init>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d104      	bne.n	8003dd2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003dc8:	4806      	ldr	r0, [pc, #24]	; (8003de4 <HAL_InitTick+0xac>)
 8003dca:	f001 fc63 	bl	8005694 <HAL_TIM_Base_Start_IT>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	e000      	b.n	8003dd4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3730      	adds	r7, #48	; 0x30
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	431bde83 	.word	0x431bde83
 8003de4:	200047e0 	.word	0x200047e0
 8003de8:	40010000 	.word	0x40010000

08003dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003df0:	e7fe      	b.n	8003df0 <NMI_Handler+0x4>

08003df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003df2:	b480      	push	{r7}
 8003df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003df6:	e7fe      	b.n	8003df6 <HardFault_Handler+0x4>

08003df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dfc:	e7fe      	b.n	8003dfc <MemManage_Handler+0x4>

08003dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e02:	e7fe      	b.n	8003e02 <BusFault_Handler+0x4>

08003e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e08:	e7fe      	b.n	8003e08 <UsageFault_Handler+0x4>

08003e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e1c:	4802      	ldr	r0, [pc, #8]	; (8003e28 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003e1e:	f001 fc9b 	bl	8005758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	200047e0 	.word	0x200047e0

08003e2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003e30:	4802      	ldr	r0, [pc, #8]	; (8003e3c <TIM4_IRQHandler+0x10>)
 8003e32:	f001 fc91 	bl	8005758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20004680 	.word	0x20004680

08003e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e48:	4a14      	ldr	r2, [pc, #80]	; (8003e9c <_sbrk+0x5c>)
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <_sbrk+0x60>)
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e54:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <_sbrk+0x64>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e5c:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <_sbrk+0x64>)
 8003e5e:	4a12      	ldr	r2, [pc, #72]	; (8003ea8 <_sbrk+0x68>)
 8003e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e62:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <_sbrk+0x64>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4413      	add	r3, r2
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d207      	bcs.n	8003e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e70:	f004 ff3c 	bl	8008cec <__errno>
 8003e74:	4603      	mov	r3, r0
 8003e76:	220c      	movs	r2, #12
 8003e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7e:	e009      	b.n	8003e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e80:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <_sbrk+0x64>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e86:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <_sbrk+0x64>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	4a05      	ldr	r2, [pc, #20]	; (8003ea4 <_sbrk+0x64>)
 8003e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e92:	68fb      	ldr	r3, [r7, #12]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20020000 	.word	0x20020000
 8003ea0:	00000400 	.word	0x00000400
 8003ea4:	20000818 	.word	0x20000818
 8003ea8:	20004880 	.word	0x20004880

08003eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <SystemInit+0x20>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	4a05      	ldr	r2, [pc, #20]	; (8003ecc <SystemInit+0x20>)
 8003eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ed4:	480d      	ldr	r0, [pc, #52]	; (8003f0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ed6:	490e      	ldr	r1, [pc, #56]	; (8003f10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ed8:	4a0e      	ldr	r2, [pc, #56]	; (8003f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003edc:	e002      	b.n	8003ee4 <LoopCopyDataInit>

08003ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ee2:	3304      	adds	r3, #4

08003ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ee8:	d3f9      	bcc.n	8003ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eea:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003eec:	4c0b      	ldr	r4, [pc, #44]	; (8003f1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ef0:	e001      	b.n	8003ef6 <LoopFillZerobss>

08003ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ef4:	3204      	adds	r2, #4

08003ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ef8:	d3fb      	bcc.n	8003ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003efa:	f7ff ffd7 	bl	8003eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003efe:	f004 fefb 	bl	8008cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f02:	f7fc fcf1 	bl	80008e8 <main>
  bx  lr    
 8003f06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f10:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8003f14:	080098b8 	.word	0x080098b8
  ldr r2, =_sbss
 8003f18:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8003f1c:	2000487c 	.word	0x2000487c

08003f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f20:	e7fe      	b.n	8003f20 <ADC_IRQHandler>
	...

08003f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f28:	4b0e      	ldr	r3, [pc, #56]	; (8003f64 <HAL_Init+0x40>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a0d      	ldr	r2, [pc, #52]	; (8003f64 <HAL_Init+0x40>)
 8003f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f34:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <HAL_Init+0x40>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <HAL_Init+0x40>)
 8003f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f40:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <HAL_Init+0x40>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a07      	ldr	r2, [pc, #28]	; (8003f64 <HAL_Init+0x40>)
 8003f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f4c:	2003      	movs	r0, #3
 8003f4e:	f000 fcba 	bl	80048c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f52:	200f      	movs	r0, #15
 8003f54:	f7ff fef0 	bl	8003d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f58:	f7ff fe56 	bl	8003c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40023c00 	.word	0x40023c00

08003f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <HAL_IncTick+0x20>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <HAL_IncTick+0x24>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4413      	add	r3, r2
 8003f78:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <HAL_IncTick+0x24>)
 8003f7a:	6013      	str	r3, [r2, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20000018 	.word	0x20000018
 8003f8c:	20004828 	.word	0x20004828

08003f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return uwTick;
 8003f94:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <HAL_GetTick+0x14>)
 8003f96:	681b      	ldr	r3, [r3, #0]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	20004828 	.word	0x20004828

08003fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fb0:	f7ff ffee 	bl	8003f90 <HAL_GetTick>
 8003fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d005      	beq.n	8003fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <HAL_Delay+0x44>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fce:	bf00      	nop
 8003fd0:	f7ff ffde 	bl	8003f90 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d8f7      	bhi.n	8003fd0 <HAL_Delay+0x28>
  {
  }
}
 8003fe0:	bf00      	nop
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20000018 	.word	0x20000018

08003ff0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e033      	b.n	800406e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff fe26 	bl	8003c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b00      	cmp	r3, #0
 800402c:	d118      	bne.n	8004060 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004036:	f023 0302 	bic.w	r3, r3, #2
 800403a:	f043 0202 	orr.w	r2, r3, #2
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa96 	bl	8004574 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f023 0303 	bic.w	r3, r3, #3
 8004056:	f043 0201 	orr.w	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	641a      	str	r2, [r3, #64]	; 0x40
 800405e:	e001      	b.n	8004064 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800406c:	7bfb      	ldrb	r3, [r7, #15]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_ADC_Start+0x1a>
 800408e:	2302      	movs	r3, #2
 8004090:	e097      	b.n	80041c2 <HAL_ADC_Start+0x14a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d018      	beq.n	80040da <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80040b8:	4b45      	ldr	r3, [pc, #276]	; (80041d0 <HAL_ADC_Start+0x158>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a45      	ldr	r2, [pc, #276]	; (80041d4 <HAL_ADC_Start+0x15c>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	0c9a      	lsrs	r2, r3, #18
 80040c4:	4613      	mov	r3, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	4413      	add	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80040cc:	e002      	b.n	80040d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f9      	bne.n	80040ce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d15f      	bne.n	80041a8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004112:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004126:	d106      	bne.n	8004136 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412c:	f023 0206 	bic.w	r2, r3, #6
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	645a      	str	r2, [r3, #68]	; 0x44
 8004134:	e002      	b.n	800413c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004144:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <HAL_ADC_Start+0x160>)
 8004146:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004150:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10f      	bne.n	800417e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d129      	bne.n	80041c0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800417a:	609a      	str	r2, [r3, #8]
 800417c:	e020      	b.n	80041c0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a16      	ldr	r2, [pc, #88]	; (80041dc <HAL_ADC_Start+0x164>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d11b      	bne.n	80041c0 <HAL_ADC_Start+0x148>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d114      	bne.n	80041c0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80041a4:	609a      	str	r2, [r3, #8]
 80041a6:	e00b      	b.n	80041c0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	f043 0210 	orr.w	r2, r3, #16
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b8:	f043 0201 	orr.w	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000010 	.word	0x20000010
 80041d4:	431bde83 	.word	0x431bde83
 80041d8:	40012300 	.word	0x40012300
 80041dc:	40012000 	.word	0x40012000

080041e0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fc:	d113      	bne.n	8004226 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420c:	d10b      	bne.n	8004226 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f043 0220 	orr.w	r2, r3, #32
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e063      	b.n	80042ee <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004226:	f7ff feb3 	bl	8003f90 <HAL_GetTick>
 800422a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800422c:	e021      	b.n	8004272 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d01d      	beq.n	8004272 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <HAL_ADC_PollForConversion+0x6c>
 800423c:	f7ff fea8 	bl	8003f90 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d212      	bcs.n	8004272 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b02      	cmp	r3, #2
 8004258:	d00b      	beq.n	8004272 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f043 0204 	orr.w	r2, r3, #4
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e03d      	b.n	80042ee <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b02      	cmp	r3, #2
 800427e:	d1d6      	bne.n	800422e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0212 	mvn.w	r2, #18
 8004288:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d123      	bne.n	80042ec <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d11f      	bne.n	80042ec <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d006      	beq.n	80042c8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d111      	bne.n	80042ec <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	f043 0201 	orr.w	r2, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_ADC_ConfigChannel+0x1c>
 8004328:	2302      	movs	r3, #2
 800432a:	e113      	b.n	8004554 <HAL_ADC_ConfigChannel+0x244>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b09      	cmp	r3, #9
 800433a:	d925      	bls.n	8004388 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68d9      	ldr	r1, [r3, #12]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	4613      	mov	r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	4413      	add	r3, r2
 8004350:	3b1e      	subs	r3, #30
 8004352:	2207      	movs	r2, #7
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	43da      	mvns	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	400a      	ands	r2, r1
 8004360:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68d9      	ldr	r1, [r3, #12]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	4618      	mov	r0, r3
 8004374:	4603      	mov	r3, r0
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4403      	add	r3, r0
 800437a:	3b1e      	subs	r3, #30
 800437c:	409a      	lsls	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	60da      	str	r2, [r3, #12]
 8004386:	e022      	b.n	80043ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6919      	ldr	r1, [r3, #16]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	4613      	mov	r3, r2
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	4413      	add	r3, r2
 800439c:	2207      	movs	r2, #7
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43da      	mvns	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	400a      	ands	r2, r1
 80043aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6919      	ldr	r1, [r3, #16]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	4618      	mov	r0, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4403      	add	r3, r0
 80043c4:	409a      	lsls	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b06      	cmp	r3, #6
 80043d4:	d824      	bhi.n	8004420 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	3b05      	subs	r3, #5
 80043e8:	221f      	movs	r2, #31
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43da      	mvns	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	400a      	ands	r2, r1
 80043f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	4618      	mov	r0, r3
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	3b05      	subs	r3, #5
 8004412:	fa00 f203 	lsl.w	r2, r0, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	635a      	str	r2, [r3, #52]	; 0x34
 800441e:	e04c      	b.n	80044ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b0c      	cmp	r3, #12
 8004426:	d824      	bhi.n	8004472 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	3b23      	subs	r3, #35	; 0x23
 800443a:	221f      	movs	r2, #31
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43da      	mvns	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	400a      	ands	r2, r1
 8004448:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	4618      	mov	r0, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	3b23      	subs	r3, #35	; 0x23
 8004464:	fa00 f203 	lsl.w	r2, r0, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	631a      	str	r2, [r3, #48]	; 0x30
 8004470:	e023      	b.n	80044ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	3b41      	subs	r3, #65	; 0x41
 8004484:	221f      	movs	r2, #31
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43da      	mvns	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	400a      	ands	r2, r1
 8004492:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	4618      	mov	r0, r3
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	3b41      	subs	r3, #65	; 0x41
 80044ae:	fa00 f203 	lsl.w	r2, r0, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044ba:	4b29      	ldr	r3, [pc, #164]	; (8004560 <HAL_ADC_ConfigChannel+0x250>)
 80044bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a28      	ldr	r2, [pc, #160]	; (8004564 <HAL_ADC_ConfigChannel+0x254>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d10f      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x1d8>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b12      	cmp	r3, #18
 80044ce:	d10b      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1d      	ldr	r2, [pc, #116]	; (8004564 <HAL_ADC_ConfigChannel+0x254>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d12b      	bne.n	800454a <HAL_ADC_ConfigChannel+0x23a>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <HAL_ADC_ConfigChannel+0x258>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <HAL_ADC_ConfigChannel+0x1f4>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b11      	cmp	r3, #17
 8004502:	d122      	bne.n	800454a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a11      	ldr	r2, [pc, #68]	; (8004568 <HAL_ADC_ConfigChannel+0x258>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d111      	bne.n	800454a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004526:	4b11      	ldr	r3, [pc, #68]	; (800456c <HAL_ADC_ConfigChannel+0x25c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a11      	ldr	r2, [pc, #68]	; (8004570 <HAL_ADC_ConfigChannel+0x260>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	0c9a      	lsrs	r2, r3, #18
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800453c:	e002      	b.n	8004544 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	3b01      	subs	r3, #1
 8004542:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f9      	bne.n	800453e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	40012300 	.word	0x40012300
 8004564:	40012000 	.word	0x40012000
 8004568:	10000012 	.word	0x10000012
 800456c:	20000010 	.word	0x20000010
 8004570:	431bde83 	.word	0x431bde83

08004574 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800457c:	4b79      	ldr	r3, [pc, #484]	; (8004764 <ADC_Init+0x1f0>)
 800457e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	431a      	orrs	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6859      	ldr	r1, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	021a      	lsls	r2, r3, #8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80045cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6859      	ldr	r1, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6899      	ldr	r1, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004606:	4a58      	ldr	r2, [pc, #352]	; (8004768 <ADC_Init+0x1f4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d022      	beq.n	8004652 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800461a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6899      	ldr	r1, [r3, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800463c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6899      	ldr	r1, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	e00f      	b.n	8004672 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004670:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0202 	bic.w	r2, r2, #2
 8004680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6899      	ldr	r1, [r3, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	7e1b      	ldrb	r3, [r3, #24]
 800468c:	005a      	lsls	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01b      	beq.n	80046d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80046be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6859      	ldr	r1, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	3b01      	subs	r3, #1
 80046cc:	035a      	lsls	r2, r3, #13
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	e007      	b.n	80046e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80046f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	3b01      	subs	r3, #1
 8004704:	051a      	lsls	r2, r3, #20
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800471c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6899      	ldr	r1, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800472a:	025a      	lsls	r2, r3, #9
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6899      	ldr	r1, [r3, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	029a      	lsls	r2, r3, #10
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	609a      	str	r2, [r3, #8]
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	40012300 	.word	0x40012300
 8004768:	0f000001 	.word	0x0f000001

0800476c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <__NVIC_SetPriorityGrouping+0x44>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004788:	4013      	ands	r3, r2
 800478a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800479c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800479e:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <__NVIC_SetPriorityGrouping+0x44>)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	60d3      	str	r3, [r2, #12]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	e000ed00 	.word	0xe000ed00

080047b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047b8:	4b04      	ldr	r3, [pc, #16]	; (80047cc <__NVIC_GetPriorityGrouping+0x18>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	0a1b      	lsrs	r3, r3, #8
 80047be:	f003 0307 	and.w	r3, r3, #7
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	e000ed00 	.word	0xe000ed00

080047d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	db0b      	blt.n	80047fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	f003 021f 	and.w	r2, r3, #31
 80047e8:	4907      	ldr	r1, [pc, #28]	; (8004808 <__NVIC_EnableIRQ+0x38>)
 80047ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	2001      	movs	r0, #1
 80047f2:	fa00 f202 	lsl.w	r2, r0, r2
 80047f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	e000e100 	.word	0xe000e100

0800480c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	6039      	str	r1, [r7, #0]
 8004816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481c:	2b00      	cmp	r3, #0
 800481e:	db0a      	blt.n	8004836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	b2da      	uxtb	r2, r3
 8004824:	490c      	ldr	r1, [pc, #48]	; (8004858 <__NVIC_SetPriority+0x4c>)
 8004826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482a:	0112      	lsls	r2, r2, #4
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	440b      	add	r3, r1
 8004830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004834:	e00a      	b.n	800484c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	b2da      	uxtb	r2, r3
 800483a:	4908      	ldr	r1, [pc, #32]	; (800485c <__NVIC_SetPriority+0x50>)
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	3b04      	subs	r3, #4
 8004844:	0112      	lsls	r2, r2, #4
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	440b      	add	r3, r1
 800484a:	761a      	strb	r2, [r3, #24]
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	e000e100 	.word	0xe000e100
 800485c:	e000ed00 	.word	0xe000ed00

08004860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004860:	b480      	push	{r7}
 8004862:	b089      	sub	sp, #36	; 0x24
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f1c3 0307 	rsb	r3, r3, #7
 800487a:	2b04      	cmp	r3, #4
 800487c:	bf28      	it	cs
 800487e:	2304      	movcs	r3, #4
 8004880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3304      	adds	r3, #4
 8004886:	2b06      	cmp	r3, #6
 8004888:	d902      	bls.n	8004890 <NVIC_EncodePriority+0x30>
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3b03      	subs	r3, #3
 800488e:	e000      	b.n	8004892 <NVIC_EncodePriority+0x32>
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004894:	f04f 32ff 	mov.w	r2, #4294967295
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	43da      	mvns	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	401a      	ands	r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048a8:	f04f 31ff 	mov.w	r1, #4294967295
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	43d9      	mvns	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b8:	4313      	orrs	r3, r2
         );
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3724      	adds	r7, #36	; 0x24
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff ff4c 	bl	800476c <__NVIC_SetPriorityGrouping>
}
 80048d4:	bf00      	nop
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048ee:	f7ff ff61 	bl	80047b4 <__NVIC_GetPriorityGrouping>
 80048f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	6978      	ldr	r0, [r7, #20]
 80048fa:	f7ff ffb1 	bl	8004860 <NVIC_EncodePriority>
 80048fe:	4602      	mov	r2, r0
 8004900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004904:	4611      	mov	r1, r2
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff ff80 	bl	800480c <__NVIC_SetPriority>
}
 800490c:	bf00      	nop
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	4603      	mov	r3, r0
 800491c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800491e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff ff54 	bl	80047d0 <__NVIC_EnableIRQ>
}
 8004928:	bf00      	nop
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	; 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004942:	2300      	movs	r3, #0
 8004944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	e159      	b.n	8004c00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800494c:	2201      	movs	r2, #1
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4013      	ands	r3, r2
 800495e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	429a      	cmp	r2, r3
 8004966:	f040 8148 	bne.w	8004bfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b01      	cmp	r3, #1
 8004974:	d005      	beq.n	8004982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800497e:	2b02      	cmp	r3, #2
 8004980:	d130      	bne.n	80049e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	2203      	movs	r2, #3
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4013      	ands	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049b8:	2201      	movs	r2, #1
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	f003 0201 	and.w	r2, r3, #1
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d017      	beq.n	8004a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	2203      	movs	r2, #3
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d123      	bne.n	8004a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	08da      	lsrs	r2, r3, #3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3208      	adds	r2, #8
 8004a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	220f      	movs	r2, #15
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	08da      	lsrs	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3208      	adds	r2, #8
 8004a6e:	69b9      	ldr	r1, [r7, #24]
 8004a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	2203      	movs	r2, #3
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	43db      	mvns	r3, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 0203 	and.w	r2, r3, #3
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80a2 	beq.w	8004bfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	4b57      	ldr	r3, [pc, #348]	; (8004c18 <HAL_GPIO_Init+0x2e8>)
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	4a56      	ldr	r2, [pc, #344]	; (8004c18 <HAL_GPIO_Init+0x2e8>)
 8004ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ac6:	4b54      	ldr	r3, [pc, #336]	; (8004c18 <HAL_GPIO_Init+0x2e8>)
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ad2:	4a52      	ldr	r2, [pc, #328]	; (8004c1c <HAL_GPIO_Init+0x2ec>)
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	3302      	adds	r3, #2
 8004ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	220f      	movs	r2, #15
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	43db      	mvns	r3, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a49      	ldr	r2, [pc, #292]	; (8004c20 <HAL_GPIO_Init+0x2f0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d019      	beq.n	8004b32 <HAL_GPIO_Init+0x202>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a48      	ldr	r2, [pc, #288]	; (8004c24 <HAL_GPIO_Init+0x2f4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d013      	beq.n	8004b2e <HAL_GPIO_Init+0x1fe>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a47      	ldr	r2, [pc, #284]	; (8004c28 <HAL_GPIO_Init+0x2f8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00d      	beq.n	8004b2a <HAL_GPIO_Init+0x1fa>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a46      	ldr	r2, [pc, #280]	; (8004c2c <HAL_GPIO_Init+0x2fc>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <HAL_GPIO_Init+0x1f6>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a45      	ldr	r2, [pc, #276]	; (8004c30 <HAL_GPIO_Init+0x300>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d101      	bne.n	8004b22 <HAL_GPIO_Init+0x1f2>
 8004b1e:	2304      	movs	r3, #4
 8004b20:	e008      	b.n	8004b34 <HAL_GPIO_Init+0x204>
 8004b22:	2307      	movs	r3, #7
 8004b24:	e006      	b.n	8004b34 <HAL_GPIO_Init+0x204>
 8004b26:	2303      	movs	r3, #3
 8004b28:	e004      	b.n	8004b34 <HAL_GPIO_Init+0x204>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e002      	b.n	8004b34 <HAL_GPIO_Init+0x204>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <HAL_GPIO_Init+0x204>
 8004b32:	2300      	movs	r3, #0
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	f002 0203 	and.w	r2, r2, #3
 8004b3a:	0092      	lsls	r2, r2, #2
 8004b3c:	4093      	lsls	r3, r2
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b44:	4935      	ldr	r1, [pc, #212]	; (8004c1c <HAL_GPIO_Init+0x2ec>)
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b52:	4b38      	ldr	r3, [pc, #224]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b76:	4a2f      	ldr	r2, [pc, #188]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004b7c:	4b2d      	ldr	r3, [pc, #180]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	43db      	mvns	r3, r3
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ba0:	4a24      	ldr	r2, [pc, #144]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ba6:	4b23      	ldr	r3, [pc, #140]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bca:	4a1a      	ldr	r2, [pc, #104]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bd0:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bf4:	4a0f      	ldr	r2, [pc, #60]	; (8004c34 <HAL_GPIO_Init+0x304>)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	2b0f      	cmp	r3, #15
 8004c04:	f67f aea2 	bls.w	800494c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c08:	bf00      	nop
 8004c0a:	bf00      	nop
 8004c0c:	3724      	adds	r7, #36	; 0x24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40013800 	.word	0x40013800
 8004c20:	40020000 	.word	0x40020000
 8004c24:	40020400 	.word	0x40020400
 8004c28:	40020800 	.word	0x40020800
 8004c2c:	40020c00 	.word	0x40020c00
 8004c30:	40021000 	.word	0x40021000
 8004c34:	40013c00 	.word	0x40013c00

08004c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	887b      	ldrh	r3, [r7, #2]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c50:	2301      	movs	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
 8004c54:	e001      	b.n	8004c5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c56:	2300      	movs	r3, #0
 8004c58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	807b      	strh	r3, [r7, #2]
 8004c74:	4613      	mov	r3, r2
 8004c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c78:	787b      	ldrb	r3, [r7, #1]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c7e:	887a      	ldrh	r2, [r7, #2]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c84:	e003      	b.n	8004c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c86:	887b      	ldrh	r3, [r7, #2]
 8004c88:	041a      	lsls	r2, r3, #16
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	619a      	str	r2, [r3, #24]
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b085      	sub	sp, #20
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cac:	887a      	ldrh	r2, [r7, #2]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	041a      	lsls	r2, r3, #16
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	43d9      	mvns	r1, r3
 8004cb8:	887b      	ldrh	r3, [r7, #2]
 8004cba:	400b      	ands	r3, r1
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	619a      	str	r2, [r3, #24]
}
 8004cc2:	bf00      	nop
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
	...

08004cd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e264      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d075      	beq.n	8004dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cee:	4ba3      	ldr	r3, [pc, #652]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d00c      	beq.n	8004d14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cfa:	4ba0      	ldr	r3, [pc, #640]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d112      	bne.n	8004d2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d06:	4b9d      	ldr	r3, [pc, #628]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d12:	d10b      	bne.n	8004d2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d14:	4b99      	ldr	r3, [pc, #612]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d05b      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x108>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d157      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e23f      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d34:	d106      	bne.n	8004d44 <HAL_RCC_OscConfig+0x74>
 8004d36:	4b91      	ldr	r3, [pc, #580]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a90      	ldr	r2, [pc, #576]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	e01d      	b.n	8004d80 <HAL_RCC_OscConfig+0xb0>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d4c:	d10c      	bne.n	8004d68 <HAL_RCC_OscConfig+0x98>
 8004d4e:	4b8b      	ldr	r3, [pc, #556]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a8a      	ldr	r2, [pc, #552]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	4b88      	ldr	r3, [pc, #544]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a87      	ldr	r2, [pc, #540]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	e00b      	b.n	8004d80 <HAL_RCC_OscConfig+0xb0>
 8004d68:	4b84      	ldr	r3, [pc, #528]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a83      	ldr	r2, [pc, #524]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	4b81      	ldr	r3, [pc, #516]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a80      	ldr	r2, [pc, #512]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d013      	beq.n	8004db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d88:	f7ff f902 	bl	8003f90 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d90:	f7ff f8fe 	bl	8003f90 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	; 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e204      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da2:	4b76      	ldr	r3, [pc, #472]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0f0      	beq.n	8004d90 <HAL_RCC_OscConfig+0xc0>
 8004dae:	e014      	b.n	8004dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db0:	f7ff f8ee 	bl	8003f90 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004db8:	f7ff f8ea 	bl	8003f90 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b64      	cmp	r3, #100	; 0x64
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e1f0      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dca:	4b6c      	ldr	r3, [pc, #432]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0xe8>
 8004dd6:	e000      	b.n	8004dda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d063      	beq.n	8004eae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004de6:	4b65      	ldr	r3, [pc, #404]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00b      	beq.n	8004e0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004df2:	4b62      	ldr	r3, [pc, #392]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d11c      	bne.n	8004e38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dfe:	4b5f      	ldr	r3, [pc, #380]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d116      	bne.n	8004e38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e0a:	4b5c      	ldr	r3, [pc, #368]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <HAL_RCC_OscConfig+0x152>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d001      	beq.n	8004e22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e1c4      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e22:	4b56      	ldr	r3, [pc, #344]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	4952      	ldr	r1, [pc, #328]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e36:	e03a      	b.n	8004eae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d020      	beq.n	8004e82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e40:	4b4f      	ldr	r3, [pc, #316]	; (8004f80 <HAL_RCC_OscConfig+0x2b0>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e46:	f7ff f8a3 	bl	8003f90 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e4e:	f7ff f89f 	bl	8003f90 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e1a5      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e60:	4b46      	ldr	r3, [pc, #280]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0f0      	beq.n	8004e4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6c:	4b43      	ldr	r3, [pc, #268]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4940      	ldr	r1, [pc, #256]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	600b      	str	r3, [r1, #0]
 8004e80:	e015      	b.n	8004eae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e82:	4b3f      	ldr	r3, [pc, #252]	; (8004f80 <HAL_RCC_OscConfig+0x2b0>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e88:	f7ff f882 	bl	8003f90 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e90:	f7ff f87e 	bl	8003f90 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e184      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ea2:	4b36      	ldr	r3, [pc, #216]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0308 	and.w	r3, r3, #8
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d030      	beq.n	8004f1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d016      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ec2:	4b30      	ldr	r3, [pc, #192]	; (8004f84 <HAL_RCC_OscConfig+0x2b4>)
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7ff f862 	bl	8003f90 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ed0:	f7ff f85e 	bl	8003f90 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e164      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ee2:	4b26      	ldr	r3, [pc, #152]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x200>
 8004eee:	e015      	b.n	8004f1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ef0:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <HAL_RCC_OscConfig+0x2b4>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef6:	f7ff f84b 	bl	8003f90 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004efe:	f7ff f847 	bl	8003f90 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e14d      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f10:	4b1a      	ldr	r3, [pc, #104]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1f0      	bne.n	8004efe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80a0 	beq.w	800506a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f2e:	4b13      	ldr	r3, [pc, #76]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10f      	bne.n	8004f5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60bb      	str	r3, [r7, #8]
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	4a0e      	ldr	r2, [pc, #56]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f48:	6413      	str	r3, [r2, #64]	; 0x40
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <HAL_RCC_OscConfig+0x2ac>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f52:	60bb      	str	r3, [r7, #8]
 8004f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f56:	2301      	movs	r3, #1
 8004f58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5a:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <HAL_RCC_OscConfig+0x2b8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d121      	bne.n	8004faa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f66:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <HAL_RCC_OscConfig+0x2b8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a07      	ldr	r2, [pc, #28]	; (8004f88 <HAL_RCC_OscConfig+0x2b8>)
 8004f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f72:	f7ff f80d 	bl	8003f90 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f78:	e011      	b.n	8004f9e <HAL_RCC_OscConfig+0x2ce>
 8004f7a:	bf00      	nop
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	42470000 	.word	0x42470000
 8004f84:	42470e80 	.word	0x42470e80
 8004f88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f8c:	f7ff f800 	bl	8003f90 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e106      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9e:	4b85      	ldr	r3, [pc, #532]	; (80051b4 <HAL_RCC_OscConfig+0x4e4>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d106      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x2f0>
 8004fb2:	4b81      	ldr	r3, [pc, #516]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb6:	4a80      	ldr	r2, [pc, #512]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 8004fb8:	f043 0301 	orr.w	r3, r3, #1
 8004fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004fbe:	e01c      	b.n	8004ffa <HAL_RCC_OscConfig+0x32a>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	2b05      	cmp	r3, #5
 8004fc6:	d10c      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x312>
 8004fc8:	4b7b      	ldr	r3, [pc, #492]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 8004fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fcc:	4a7a      	ldr	r2, [pc, #488]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 8004fce:	f043 0304 	orr.w	r3, r3, #4
 8004fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fd4:	4b78      	ldr	r3, [pc, #480]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 8004fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd8:	4a77      	ldr	r2, [pc, #476]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 8004fda:	f043 0301 	orr.w	r3, r3, #1
 8004fde:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe0:	e00b      	b.n	8004ffa <HAL_RCC_OscConfig+0x32a>
 8004fe2:	4b75      	ldr	r3, [pc, #468]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe6:	4a74      	ldr	r2, [pc, #464]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 8004fe8:	f023 0301 	bic.w	r3, r3, #1
 8004fec:	6713      	str	r3, [r2, #112]	; 0x70
 8004fee:	4b72      	ldr	r3, [pc, #456]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff2:	4a71      	ldr	r2, [pc, #452]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 8004ff4:	f023 0304 	bic.w	r3, r3, #4
 8004ff8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d015      	beq.n	800502e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005002:	f7fe ffc5 	bl	8003f90 <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005008:	e00a      	b.n	8005020 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800500a:	f7fe ffc1 	bl	8003f90 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	f241 3288 	movw	r2, #5000	; 0x1388
 8005018:	4293      	cmp	r3, r2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e0c5      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005020:	4b65      	ldr	r3, [pc, #404]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 8005022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0ee      	beq.n	800500a <HAL_RCC_OscConfig+0x33a>
 800502c:	e014      	b.n	8005058 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800502e:	f7fe ffaf 	bl	8003f90 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005034:	e00a      	b.n	800504c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005036:	f7fe ffab 	bl	8003f90 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	f241 3288 	movw	r2, #5000	; 0x1388
 8005044:	4293      	cmp	r3, r2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e0af      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800504c:	4b5a      	ldr	r3, [pc, #360]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 800504e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1ee      	bne.n	8005036 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005058:	7dfb      	ldrb	r3, [r7, #23]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d105      	bne.n	800506a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800505e:	4b56      	ldr	r3, [pc, #344]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	4a55      	ldr	r2, [pc, #340]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 8005064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005068:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 809b 	beq.w	80051aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005074:	4b50      	ldr	r3, [pc, #320]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 030c 	and.w	r3, r3, #12
 800507c:	2b08      	cmp	r3, #8
 800507e:	d05c      	beq.n	800513a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d141      	bne.n	800510c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005088:	4b4c      	ldr	r3, [pc, #304]	; (80051bc <HAL_RCC_OscConfig+0x4ec>)
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508e:	f7fe ff7f 	bl	8003f90 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005096:	f7fe ff7b 	bl	8003f90 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e081      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a8:	4b43      	ldr	r3, [pc, #268]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1f0      	bne.n	8005096 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69da      	ldr	r2, [r3, #28]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	019b      	lsls	r3, r3, #6
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	3b01      	subs	r3, #1
 80050ce:	041b      	lsls	r3, r3, #16
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	061b      	lsls	r3, r3, #24
 80050d8:	4937      	ldr	r1, [pc, #220]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050de:	4b37      	ldr	r3, [pc, #220]	; (80051bc <HAL_RCC_OscConfig+0x4ec>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e4:	f7fe ff54 	bl	8003f90 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fe ff50 	bl	8003f90 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e056      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050fe:	4b2e      	ldr	r3, [pc, #184]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0x41c>
 800510a:	e04e      	b.n	80051aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510c:	4b2b      	ldr	r3, [pc, #172]	; (80051bc <HAL_RCC_OscConfig+0x4ec>)
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005112:	f7fe ff3d 	bl	8003f90 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800511a:	f7fe ff39 	bl	8003f90 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e03f      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800512c:	4b22      	ldr	r3, [pc, #136]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f0      	bne.n	800511a <HAL_RCC_OscConfig+0x44a>
 8005138:	e037      	b.n	80051aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e032      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005146:	4b1c      	ldr	r3, [pc, #112]	; (80051b8 <HAL_RCC_OscConfig+0x4e8>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d028      	beq.n	80051a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800515e:	429a      	cmp	r2, r3
 8005160:	d121      	bne.n	80051a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516c:	429a      	cmp	r2, r3
 800516e:	d11a      	bne.n	80051a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005176:	4013      	ands	r3, r2
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800517c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800517e:	4293      	cmp	r3, r2
 8005180:	d111      	bne.n	80051a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	3b01      	subs	r3, #1
 8005190:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005192:	429a      	cmp	r2, r3
 8005194:	d107      	bne.n	80051a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d001      	beq.n	80051aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40007000 	.word	0x40007000
 80051b8:	40023800 	.word	0x40023800
 80051bc:	42470060 	.word	0x42470060

080051c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0cc      	b.n	800536e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051d4:	4b68      	ldr	r3, [pc, #416]	; (8005378 <HAL_RCC_ClockConfig+0x1b8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d90c      	bls.n	80051fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e2:	4b65      	ldr	r3, [pc, #404]	; (8005378 <HAL_RCC_ClockConfig+0x1b8>)
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ea:	4b63      	ldr	r3, [pc, #396]	; (8005378 <HAL_RCC_ClockConfig+0x1b8>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d001      	beq.n	80051fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e0b8      	b.n	800536e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d020      	beq.n	800524a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d005      	beq.n	8005220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005214:	4b59      	ldr	r3, [pc, #356]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	4a58      	ldr	r2, [pc, #352]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 800521a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800521e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800522c:	4b53      	ldr	r3, [pc, #332]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	4a52      	ldr	r2, [pc, #328]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 8005232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005238:	4b50      	ldr	r3, [pc, #320]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	494d      	ldr	r1, [pc, #308]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 8005246:	4313      	orrs	r3, r2
 8005248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d044      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d107      	bne.n	800526e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800525e:	4b47      	ldr	r3, [pc, #284]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d119      	bne.n	800529e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e07f      	b.n	800536e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d003      	beq.n	800527e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800527a:	2b03      	cmp	r3, #3
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800527e:	4b3f      	ldr	r3, [pc, #252]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e06f      	b.n	800536e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528e:	4b3b      	ldr	r3, [pc, #236]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e067      	b.n	800536e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800529e:	4b37      	ldr	r3, [pc, #220]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f023 0203 	bic.w	r2, r3, #3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	4934      	ldr	r1, [pc, #208]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052b0:	f7fe fe6e 	bl	8003f90 <HAL_GetTick>
 80052b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b6:	e00a      	b.n	80052ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b8:	f7fe fe6a 	bl	8003f90 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e04f      	b.n	800536e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	4b2b      	ldr	r3, [pc, #172]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 020c 	and.w	r2, r3, #12
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	429a      	cmp	r2, r3
 80052de:	d1eb      	bne.n	80052b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052e0:	4b25      	ldr	r3, [pc, #148]	; (8005378 <HAL_RCC_ClockConfig+0x1b8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d20c      	bcs.n	8005308 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b22      	ldr	r3, [pc, #136]	; (8005378 <HAL_RCC_ClockConfig+0x1b8>)
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f6:	4b20      	ldr	r3, [pc, #128]	; (8005378 <HAL_RCC_ClockConfig+0x1b8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d001      	beq.n	8005308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e032      	b.n	800536e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b00      	cmp	r3, #0
 8005312:	d008      	beq.n	8005326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005314:	4b19      	ldr	r3, [pc, #100]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	4916      	ldr	r1, [pc, #88]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	4313      	orrs	r3, r2
 8005324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d009      	beq.n	8005346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	490e      	ldr	r1, [pc, #56]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 8005342:	4313      	orrs	r3, r2
 8005344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005346:	f000 f821 	bl	800538c <HAL_RCC_GetSysClockFreq>
 800534a:	4602      	mov	r2, r0
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	091b      	lsrs	r3, r3, #4
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	490a      	ldr	r1, [pc, #40]	; (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 8005358:	5ccb      	ldrb	r3, [r1, r3]
 800535a:	fa22 f303 	lsr.w	r3, r2, r3
 800535e:	4a09      	ldr	r2, [pc, #36]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 8005360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005362:	4b09      	ldr	r3, [pc, #36]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe fce6 	bl	8003d38 <HAL_InitTick>

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40023c00 	.word	0x40023c00
 800537c:	40023800 	.word	0x40023800
 8005380:	080097fc 	.word	0x080097fc
 8005384:	20000010 	.word	0x20000010
 8005388:	20000014 	.word	0x20000014

0800538c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800538c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	607b      	str	r3, [r7, #4]
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	2300      	movs	r3, #0
 800539e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053a4:	4b67      	ldr	r3, [pc, #412]	; (8005544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 030c 	and.w	r3, r3, #12
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d00d      	beq.n	80053cc <HAL_RCC_GetSysClockFreq+0x40>
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	f200 80bd 	bhi.w	8005530 <HAL_RCC_GetSysClockFreq+0x1a4>
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <HAL_RCC_GetSysClockFreq+0x34>
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d003      	beq.n	80053c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80053be:	e0b7      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053c0:	4b61      	ldr	r3, [pc, #388]	; (8005548 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80053c2:	60bb      	str	r3, [r7, #8]
       break;
 80053c4:	e0b7      	b.n	8005536 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053c6:	4b61      	ldr	r3, [pc, #388]	; (800554c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80053c8:	60bb      	str	r3, [r7, #8]
      break;
 80053ca:	e0b4      	b.n	8005536 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053cc:	4b5d      	ldr	r3, [pc, #372]	; (8005544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053d6:	4b5b      	ldr	r3, [pc, #364]	; (8005544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d04d      	beq.n	800547e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053e2:	4b58      	ldr	r3, [pc, #352]	; (8005544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	099b      	lsrs	r3, r3, #6
 80053e8:	461a      	mov	r2, r3
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053f2:	f04f 0100 	mov.w	r1, #0
 80053f6:	ea02 0800 	and.w	r8, r2, r0
 80053fa:	ea03 0901 	and.w	r9, r3, r1
 80053fe:	4640      	mov	r0, r8
 8005400:	4649      	mov	r1, r9
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	f04f 0300 	mov.w	r3, #0
 800540a:	014b      	lsls	r3, r1, #5
 800540c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005410:	0142      	lsls	r2, r0, #5
 8005412:	4610      	mov	r0, r2
 8005414:	4619      	mov	r1, r3
 8005416:	ebb0 0008 	subs.w	r0, r0, r8
 800541a:	eb61 0109 	sbc.w	r1, r1, r9
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	018b      	lsls	r3, r1, #6
 8005428:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800542c:	0182      	lsls	r2, r0, #6
 800542e:	1a12      	subs	r2, r2, r0
 8005430:	eb63 0301 	sbc.w	r3, r3, r1
 8005434:	f04f 0000 	mov.w	r0, #0
 8005438:	f04f 0100 	mov.w	r1, #0
 800543c:	00d9      	lsls	r1, r3, #3
 800543e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005442:	00d0      	lsls	r0, r2, #3
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	eb12 0208 	adds.w	r2, r2, r8
 800544c:	eb43 0309 	adc.w	r3, r3, r9
 8005450:	f04f 0000 	mov.w	r0, #0
 8005454:	f04f 0100 	mov.w	r1, #0
 8005458:	0259      	lsls	r1, r3, #9
 800545a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800545e:	0250      	lsls	r0, r2, #9
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4610      	mov	r0, r2
 8005466:	4619      	mov	r1, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	461a      	mov	r2, r3
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	f7fa ff0e 	bl	8000290 <__aeabi_uldivmod>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4613      	mov	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	e04a      	b.n	8005514 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800547e:	4b31      	ldr	r3, [pc, #196]	; (8005544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	099b      	lsrs	r3, r3, #6
 8005484:	461a      	mov	r2, r3
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800548e:	f04f 0100 	mov.w	r1, #0
 8005492:	ea02 0400 	and.w	r4, r2, r0
 8005496:	ea03 0501 	and.w	r5, r3, r1
 800549a:	4620      	mov	r0, r4
 800549c:	4629      	mov	r1, r5
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	014b      	lsls	r3, r1, #5
 80054a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054ac:	0142      	lsls	r2, r0, #5
 80054ae:	4610      	mov	r0, r2
 80054b0:	4619      	mov	r1, r3
 80054b2:	1b00      	subs	r0, r0, r4
 80054b4:	eb61 0105 	sbc.w	r1, r1, r5
 80054b8:	f04f 0200 	mov.w	r2, #0
 80054bc:	f04f 0300 	mov.w	r3, #0
 80054c0:	018b      	lsls	r3, r1, #6
 80054c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80054c6:	0182      	lsls	r2, r0, #6
 80054c8:	1a12      	subs	r2, r2, r0
 80054ca:	eb63 0301 	sbc.w	r3, r3, r1
 80054ce:	f04f 0000 	mov.w	r0, #0
 80054d2:	f04f 0100 	mov.w	r1, #0
 80054d6:	00d9      	lsls	r1, r3, #3
 80054d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054dc:	00d0      	lsls	r0, r2, #3
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	1912      	adds	r2, r2, r4
 80054e4:	eb45 0303 	adc.w	r3, r5, r3
 80054e8:	f04f 0000 	mov.w	r0, #0
 80054ec:	f04f 0100 	mov.w	r1, #0
 80054f0:	0299      	lsls	r1, r3, #10
 80054f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80054f6:	0290      	lsls	r0, r2, #10
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4610      	mov	r0, r2
 80054fe:	4619      	mov	r1, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	461a      	mov	r2, r3
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	f7fa fec2 	bl	8000290 <__aeabi_uldivmod>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4613      	mov	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	0c1b      	lsrs	r3, r3, #16
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	3301      	adds	r3, #1
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	fbb2 f3f3 	udiv	r3, r2, r3
 800552c:	60bb      	str	r3, [r7, #8]
      break;
 800552e:	e002      	b.n	8005536 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005532:	60bb      	str	r3, [r7, #8]
      break;
 8005534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005536:	68bb      	ldr	r3, [r7, #8]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005542:	bf00      	nop
 8005544:	40023800 	.word	0x40023800
 8005548:	00f42400 	.word	0x00f42400
 800554c:	007a1200 	.word	0x007a1200

08005550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005554:	4b03      	ldr	r3, [pc, #12]	; (8005564 <HAL_RCC_GetHCLKFreq+0x14>)
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20000010 	.word	0x20000010

08005568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800556c:	f7ff fff0 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	0b5b      	lsrs	r3, r3, #13
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	4903      	ldr	r1, [pc, #12]	; (800558c <HAL_RCC_GetPCLK2Freq+0x24>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40023800 	.word	0x40023800
 800558c:	0800980c 	.word	0x0800980c

08005590 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	220f      	movs	r2, #15
 800559e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055a0:	4b12      	ldr	r3, [pc, #72]	; (80055ec <HAL_RCC_GetClockConfig+0x5c>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 0203 	and.w	r2, r3, #3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055ac:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <HAL_RCC_GetClockConfig+0x5c>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <HAL_RCC_GetClockConfig+0x5c>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80055c4:	4b09      	ldr	r3, [pc, #36]	; (80055ec <HAL_RCC_GetClockConfig+0x5c>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	08db      	lsrs	r3, r3, #3
 80055ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055d2:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <HAL_RCC_GetClockConfig+0x60>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0207 	and.w	r2, r3, #7
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	601a      	str	r2, [r3, #0]
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40023800 	.word	0x40023800
 80055f0:	40023c00 	.word	0x40023c00

080055f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e041      	b.n	800568a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fe fb64 	bl	8003ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	4619      	mov	r1, r3
 8005632:	4610      	mov	r0, r2
 8005634:	f000 fa88 	bl	8005b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d001      	beq.n	80056ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e044      	b.n	8005736 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1e      	ldr	r2, [pc, #120]	; (8005744 <HAL_TIM_Base_Start_IT+0xb0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d018      	beq.n	8005700 <HAL_TIM_Base_Start_IT+0x6c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d6:	d013      	beq.n	8005700 <HAL_TIM_Base_Start_IT+0x6c>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a1a      	ldr	r2, [pc, #104]	; (8005748 <HAL_TIM_Base_Start_IT+0xb4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00e      	beq.n	8005700 <HAL_TIM_Base_Start_IT+0x6c>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a19      	ldr	r2, [pc, #100]	; (800574c <HAL_TIM_Base_Start_IT+0xb8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d009      	beq.n	8005700 <HAL_TIM_Base_Start_IT+0x6c>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a17      	ldr	r2, [pc, #92]	; (8005750 <HAL_TIM_Base_Start_IT+0xbc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d004      	beq.n	8005700 <HAL_TIM_Base_Start_IT+0x6c>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a16      	ldr	r2, [pc, #88]	; (8005754 <HAL_TIM_Base_Start_IT+0xc0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d111      	bne.n	8005724 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b06      	cmp	r3, #6
 8005710:	d010      	beq.n	8005734 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0201 	orr.w	r2, r2, #1
 8005720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005722:	e007      	b.n	8005734 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40010000 	.word	0x40010000
 8005748:	40000400 	.word	0x40000400
 800574c:	40000800 	.word	0x40000800
 8005750:	40000c00 	.word	0x40000c00
 8005754:	40014000 	.word	0x40014000

08005758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b02      	cmp	r3, #2
 800576c:	d122      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b02      	cmp	r3, #2
 800577a:	d11b      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0202 	mvn.w	r2, #2
 8005784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9b5 	bl	8005b0a <HAL_TIM_IC_CaptureCallback>
 80057a0:	e005      	b.n	80057ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f9a7 	bl	8005af6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f9b8 	bl	8005b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d122      	bne.n	8005808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d11b      	bne.n	8005808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0204 	mvn.w	r2, #4
 80057d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2202      	movs	r2, #2
 80057de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f98b 	bl	8005b0a <HAL_TIM_IC_CaptureCallback>
 80057f4:	e005      	b.n	8005802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f97d 	bl	8005af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f98e 	bl	8005b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b08      	cmp	r3, #8
 8005814:	d122      	bne.n	800585c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b08      	cmp	r3, #8
 8005822:	d11b      	bne.n	800585c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0208 	mvn.w	r2, #8
 800582c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2204      	movs	r2, #4
 8005832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f961 	bl	8005b0a <HAL_TIM_IC_CaptureCallback>
 8005848:	e005      	b.n	8005856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f953 	bl	8005af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f964 	bl	8005b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	2b10      	cmp	r3, #16
 8005868:	d122      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b10      	cmp	r3, #16
 8005876:	d11b      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0210 	mvn.w	r2, #16
 8005880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2208      	movs	r2, #8
 8005886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f937 	bl	8005b0a <HAL_TIM_IC_CaptureCallback>
 800589c:	e005      	b.n	80058aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f929 	bl	8005af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f93a 	bl	8005b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d10e      	bne.n	80058dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d107      	bne.n	80058dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0201 	mvn.w	r2, #1
 80058d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fd fe64 	bl	80035a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e6:	2b80      	cmp	r3, #128	; 0x80
 80058e8:	d10e      	bne.n	8005908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f4:	2b80      	cmp	r3, #128	; 0x80
 80058f6:	d107      	bne.n	8005908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fab2 	bl	8005e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005912:	2b40      	cmp	r3, #64	; 0x40
 8005914:	d10e      	bne.n	8005934 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005920:	2b40      	cmp	r3, #64	; 0x40
 8005922:	d107      	bne.n	8005934 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800592c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f8ff 	bl	8005b32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b20      	cmp	r3, #32
 8005940:	d10e      	bne.n	8005960 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0320 	and.w	r3, r3, #32
 800594c:	2b20      	cmp	r3, #32
 800594e:	d107      	bne.n	8005960 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0220 	mvn.w	r2, #32
 8005958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fa7c 	bl	8005e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005960:	bf00      	nop
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIM_ConfigClockSource+0x1c>
 8005980:	2302      	movs	r3, #2
 8005982:	e0b4      	b.n	8005aee <HAL_TIM_ConfigClockSource+0x186>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059bc:	d03e      	beq.n	8005a3c <HAL_TIM_ConfigClockSource+0xd4>
 80059be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059c2:	f200 8087 	bhi.w	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ca:	f000 8086 	beq.w	8005ada <HAL_TIM_ConfigClockSource+0x172>
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d2:	d87f      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059d4:	2b70      	cmp	r3, #112	; 0x70
 80059d6:	d01a      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0xa6>
 80059d8:	2b70      	cmp	r3, #112	; 0x70
 80059da:	d87b      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059dc:	2b60      	cmp	r3, #96	; 0x60
 80059de:	d050      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x11a>
 80059e0:	2b60      	cmp	r3, #96	; 0x60
 80059e2:	d877      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059e4:	2b50      	cmp	r3, #80	; 0x50
 80059e6:	d03c      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0xfa>
 80059e8:	2b50      	cmp	r3, #80	; 0x50
 80059ea:	d873      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059ec:	2b40      	cmp	r3, #64	; 0x40
 80059ee:	d058      	beq.n	8005aa2 <HAL_TIM_ConfigClockSource+0x13a>
 80059f0:	2b40      	cmp	r3, #64	; 0x40
 80059f2:	d86f      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059f4:	2b30      	cmp	r3, #48	; 0x30
 80059f6:	d064      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 80059f8:	2b30      	cmp	r3, #48	; 0x30
 80059fa:	d86b      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d060      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d867      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d05c      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d05a      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a0c:	e062      	b.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6899      	ldr	r1, [r3, #8]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f000 f98d 	bl	8005d3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	609a      	str	r2, [r3, #8]
      break;
 8005a3a:	e04f      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	6899      	ldr	r1, [r3, #8]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f000 f976 	bl	8005d3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a5e:	609a      	str	r2, [r3, #8]
      break;
 8005a60:	e03c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6818      	ldr	r0, [r3, #0]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6859      	ldr	r1, [r3, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f000 f8ea 	bl	8005c48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2150      	movs	r1, #80	; 0x50
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 f943 	bl	8005d06 <TIM_ITRx_SetConfig>
      break;
 8005a80:	e02c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6859      	ldr	r1, [r3, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f000 f909 	bl	8005ca6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2160      	movs	r1, #96	; 0x60
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 f933 	bl	8005d06 <TIM_ITRx_SetConfig>
      break;
 8005aa0:	e01c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6859      	ldr	r1, [r3, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f000 f8ca 	bl	8005c48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2140      	movs	r1, #64	; 0x40
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 f923 	bl	8005d06 <TIM_ITRx_SetConfig>
      break;
 8005ac0:	e00c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f000 f91a 	bl	8005d06 <TIM_ITRx_SetConfig>
      break;
 8005ad2:	e003      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad8:	e000      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a34      	ldr	r2, [pc, #208]	; (8005c2c <TIM_Base_SetConfig+0xe4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00f      	beq.n	8005b80 <TIM_Base_SetConfig+0x38>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b66:	d00b      	beq.n	8005b80 <TIM_Base_SetConfig+0x38>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a31      	ldr	r2, [pc, #196]	; (8005c30 <TIM_Base_SetConfig+0xe8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d007      	beq.n	8005b80 <TIM_Base_SetConfig+0x38>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a30      	ldr	r2, [pc, #192]	; (8005c34 <TIM_Base_SetConfig+0xec>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <TIM_Base_SetConfig+0x38>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a2f      	ldr	r2, [pc, #188]	; (8005c38 <TIM_Base_SetConfig+0xf0>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d108      	bne.n	8005b92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a25      	ldr	r2, [pc, #148]	; (8005c2c <TIM_Base_SetConfig+0xe4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d01b      	beq.n	8005bd2 <TIM_Base_SetConfig+0x8a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba0:	d017      	beq.n	8005bd2 <TIM_Base_SetConfig+0x8a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a22      	ldr	r2, [pc, #136]	; (8005c30 <TIM_Base_SetConfig+0xe8>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d013      	beq.n	8005bd2 <TIM_Base_SetConfig+0x8a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a21      	ldr	r2, [pc, #132]	; (8005c34 <TIM_Base_SetConfig+0xec>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00f      	beq.n	8005bd2 <TIM_Base_SetConfig+0x8a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a20      	ldr	r2, [pc, #128]	; (8005c38 <TIM_Base_SetConfig+0xf0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d00b      	beq.n	8005bd2 <TIM_Base_SetConfig+0x8a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a1f      	ldr	r2, [pc, #124]	; (8005c3c <TIM_Base_SetConfig+0xf4>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d007      	beq.n	8005bd2 <TIM_Base_SetConfig+0x8a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a1e      	ldr	r2, [pc, #120]	; (8005c40 <TIM_Base_SetConfig+0xf8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d003      	beq.n	8005bd2 <TIM_Base_SetConfig+0x8a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a1d      	ldr	r2, [pc, #116]	; (8005c44 <TIM_Base_SetConfig+0xfc>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d108      	bne.n	8005be4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a08      	ldr	r2, [pc, #32]	; (8005c2c <TIM_Base_SetConfig+0xe4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d103      	bne.n	8005c18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	691a      	ldr	r2, [r3, #16]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	615a      	str	r2, [r3, #20]
}
 8005c1e:	bf00      	nop
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40000800 	.word	0x40000800
 8005c38:	40000c00 	.word	0x40000c00
 8005c3c:	40014000 	.word	0x40014000
 8005c40:	40014400 	.word	0x40014400
 8005c44:	40014800 	.word	0x40014800

08005c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f023 0201 	bic.w	r2, r3, #1
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f023 030a 	bic.w	r3, r3, #10
 8005c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b087      	sub	sp, #28
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f023 0210 	bic.w	r2, r3, #16
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	031b      	lsls	r3, r3, #12
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ce2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b085      	sub	sp, #20
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f043 0307 	orr.w	r3, r3, #7
 8005d28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	609a      	str	r2, [r3, #8]
}
 8005d30:	bf00      	nop
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	021a      	lsls	r2, r3, #8
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	609a      	str	r2, [r3, #8]
}
 8005d70:	bf00      	nop
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e050      	b.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1c      	ldr	r2, [pc, #112]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d018      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de0:	d013      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a18      	ldr	r2, [pc, #96]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00e      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a16      	ldr	r2, [pc, #88]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d009      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a15      	ldr	r2, [pc, #84]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d004      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a13      	ldr	r2, [pc, #76]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d10c      	bne.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40010000 	.word	0x40010000
 8005e48:	40000400 	.word	0x40000400
 8005e4c:	40000800 	.word	0x40000800
 8005e50:	40000c00 	.word	0x40000c00
 8005e54:	40014000 	.word	0x40014000

08005e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	4603      	mov	r3, r0
 8005e88:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e92:	2b84      	cmp	r3, #132	; 0x84
 8005e94:	d005      	beq.n	8005ea2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005e96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	3303      	adds	r3, #3
 8005ea0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005eb4:	f001 f93c 	bl	8007130 <vTaskStartScheduler>
  
  return osOK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec0:	b089      	sub	sp, #36	; 0x24
 8005ec2:	af04      	add	r7, sp, #16
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d020      	beq.n	8005f12 <osThreadCreate+0x54>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01c      	beq.n	8005f12 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685c      	ldr	r4, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681d      	ldr	r5, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691e      	ldr	r6, [r3, #16]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff ffc8 	bl	8005e80 <makeFreeRtosPriority>
 8005ef0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005efa:	9202      	str	r2, [sp, #8]
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	9100      	str	r1, [sp, #0]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	4632      	mov	r2, r6
 8005f04:	4629      	mov	r1, r5
 8005f06:	4620      	mov	r0, r4
 8005f08:	f000 ff34 	bl	8006d74 <xTaskCreateStatic>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	e01c      	b.n	8005f4c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685c      	ldr	r4, [r3, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f1e:	b29e      	uxth	r6, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff ffaa 	bl	8005e80 <makeFreeRtosPriority>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	f107 030c 	add.w	r3, r7, #12
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	9200      	str	r2, [sp, #0]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	4632      	mov	r2, r6
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f000 ff76 	bl	8006e2e <xTaskCreate>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d001      	beq.n	8005f4c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	e000      	b.n	8005f4e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f56 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <osDelay+0x16>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	e000      	b.n	8005f6e <osDelay+0x18>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f001 f8aa 	bl	80070c8 <vTaskDelay>
  
  return osOK;
 8005f74:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f103 0208 	add.w	r2, r3, #8
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f04f 32ff 	mov.w	r2, #4294967295
 8005f96:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f103 0208 	add.w	r2, r3, #8
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f103 0208 	add.w	r2, r3, #8
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	601a      	str	r2, [r3, #0]
}
 8006014:	bf00      	nop
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006036:	d103      	bne.n	8006040 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	e00c      	b.n	800605a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3308      	adds	r3, #8
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	e002      	b.n	800604e <vListInsert+0x2e>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	429a      	cmp	r2, r3
 8006058:	d2f6      	bcs.n	8006048 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	601a      	str	r2, [r3, #0]
}
 8006086:	bf00      	nop
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6892      	ldr	r2, [r2, #8]
 80060a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6852      	ldr	r2, [r2, #4]
 80060b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d103      	bne.n	80060c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	1e5a      	subs	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
	...

080060e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10a      	bne.n	8006112 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800610e:	bf00      	nop
 8006110:	e7fe      	b.n	8006110 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006112:	f002 fadf 	bl	80086d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611e:	68f9      	ldr	r1, [r7, #12]
 8006120:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006122:	fb01 f303 	mul.w	r3, r1, r3
 8006126:	441a      	add	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006142:	3b01      	subs	r3, #1
 8006144:	68f9      	ldr	r1, [r7, #12]
 8006146:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	441a      	add	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	22ff      	movs	r2, #255	; 0xff
 8006156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	22ff      	movs	r2, #255	; 0xff
 800615e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d114      	bne.n	8006192 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01a      	beq.n	80061a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3310      	adds	r3, #16
 8006174:	4618      	mov	r0, r3
 8006176:	f001 fa6f 	bl	8007658 <xTaskRemoveFromEventList>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d012      	beq.n	80061a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006180:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <xQueueGenericReset+0xcc>)
 8006182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	e009      	b.n	80061a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3310      	adds	r3, #16
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff fef1 	bl	8005f7e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3324      	adds	r3, #36	; 0x24
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff feec 	bl	8005f7e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061a6:	f002 fac5 	bl	8008734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061aa:	2301      	movs	r3, #1
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	e000ed04 	.word	0xe000ed04

080061b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08e      	sub	sp, #56	; 0x38
 80061bc:	af02      	add	r7, sp, #8
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <xQueueGenericCreateStatic+0x52>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <xQueueGenericCreateStatic+0x56>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <xQueueGenericCreateStatic+0x58>
 800620e:	2300      	movs	r3, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10a      	bne.n	800622a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	623b      	str	r3, [r7, #32]
}
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <xQueueGenericCreateStatic+0x7e>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <xQueueGenericCreateStatic+0x82>
 8006236:	2301      	movs	r3, #1
 8006238:	e000      	b.n	800623c <xQueueGenericCreateStatic+0x84>
 800623a:	2300      	movs	r3, #0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	61fb      	str	r3, [r7, #28]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006256:	2348      	movs	r3, #72	; 0x48
 8006258:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b48      	cmp	r3, #72	; 0x48
 800625e:	d00a      	beq.n	8006276 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	61bb      	str	r3, [r7, #24]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006276:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00d      	beq.n	800629e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800628a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	4613      	mov	r3, r2
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	68b9      	ldr	r1, [r7, #8]
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 f83f 	bl	800631c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3730      	adds	r7, #48	; 0x30
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08a      	sub	sp, #40	; 0x28
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	4613      	mov	r3, r2
 80062b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	613b      	str	r3, [r7, #16]
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	fb02 f303 	mul.w	r3, r2, r3
 80062da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	3348      	adds	r3, #72	; 0x48
 80062e0:	4618      	mov	r0, r3
 80062e2:	f002 fb19 	bl	8008918 <pvPortMalloc>
 80062e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d011      	beq.n	8006312 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	3348      	adds	r3, #72	; 0x48
 80062f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006300:	79fa      	ldrb	r2, [r7, #7]
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	4613      	mov	r3, r2
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	68b9      	ldr	r1, [r7, #8]
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 f805 	bl	800631c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006312:	69bb      	ldr	r3, [r7, #24]
	}
 8006314:	4618      	mov	r0, r3
 8006316:	3720      	adds	r7, #32
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d103      	bne.n	8006338 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	e002      	b.n	800633e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800634a:	2101      	movs	r1, #1
 800634c:	69b8      	ldr	r0, [r7, #24]
 800634e:	f7ff fecb 	bl	80060e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08e      	sub	sp, #56	; 0x38
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800636a:	2300      	movs	r3, #0
 800636c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <xQueueGenericSend+0x32>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800638a:	bf00      	nop
 800638c:	e7fe      	b.n	800638c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d103      	bne.n	800639c <xQueueGenericSend+0x40>
 8006394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <xQueueGenericSend+0x44>
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <xQueueGenericSend+0x46>
 80063a0:	2300      	movs	r3, #0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <xQueueGenericSend+0x60>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063b8:	bf00      	nop
 80063ba:	e7fe      	b.n	80063ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d103      	bne.n	80063ca <xQueueGenericSend+0x6e>
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <xQueueGenericSend+0x72>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <xQueueGenericSend+0x74>
 80063ce:	2300      	movs	r3, #0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10a      	bne.n	80063ea <xQueueGenericSend+0x8e>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	623b      	str	r3, [r7, #32]
}
 80063e6:	bf00      	nop
 80063e8:	e7fe      	b.n	80063e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063ea:	f001 faf5 	bl	80079d8 <xTaskGetSchedulerState>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d102      	bne.n	80063fa <xQueueGenericSend+0x9e>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <xQueueGenericSend+0xa2>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <xQueueGenericSend+0xa4>
 80063fe:	2300      	movs	r3, #0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10a      	bne.n	800641a <xQueueGenericSend+0xbe>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	61fb      	str	r3, [r7, #28]
}
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800641a:	f002 f95b 	bl	80086d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006426:	429a      	cmp	r2, r3
 8006428:	d302      	bcc.n	8006430 <xQueueGenericSend+0xd4>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b02      	cmp	r3, #2
 800642e:	d129      	bne.n	8006484 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006436:	f000 fb2f 	bl	8006a98 <prvCopyDataToQueue>
 800643a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	2b00      	cmp	r3, #0
 8006442:	d010      	beq.n	8006466 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	3324      	adds	r3, #36	; 0x24
 8006448:	4618      	mov	r0, r3
 800644a:	f001 f905 	bl	8007658 <xTaskRemoveFromEventList>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d013      	beq.n	800647c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006454:	4b3f      	ldr	r3, [pc, #252]	; (8006554 <xQueueGenericSend+0x1f8>)
 8006456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	e00a      	b.n	800647c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d007      	beq.n	800647c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800646c:	4b39      	ldr	r3, [pc, #228]	; (8006554 <xQueueGenericSend+0x1f8>)
 800646e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800647c:	f002 f95a 	bl	8008734 <vPortExitCritical>
				return pdPASS;
 8006480:	2301      	movs	r3, #1
 8006482:	e063      	b.n	800654c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d103      	bne.n	8006492 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800648a:	f002 f953 	bl	8008734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800648e:	2300      	movs	r3, #0
 8006490:	e05c      	b.n	800654c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	2b00      	cmp	r3, #0
 8006496:	d106      	bne.n	80064a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006498:	f107 0314 	add.w	r3, r7, #20
 800649c:	4618      	mov	r0, r3
 800649e:	f001 f93d 	bl	800771c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064a2:	2301      	movs	r3, #1
 80064a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064a6:	f002 f945 	bl	8008734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064aa:	f000 feb1 	bl	8007210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064ae:	f002 f911 	bl	80086d4 <vPortEnterCritical>
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064b8:	b25b      	sxtb	r3, r3
 80064ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064be:	d103      	bne.n	80064c8 <xQueueGenericSend+0x16c>
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064ce:	b25b      	sxtb	r3, r3
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d4:	d103      	bne.n	80064de <xQueueGenericSend+0x182>
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064de:	f002 f929 	bl	8008734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064e2:	1d3a      	adds	r2, r7, #4
 80064e4:	f107 0314 	add.w	r3, r7, #20
 80064e8:	4611      	mov	r1, r2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 f92c 	bl	8007748 <xTaskCheckForTimeOut>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d124      	bne.n	8006540 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064f8:	f000 fbc6 	bl	8006c88 <prvIsQueueFull>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d018      	beq.n	8006534 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	3310      	adds	r3, #16
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	4611      	mov	r1, r2
 800650a:	4618      	mov	r0, r3
 800650c:	f001 f854 	bl	80075b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006512:	f000 fb51 	bl	8006bb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006516:	f000 fe89 	bl	800722c <xTaskResumeAll>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	f47f af7c 	bne.w	800641a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006522:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <xQueueGenericSend+0x1f8>)
 8006524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	e772      	b.n	800641a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006536:	f000 fb3f 	bl	8006bb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800653a:	f000 fe77 	bl	800722c <xTaskResumeAll>
 800653e:	e76c      	b.n	800641a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006542:	f000 fb39 	bl	8006bb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006546:	f000 fe71 	bl	800722c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800654a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800654c:	4618      	mov	r0, r3
 800654e:	3738      	adds	r7, #56	; 0x38
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	e000ed04 	.word	0xe000ed04

08006558 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b090      	sub	sp, #64	; 0x40
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d103      	bne.n	8006594 <xQueueGenericSendFromISR+0x3c>
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <xQueueGenericSendFromISR+0x40>
 8006594:	2301      	movs	r3, #1
 8006596:	e000      	b.n	800659a <xQueueGenericSendFromISR+0x42>
 8006598:	2300      	movs	r3, #0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065b0:	bf00      	nop
 80065b2:	e7fe      	b.n	80065b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d103      	bne.n	80065c2 <xQueueGenericSendFromISR+0x6a>
 80065ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <xQueueGenericSendFromISR+0x6e>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <xQueueGenericSendFromISR+0x70>
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	623b      	str	r3, [r7, #32]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065e2:	f002 f959 	bl	8008898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065e6:	f3ef 8211 	mrs	r2, BASEPRI
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	61fa      	str	r2, [r7, #28]
 80065fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006600:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660a:	429a      	cmp	r2, r3
 800660c:	d302      	bcc.n	8006614 <xQueueGenericSendFromISR+0xbc>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b02      	cmp	r3, #2
 8006612:	d12f      	bne.n	8006674 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800661a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800662a:	f000 fa35 	bl	8006a98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800662e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d112      	bne.n	800665e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	2b00      	cmp	r3, #0
 800663e:	d016      	beq.n	800666e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006642:	3324      	adds	r3, #36	; 0x24
 8006644:	4618      	mov	r0, r3
 8006646:	f001 f807 	bl	8007658 <xTaskRemoveFromEventList>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00e      	beq.n	800666e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	e007      	b.n	800666e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800665e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006662:	3301      	adds	r3, #1
 8006664:	b2db      	uxtb	r3, r3
 8006666:	b25a      	sxtb	r2, r3
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800666e:	2301      	movs	r3, #1
 8006670:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006672:	e001      	b.n	8006678 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006674:	2300      	movs	r3, #0
 8006676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006682:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006686:	4618      	mov	r0, r3
 8006688:	3740      	adds	r7, #64	; 0x40
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08c      	sub	sp, #48	; 0x30
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800669c:	2300      	movs	r3, #0
 800669e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10a      	bne.n	80066c0 <xQueueReceive+0x30>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	623b      	str	r3, [r7, #32]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d103      	bne.n	80066ce <xQueueReceive+0x3e>
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <xQueueReceive+0x42>
 80066ce:	2301      	movs	r3, #1
 80066d0:	e000      	b.n	80066d4 <xQueueReceive+0x44>
 80066d2:	2300      	movs	r3, #0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10a      	bne.n	80066ee <xQueueReceive+0x5e>
	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	61fb      	str	r3, [r7, #28]
}
 80066ea:	bf00      	nop
 80066ec:	e7fe      	b.n	80066ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066ee:	f001 f973 	bl	80079d8 <xTaskGetSchedulerState>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d102      	bne.n	80066fe <xQueueReceive+0x6e>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <xQueueReceive+0x72>
 80066fe:	2301      	movs	r3, #1
 8006700:	e000      	b.n	8006704 <xQueueReceive+0x74>
 8006702:	2300      	movs	r3, #0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10a      	bne.n	800671e <xQueueReceive+0x8e>
	__asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	61bb      	str	r3, [r7, #24]
}
 800671a:	bf00      	nop
 800671c:	e7fe      	b.n	800671c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800671e:	f001 ffd9 	bl	80086d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006726:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	2b00      	cmp	r3, #0
 800672c:	d01f      	beq.n	800676e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006732:	f000 fa1b 	bl	8006b6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	1e5a      	subs	r2, r3, #1
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00f      	beq.n	8006766 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	3310      	adds	r3, #16
 800674a:	4618      	mov	r0, r3
 800674c:	f000 ff84 	bl	8007658 <xTaskRemoveFromEventList>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d007      	beq.n	8006766 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006756:	4b3d      	ldr	r3, [pc, #244]	; (800684c <xQueueReceive+0x1bc>)
 8006758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006766:	f001 ffe5 	bl	8008734 <vPortExitCritical>
				return pdPASS;
 800676a:	2301      	movs	r3, #1
 800676c:	e069      	b.n	8006842 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d103      	bne.n	800677c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006774:	f001 ffde 	bl	8008734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006778:	2300      	movs	r3, #0
 800677a:	e062      	b.n	8006842 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677e:	2b00      	cmp	r3, #0
 8006780:	d106      	bne.n	8006790 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006782:	f107 0310 	add.w	r3, r7, #16
 8006786:	4618      	mov	r0, r3
 8006788:	f000 ffc8 	bl	800771c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800678c:	2301      	movs	r3, #1
 800678e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006790:	f001 ffd0 	bl	8008734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006794:	f000 fd3c 	bl	8007210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006798:	f001 ff9c 	bl	80086d4 <vPortEnterCritical>
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067a2:	b25b      	sxtb	r3, r3
 80067a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a8:	d103      	bne.n	80067b2 <xQueueReceive+0x122>
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067b8:	b25b      	sxtb	r3, r3
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	d103      	bne.n	80067c8 <xQueueReceive+0x138>
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067c8:	f001 ffb4 	bl	8008734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067cc:	1d3a      	adds	r2, r7, #4
 80067ce:	f107 0310 	add.w	r3, r7, #16
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 ffb7 	bl	8007748 <xTaskCheckForTimeOut>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d123      	bne.n	8006828 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e2:	f000 fa3b 	bl	8006c5c <prvIsQueueEmpty>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d017      	beq.n	800681c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	3324      	adds	r3, #36	; 0x24
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	4611      	mov	r1, r2
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 fedf 	bl	80075b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067fc:	f000 f9dc 	bl	8006bb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006800:	f000 fd14 	bl	800722c <xTaskResumeAll>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d189      	bne.n	800671e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800680a:	4b10      	ldr	r3, [pc, #64]	; (800684c <xQueueReceive+0x1bc>)
 800680c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	e780      	b.n	800671e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800681c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800681e:	f000 f9cb 	bl	8006bb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006822:	f000 fd03 	bl	800722c <xTaskResumeAll>
 8006826:	e77a      	b.n	800671e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800682a:	f000 f9c5 	bl	8006bb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800682e:	f000 fcfd 	bl	800722c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006834:	f000 fa12 	bl	8006c5c <prvIsQueueEmpty>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	f43f af6f 	beq.w	800671e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006840:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006842:	4618      	mov	r0, r3
 8006844:	3730      	adds	r7, #48	; 0x30
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	e000ed04 	.word	0xe000ed04

08006850 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08e      	sub	sp, #56	; 0x38
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800685a:	2300      	movs	r3, #0
 800685c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006862:	2300      	movs	r3, #0
 8006864:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	623b      	str	r3, [r7, #32]
}
 800687e:	bf00      	nop
 8006880:	e7fe      	b.n	8006880 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	61fb      	str	r3, [r7, #28]
}
 800689c:	bf00      	nop
 800689e:	e7fe      	b.n	800689e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068a0:	f001 f89a 	bl	80079d8 <xTaskGetSchedulerState>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d102      	bne.n	80068b0 <xQueueSemaphoreTake+0x60>
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <xQueueSemaphoreTake+0x64>
 80068b0:	2301      	movs	r3, #1
 80068b2:	e000      	b.n	80068b6 <xQueueSemaphoreTake+0x66>
 80068b4:	2300      	movs	r3, #0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	61bb      	str	r3, [r7, #24]
}
 80068cc:	bf00      	nop
 80068ce:	e7fe      	b.n	80068ce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068d0:	f001 ff00 	bl	80086d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80068d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d024      	beq.n	800692a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e2:	1e5a      	subs	r2, r3, #1
 80068e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80068f0:	f001 fa1a 	bl	8007d28 <pvTaskIncrementMutexHeldCount>
 80068f4:	4602      	mov	r2, r0
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00f      	beq.n	8006922 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006904:	3310      	adds	r3, #16
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fea6 	bl	8007658 <xTaskRemoveFromEventList>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d007      	beq.n	8006922 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006912:	4b54      	ldr	r3, [pc, #336]	; (8006a64 <xQueueSemaphoreTake+0x214>)
 8006914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006922:	f001 ff07 	bl	8008734 <vPortExitCritical>
				return pdPASS;
 8006926:	2301      	movs	r3, #1
 8006928:	e097      	b.n	8006a5a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d111      	bne.n	8006954 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00a      	beq.n	800694c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	617b      	str	r3, [r7, #20]
}
 8006948:	bf00      	nop
 800694a:	e7fe      	b.n	800694a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800694c:	f001 fef2 	bl	8008734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006950:	2300      	movs	r3, #0
 8006952:	e082      	b.n	8006a5a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006956:	2b00      	cmp	r3, #0
 8006958:	d106      	bne.n	8006968 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800695a:	f107 030c 	add.w	r3, r7, #12
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fedc 	bl	800771c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006964:	2301      	movs	r3, #1
 8006966:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006968:	f001 fee4 	bl	8008734 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800696c:	f000 fc50 	bl	8007210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006970:	f001 feb0 	bl	80086d4 <vPortEnterCritical>
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800697a:	b25b      	sxtb	r3, r3
 800697c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006980:	d103      	bne.n	800698a <xQueueSemaphoreTake+0x13a>
 8006982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800698a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006990:	b25b      	sxtb	r3, r3
 8006992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006996:	d103      	bne.n	80069a0 <xQueueSemaphoreTake+0x150>
 8006998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069a0:	f001 fec8 	bl	8008734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069a4:	463a      	mov	r2, r7
 80069a6:	f107 030c 	add.w	r3, r7, #12
 80069aa:	4611      	mov	r1, r2
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 fecb 	bl	8007748 <xTaskCheckForTimeOut>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d132      	bne.n	8006a1e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069ba:	f000 f94f 	bl	8006c5c <prvIsQueueEmpty>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d026      	beq.n	8006a12 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d109      	bne.n	80069e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80069cc:	f001 fe82 	bl	80086d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f001 f81d 	bl	8007a14 <xTaskPriorityInherit>
 80069da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80069dc:	f001 feaa 	bl	8008734 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	3324      	adds	r3, #36	; 0x24
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	4611      	mov	r1, r2
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 fde5 	bl	80075b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069f0:	f000 f8e2 	bl	8006bb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069f4:	f000 fc1a 	bl	800722c <xTaskResumeAll>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f47f af68 	bne.w	80068d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006a00:	4b18      	ldr	r3, [pc, #96]	; (8006a64 <xQueueSemaphoreTake+0x214>)
 8006a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	e75e      	b.n	80068d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006a12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a14:	f000 f8d0 	bl	8006bb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a18:	f000 fc08 	bl	800722c <xTaskResumeAll>
 8006a1c:	e758      	b.n	80068d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a20:	f000 f8ca 	bl	8006bb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a24:	f000 fc02 	bl	800722c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a2a:	f000 f917 	bl	8006c5c <prvIsQueueEmpty>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f43f af4d 	beq.w	80068d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00d      	beq.n	8006a58 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006a3c:	f001 fe4a 	bl	80086d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006a40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a42:	f000 f811 	bl	8006a68 <prvGetDisinheritPriorityAfterTimeout>
 8006a46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f001 f8dc 	bl	8007c0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006a54:	f001 fe6e 	bl	8008734 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3738      	adds	r7, #56	; 0x38
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	e000ed04 	.word	0xe000ed04

08006a68 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d006      	beq.n	8006a86 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f1c3 0307 	rsb	r3, r3, #7
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	e001      	b.n	8006a8a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
	}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10d      	bne.n	8006ad2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d14d      	bne.n	8006b5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f001 f81c 	bl	8007b00 <xTaskPriorityDisinherit>
 8006ac8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	609a      	str	r2, [r3, #8]
 8006ad0:	e043      	b.n	8006b5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d119      	bne.n	8006b0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6858      	ldr	r0, [r3, #4]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	68b9      	ldr	r1, [r7, #8]
 8006ae4:	f002 f92e 	bl	8008d44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	441a      	add	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d32b      	bcc.n	8006b5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	605a      	str	r2, [r3, #4]
 8006b0a:	e026      	b.n	8006b5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68d8      	ldr	r0, [r3, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b14:	461a      	mov	r2, r3
 8006b16:	68b9      	ldr	r1, [r7, #8]
 8006b18:	f002 f914 	bl	8008d44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	425b      	negs	r3, r3
 8006b26:	441a      	add	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	68da      	ldr	r2, [r3, #12]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d207      	bcs.n	8006b48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b40:	425b      	negs	r3, r3
 8006b42:	441a      	add	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d105      	bne.n	8006b5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006b62:	697b      	ldr	r3, [r7, #20]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d018      	beq.n	8006bb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	441a      	add	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d303      	bcc.n	8006ba0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68d9      	ldr	r1, [r3, #12]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	461a      	mov	r2, r3
 8006baa:	6838      	ldr	r0, [r7, #0]
 8006bac:	f002 f8ca 	bl	8008d44 <memcpy>
	}
}
 8006bb0:	bf00      	nop
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006bc0:	f001 fd88 	bl	80086d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bcc:	e011      	b.n	8006bf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d012      	beq.n	8006bfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3324      	adds	r3, #36	; 0x24
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fd3c 	bl	8007658 <xTaskRemoveFromEventList>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006be6:	f000 fe11 	bl	800780c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	dce9      	bgt.n	8006bce <prvUnlockQueue+0x16>
 8006bfa:	e000      	b.n	8006bfe <prvUnlockQueue+0x46>
					break;
 8006bfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	22ff      	movs	r2, #255	; 0xff
 8006c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c06:	f001 fd95 	bl	8008734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c0a:	f001 fd63 	bl	80086d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c16:	e011      	b.n	8006c3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d012      	beq.n	8006c46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3310      	adds	r3, #16
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 fd17 	bl	8007658 <xTaskRemoveFromEventList>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c30:	f000 fdec 	bl	800780c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	dce9      	bgt.n	8006c18 <prvUnlockQueue+0x60>
 8006c44:	e000      	b.n	8006c48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	22ff      	movs	r2, #255	; 0xff
 8006c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006c50:	f001 fd70 	bl	8008734 <vPortExitCritical>
}
 8006c54:	bf00      	nop
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c64:	f001 fd36 	bl	80086d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d102      	bne.n	8006c76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c70:	2301      	movs	r3, #1
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	e001      	b.n	8006c7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c76:	2300      	movs	r3, #0
 8006c78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c7a:	f001 fd5b 	bl	8008734 <vPortExitCritical>

	return xReturn;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c90:	f001 fd20 	bl	80086d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d102      	bne.n	8006ca6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	e001      	b.n	8006caa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006caa:	f001 fd43 	bl	8008734 <vPortExitCritical>

	return xReturn;
 8006cae:	68fb      	ldr	r3, [r7, #12]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60fb      	str	r3, [r7, #12]
 8006cc6:	e014      	b.n	8006cf2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006cc8:	4a0f      	ldr	r2, [pc, #60]	; (8006d08 <vQueueAddToRegistry+0x50>)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10b      	bne.n	8006cec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006cd4:	490c      	ldr	r1, [pc, #48]	; (8006d08 <vQueueAddToRegistry+0x50>)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006cde:	4a0a      	ldr	r2, [pc, #40]	; (8006d08 <vQueueAddToRegistry+0x50>)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	4413      	add	r3, r2
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006cea:	e006      	b.n	8006cfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b07      	cmp	r3, #7
 8006cf6:	d9e7      	bls.n	8006cc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	2000482c 	.word	0x2000482c

08006d0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d1c:	f001 fcda 	bl	80086d4 <vPortEnterCritical>
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d26:	b25b      	sxtb	r3, r3
 8006d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2c:	d103      	bne.n	8006d36 <vQueueWaitForMessageRestricted+0x2a>
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d3c:	b25b      	sxtb	r3, r3
 8006d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d42:	d103      	bne.n	8006d4c <vQueueWaitForMessageRestricted+0x40>
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d4c:	f001 fcf2 	bl	8008734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d106      	bne.n	8006d66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	3324      	adds	r3, #36	; 0x24
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	68b9      	ldr	r1, [r7, #8]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fc4d 	bl	8007600 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006d66:	6978      	ldr	r0, [r7, #20]
 8006d68:	f7ff ff26 	bl	8006bb8 <prvUnlockQueue>
	}
 8006d6c:	bf00      	nop
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08e      	sub	sp, #56	; 0x38
 8006d78:	af04      	add	r7, sp, #16
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
 8006d80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10a      	bne.n	8006d9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	623b      	str	r3, [r7, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	e7fe      	b.n	8006d9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <xTaskCreateStatic+0x46>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	61fb      	str	r3, [r7, #28]
}
 8006db6:	bf00      	nop
 8006db8:	e7fe      	b.n	8006db8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006dba:	23b4      	movs	r3, #180	; 0xb4
 8006dbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2bb4      	cmp	r3, #180	; 0xb4
 8006dc2:	d00a      	beq.n	8006dda <xTaskCreateStatic+0x66>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	61bb      	str	r3, [r7, #24]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006dda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d01e      	beq.n	8006e20 <xTaskCreateStatic+0xac>
 8006de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d01b      	beq.n	8006e20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006df0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	2202      	movs	r2, #2
 8006df6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	9303      	str	r3, [sp, #12]
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	9302      	str	r3, [sp, #8]
 8006e02:	f107 0314 	add.w	r3, r7, #20
 8006e06:	9301      	str	r3, [sp, #4]
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	68b9      	ldr	r1, [r7, #8]
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 f850 	bl	8006eb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e1a:	f000 f8eb 	bl	8006ff4 <prvAddNewTaskToReadyList>
 8006e1e:	e001      	b.n	8006e24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e24:	697b      	ldr	r3, [r7, #20]
	}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3728      	adds	r7, #40	; 0x28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b08c      	sub	sp, #48	; 0x30
 8006e32:	af04      	add	r7, sp, #16
 8006e34:	60f8      	str	r0, [r7, #12]
 8006e36:	60b9      	str	r1, [r7, #8]
 8006e38:	603b      	str	r3, [r7, #0]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006e3e:	88fb      	ldrh	r3, [r7, #6]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4618      	mov	r0, r3
 8006e44:	f001 fd68 	bl	8008918 <pvPortMalloc>
 8006e48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00e      	beq.n	8006e6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006e50:	20b4      	movs	r0, #180	; 0xb4
 8006e52:	f001 fd61 	bl	8008918 <pvPortMalloc>
 8006e56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	631a      	str	r2, [r3, #48]	; 0x30
 8006e64:	e005      	b.n	8006e72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e66:	6978      	ldr	r0, [r7, #20]
 8006e68:	f001 fe22 	bl	8008ab0 <vPortFree>
 8006e6c:	e001      	b.n	8006e72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d017      	beq.n	8006ea8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e80:	88fa      	ldrh	r2, [r7, #6]
 8006e82:	2300      	movs	r3, #0
 8006e84:	9303      	str	r3, [sp, #12]
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	9302      	str	r3, [sp, #8]
 8006e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68b9      	ldr	r1, [r7, #8]
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 f80e 	bl	8006eb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e9c:	69f8      	ldr	r0, [r7, #28]
 8006e9e:	f000 f8a9 	bl	8006ff4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	61bb      	str	r3, [r7, #24]
 8006ea6:	e002      	b.n	8006eae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8006eac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006eae:	69bb      	ldr	r3, [r7, #24]
	}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3720      	adds	r7, #32
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	f023 0307 	bic.w	r3, r3, #7
 8006ede:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	617b      	str	r3, [r7, #20]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d01f      	beq.n	8006f46 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f06:	2300      	movs	r3, #0
 8006f08:	61fb      	str	r3, [r7, #28]
 8006f0a:	e012      	b.n	8006f32 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	4413      	add	r3, r2
 8006f12:	7819      	ldrb	r1, [r3, #0]
 8006f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	3334      	adds	r3, #52	; 0x34
 8006f1c:	460a      	mov	r2, r1
 8006f1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d006      	beq.n	8006f3a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	61fb      	str	r3, [r7, #28]
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	2b0f      	cmp	r3, #15
 8006f36:	d9e9      	bls.n	8006f0c <prvInitialiseNewTask+0x54>
 8006f38:	e000      	b.n	8006f3c <prvInitialiseNewTask+0x84>
			{
				break;
 8006f3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f44:	e003      	b.n	8006f4e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	2b06      	cmp	r3, #6
 8006f52:	d901      	bls.n	8006f58 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f54:	2306      	movs	r3, #6
 8006f56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f62:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f66:	2200      	movs	r2, #0
 8006f68:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7ff f825 	bl	8005fbe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	3318      	adds	r3, #24
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff f820 	bl	8005fbe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f86:	f1c3 0207 	rsb	r2, r3, #7
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	2200      	movs	r2, #0
 8006f98:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa6:	334c      	adds	r3, #76	; 0x4c
 8006fa8:	2260      	movs	r2, #96	; 0x60
 8006faa:	2100      	movs	r1, #0
 8006fac:	4618      	mov	r0, r3
 8006fae:	f001 fed7 	bl	8008d60 <memset>
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	4a0c      	ldr	r2, [pc, #48]	; (8006fe8 <prvInitialiseNewTask+0x130>)
 8006fb6:	651a      	str	r2, [r3, #80]	; 0x50
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	4a0c      	ldr	r2, [pc, #48]	; (8006fec <prvInitialiseNewTask+0x134>)
 8006fbc:	655a      	str	r2, [r3, #84]	; 0x54
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	4a0b      	ldr	r2, [pc, #44]	; (8006ff0 <prvInitialiseNewTask+0x138>)
 8006fc2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	68f9      	ldr	r1, [r7, #12]
 8006fc8:	69b8      	ldr	r0, [r7, #24]
 8006fca:	f001 fa59 	bl	8008480 <pxPortInitialiseStack>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fde:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fe0:	bf00      	nop
 8006fe2:	3720      	adds	r7, #32
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	08009834 	.word	0x08009834
 8006fec:	08009854 	.word	0x08009854
 8006ff0:	08009814 	.word	0x08009814

08006ff4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ffc:	f001 fb6a 	bl	80086d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007000:	4b2a      	ldr	r3, [pc, #168]	; (80070ac <prvAddNewTaskToReadyList+0xb8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3301      	adds	r3, #1
 8007006:	4a29      	ldr	r2, [pc, #164]	; (80070ac <prvAddNewTaskToReadyList+0xb8>)
 8007008:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800700a:	4b29      	ldr	r3, [pc, #164]	; (80070b0 <prvAddNewTaskToReadyList+0xbc>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d109      	bne.n	8007026 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007012:	4a27      	ldr	r2, [pc, #156]	; (80070b0 <prvAddNewTaskToReadyList+0xbc>)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007018:	4b24      	ldr	r3, [pc, #144]	; (80070ac <prvAddNewTaskToReadyList+0xb8>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d110      	bne.n	8007042 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007020:	f000 fc18 	bl	8007854 <prvInitialiseTaskLists>
 8007024:	e00d      	b.n	8007042 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007026:	4b23      	ldr	r3, [pc, #140]	; (80070b4 <prvAddNewTaskToReadyList+0xc0>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d109      	bne.n	8007042 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800702e:	4b20      	ldr	r3, [pc, #128]	; (80070b0 <prvAddNewTaskToReadyList+0xbc>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	429a      	cmp	r2, r3
 800703a:	d802      	bhi.n	8007042 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800703c:	4a1c      	ldr	r2, [pc, #112]	; (80070b0 <prvAddNewTaskToReadyList+0xbc>)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007042:	4b1d      	ldr	r3, [pc, #116]	; (80070b8 <prvAddNewTaskToReadyList+0xc4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3301      	adds	r3, #1
 8007048:	4a1b      	ldr	r2, [pc, #108]	; (80070b8 <prvAddNewTaskToReadyList+0xc4>)
 800704a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007050:	2201      	movs	r2, #1
 8007052:	409a      	lsls	r2, r3
 8007054:	4b19      	ldr	r3, [pc, #100]	; (80070bc <prvAddNewTaskToReadyList+0xc8>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4313      	orrs	r3, r2
 800705a:	4a18      	ldr	r2, [pc, #96]	; (80070bc <prvAddNewTaskToReadyList+0xc8>)
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4a15      	ldr	r2, [pc, #84]	; (80070c0 <prvAddNewTaskToReadyList+0xcc>)
 800706c:	441a      	add	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	3304      	adds	r3, #4
 8007072:	4619      	mov	r1, r3
 8007074:	4610      	mov	r0, r2
 8007076:	f7fe ffaf 	bl	8005fd8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800707a:	f001 fb5b 	bl	8008734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800707e:	4b0d      	ldr	r3, [pc, #52]	; (80070b4 <prvAddNewTaskToReadyList+0xc0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00e      	beq.n	80070a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007086:	4b0a      	ldr	r3, [pc, #40]	; (80070b0 <prvAddNewTaskToReadyList+0xbc>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	429a      	cmp	r2, r3
 8007092:	d207      	bcs.n	80070a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007094:	4b0b      	ldr	r3, [pc, #44]	; (80070c4 <prvAddNewTaskToReadyList+0xd0>)
 8007096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	2000091c 	.word	0x2000091c
 80070b0:	2000081c 	.word	0x2000081c
 80070b4:	20000928 	.word	0x20000928
 80070b8:	20000938 	.word	0x20000938
 80070bc:	20000924 	.word	0x20000924
 80070c0:	20000820 	.word	0x20000820
 80070c4:	e000ed04 	.word	0xe000ed04

080070c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d017      	beq.n	800710a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80070da:	4b13      	ldr	r3, [pc, #76]	; (8007128 <vTaskDelay+0x60>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <vTaskDelay+0x30>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	60bb      	str	r3, [r7, #8]
}
 80070f4:	bf00      	nop
 80070f6:	e7fe      	b.n	80070f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80070f8:	f000 f88a 	bl	8007210 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070fc:	2100      	movs	r1, #0
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fe26 	bl	8007d50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007104:	f000 f892 	bl	800722c <xTaskResumeAll>
 8007108:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d107      	bne.n	8007120 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007110:	4b06      	ldr	r3, [pc, #24]	; (800712c <vTaskDelay+0x64>)
 8007112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007120:	bf00      	nop
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	20000944 	.word	0x20000944
 800712c:	e000ed04 	.word	0xe000ed04

08007130 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08a      	sub	sp, #40	; 0x28
 8007134:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007136:	2300      	movs	r3, #0
 8007138:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800713a:	2300      	movs	r3, #0
 800713c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800713e:	463a      	mov	r2, r7
 8007140:	1d39      	adds	r1, r7, #4
 8007142:	f107 0308 	add.w	r3, r7, #8
 8007146:	4618      	mov	r0, r3
 8007148:	f7f9 fa1e 	bl	8000588 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	9202      	str	r2, [sp, #8]
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	2300      	movs	r3, #0
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	2300      	movs	r3, #0
 800715c:	460a      	mov	r2, r1
 800715e:	4924      	ldr	r1, [pc, #144]	; (80071f0 <vTaskStartScheduler+0xc0>)
 8007160:	4824      	ldr	r0, [pc, #144]	; (80071f4 <vTaskStartScheduler+0xc4>)
 8007162:	f7ff fe07 	bl	8006d74 <xTaskCreateStatic>
 8007166:	4603      	mov	r3, r0
 8007168:	4a23      	ldr	r2, [pc, #140]	; (80071f8 <vTaskStartScheduler+0xc8>)
 800716a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800716c:	4b22      	ldr	r3, [pc, #136]	; (80071f8 <vTaskStartScheduler+0xc8>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007174:	2301      	movs	r3, #1
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	e001      	b.n	800717e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800717a:	2300      	movs	r3, #0
 800717c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d102      	bne.n	800718a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007184:	f000 fe4a 	bl	8007e1c <xTimerCreateTimerTask>
 8007188:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d11b      	bne.n	80071c8 <vTaskStartScheduler+0x98>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	613b      	str	r3, [r7, #16]
}
 80071a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071a4:	4b15      	ldr	r3, [pc, #84]	; (80071fc <vTaskStartScheduler+0xcc>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	334c      	adds	r3, #76	; 0x4c
 80071aa:	4a15      	ldr	r2, [pc, #84]	; (8007200 <vTaskStartScheduler+0xd0>)
 80071ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071ae:	4b15      	ldr	r3, [pc, #84]	; (8007204 <vTaskStartScheduler+0xd4>)
 80071b0:	f04f 32ff 	mov.w	r2, #4294967295
 80071b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071b6:	4b14      	ldr	r3, [pc, #80]	; (8007208 <vTaskStartScheduler+0xd8>)
 80071b8:	2201      	movs	r2, #1
 80071ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80071bc:	4b13      	ldr	r3, [pc, #76]	; (800720c <vTaskStartScheduler+0xdc>)
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071c2:	f001 f9e5 	bl	8008590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071c6:	e00e      	b.n	80071e6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ce:	d10a      	bne.n	80071e6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	60fb      	str	r3, [r7, #12]
}
 80071e2:	bf00      	nop
 80071e4:	e7fe      	b.n	80071e4 <vTaskStartScheduler+0xb4>
}
 80071e6:	bf00      	nop
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	080097e0 	.word	0x080097e0
 80071f4:	08007825 	.word	0x08007825
 80071f8:	20000940 	.word	0x20000940
 80071fc:	2000081c 	.word	0x2000081c
 8007200:	20000020 	.word	0x20000020
 8007204:	2000093c 	.word	0x2000093c
 8007208:	20000928 	.word	0x20000928
 800720c:	20000920 	.word	0x20000920

08007210 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007214:	4b04      	ldr	r3, [pc, #16]	; (8007228 <vTaskSuspendAll+0x18>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3301      	adds	r3, #1
 800721a:	4a03      	ldr	r2, [pc, #12]	; (8007228 <vTaskSuspendAll+0x18>)
 800721c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800721e:	bf00      	nop
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	20000944 	.word	0x20000944

0800722c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007236:	2300      	movs	r3, #0
 8007238:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800723a:	4b41      	ldr	r3, [pc, #260]	; (8007340 <xTaskResumeAll+0x114>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10a      	bne.n	8007258 <xTaskResumeAll+0x2c>
	__asm volatile
 8007242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	603b      	str	r3, [r7, #0]
}
 8007254:	bf00      	nop
 8007256:	e7fe      	b.n	8007256 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007258:	f001 fa3c 	bl	80086d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800725c:	4b38      	ldr	r3, [pc, #224]	; (8007340 <xTaskResumeAll+0x114>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3b01      	subs	r3, #1
 8007262:	4a37      	ldr	r2, [pc, #220]	; (8007340 <xTaskResumeAll+0x114>)
 8007264:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007266:	4b36      	ldr	r3, [pc, #216]	; (8007340 <xTaskResumeAll+0x114>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d161      	bne.n	8007332 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800726e:	4b35      	ldr	r3, [pc, #212]	; (8007344 <xTaskResumeAll+0x118>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d05d      	beq.n	8007332 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007276:	e02e      	b.n	80072d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007278:	4b33      	ldr	r3, [pc, #204]	; (8007348 <xTaskResumeAll+0x11c>)
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3318      	adds	r3, #24
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe ff04 	bl	8006092 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	3304      	adds	r3, #4
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe feff 	bl	8006092 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	2201      	movs	r2, #1
 800729a:	409a      	lsls	r2, r3
 800729c:	4b2b      	ldr	r3, [pc, #172]	; (800734c <xTaskResumeAll+0x120>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	4a2a      	ldr	r2, [pc, #168]	; (800734c <xTaskResumeAll+0x120>)
 80072a4:	6013      	str	r3, [r2, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072aa:	4613      	mov	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4a27      	ldr	r2, [pc, #156]	; (8007350 <xTaskResumeAll+0x124>)
 80072b4:	441a      	add	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3304      	adds	r3, #4
 80072ba:	4619      	mov	r1, r3
 80072bc:	4610      	mov	r0, r2
 80072be:	f7fe fe8b 	bl	8005fd8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c6:	4b23      	ldr	r3, [pc, #140]	; (8007354 <xTaskResumeAll+0x128>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d302      	bcc.n	80072d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80072d0:	4b21      	ldr	r3, [pc, #132]	; (8007358 <xTaskResumeAll+0x12c>)
 80072d2:	2201      	movs	r2, #1
 80072d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072d6:	4b1c      	ldr	r3, [pc, #112]	; (8007348 <xTaskResumeAll+0x11c>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1cc      	bne.n	8007278 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80072e4:	f000 fb58 	bl	8007998 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80072e8:	4b1c      	ldr	r3, [pc, #112]	; (800735c <xTaskResumeAll+0x130>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d010      	beq.n	8007316 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80072f4:	f000 f846 	bl	8007384 <xTaskIncrementTick>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80072fe:	4b16      	ldr	r3, [pc, #88]	; (8007358 <xTaskResumeAll+0x12c>)
 8007300:	2201      	movs	r2, #1
 8007302:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3b01      	subs	r3, #1
 8007308:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1f1      	bne.n	80072f4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007310:	4b12      	ldr	r3, [pc, #72]	; (800735c <xTaskResumeAll+0x130>)
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007316:	4b10      	ldr	r3, [pc, #64]	; (8007358 <xTaskResumeAll+0x12c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d009      	beq.n	8007332 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800731e:	2301      	movs	r3, #1
 8007320:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007322:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <xTaskResumeAll+0x134>)
 8007324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007332:	f001 f9ff 	bl	8008734 <vPortExitCritical>

	return xAlreadyYielded;
 8007336:	68bb      	ldr	r3, [r7, #8]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	20000944 	.word	0x20000944
 8007344:	2000091c 	.word	0x2000091c
 8007348:	200008dc 	.word	0x200008dc
 800734c:	20000924 	.word	0x20000924
 8007350:	20000820 	.word	0x20000820
 8007354:	2000081c 	.word	0x2000081c
 8007358:	20000930 	.word	0x20000930
 800735c:	2000092c 	.word	0x2000092c
 8007360:	e000ed04 	.word	0xe000ed04

08007364 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800736a:	4b05      	ldr	r3, [pc, #20]	; (8007380 <xTaskGetTickCount+0x1c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007370:	687b      	ldr	r3, [r7, #4]
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	20000920 	.word	0x20000920

08007384 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800738a:	2300      	movs	r3, #0
 800738c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800738e:	4b4e      	ldr	r3, [pc, #312]	; (80074c8 <xTaskIncrementTick+0x144>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f040 808e 	bne.w	80074b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007398:	4b4c      	ldr	r3, [pc, #304]	; (80074cc <xTaskIncrementTick+0x148>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3301      	adds	r3, #1
 800739e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073a0:	4a4a      	ldr	r2, [pc, #296]	; (80074cc <xTaskIncrementTick+0x148>)
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d120      	bne.n	80073ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80073ac:	4b48      	ldr	r3, [pc, #288]	; (80074d0 <xTaskIncrementTick+0x14c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00a      	beq.n	80073cc <xTaskIncrementTick+0x48>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	603b      	str	r3, [r7, #0]
}
 80073c8:	bf00      	nop
 80073ca:	e7fe      	b.n	80073ca <xTaskIncrementTick+0x46>
 80073cc:	4b40      	ldr	r3, [pc, #256]	; (80074d0 <xTaskIncrementTick+0x14c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	4b40      	ldr	r3, [pc, #256]	; (80074d4 <xTaskIncrementTick+0x150>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a3e      	ldr	r2, [pc, #248]	; (80074d0 <xTaskIncrementTick+0x14c>)
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	4a3e      	ldr	r2, [pc, #248]	; (80074d4 <xTaskIncrementTick+0x150>)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	4b3d      	ldr	r3, [pc, #244]	; (80074d8 <xTaskIncrementTick+0x154>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3301      	adds	r3, #1
 80073e6:	4a3c      	ldr	r2, [pc, #240]	; (80074d8 <xTaskIncrementTick+0x154>)
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	f000 fad5 	bl	8007998 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80073ee:	4b3b      	ldr	r3, [pc, #236]	; (80074dc <xTaskIncrementTick+0x158>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d348      	bcc.n	800748a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073f8:	4b35      	ldr	r3, [pc, #212]	; (80074d0 <xTaskIncrementTick+0x14c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d104      	bne.n	800740c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007402:	4b36      	ldr	r3, [pc, #216]	; (80074dc <xTaskIncrementTick+0x158>)
 8007404:	f04f 32ff 	mov.w	r2, #4294967295
 8007408:	601a      	str	r2, [r3, #0]
					break;
 800740a:	e03e      	b.n	800748a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800740c:	4b30      	ldr	r3, [pc, #192]	; (80074d0 <xTaskIncrementTick+0x14c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d203      	bcs.n	800742c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007424:	4a2d      	ldr	r2, [pc, #180]	; (80074dc <xTaskIncrementTick+0x158>)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800742a:	e02e      	b.n	800748a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	3304      	adds	r3, #4
 8007430:	4618      	mov	r0, r3
 8007432:	f7fe fe2e 	bl	8006092 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743a:	2b00      	cmp	r3, #0
 800743c:	d004      	beq.n	8007448 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	3318      	adds	r3, #24
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe fe25 	bl	8006092 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	2201      	movs	r2, #1
 800744e:	409a      	lsls	r2, r3
 8007450:	4b23      	ldr	r3, [pc, #140]	; (80074e0 <xTaskIncrementTick+0x15c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4313      	orrs	r3, r2
 8007456:	4a22      	ldr	r2, [pc, #136]	; (80074e0 <xTaskIncrementTick+0x15c>)
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4a1f      	ldr	r2, [pc, #124]	; (80074e4 <xTaskIncrementTick+0x160>)
 8007468:	441a      	add	r2, r3
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	3304      	adds	r3, #4
 800746e:	4619      	mov	r1, r3
 8007470:	4610      	mov	r0, r2
 8007472:	f7fe fdb1 	bl	8005fd8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747a:	4b1b      	ldr	r3, [pc, #108]	; (80074e8 <xTaskIncrementTick+0x164>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007480:	429a      	cmp	r2, r3
 8007482:	d3b9      	bcc.n	80073f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007484:	2301      	movs	r3, #1
 8007486:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007488:	e7b6      	b.n	80073f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800748a:	4b17      	ldr	r3, [pc, #92]	; (80074e8 <xTaskIncrementTick+0x164>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007490:	4914      	ldr	r1, [pc, #80]	; (80074e4 <xTaskIncrementTick+0x160>)
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	440b      	add	r3, r1
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d901      	bls.n	80074a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80074a2:	2301      	movs	r3, #1
 80074a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80074a6:	4b11      	ldr	r3, [pc, #68]	; (80074ec <xTaskIncrementTick+0x168>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80074ae:	2301      	movs	r3, #1
 80074b0:	617b      	str	r3, [r7, #20]
 80074b2:	e004      	b.n	80074be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80074b4:	4b0e      	ldr	r3, [pc, #56]	; (80074f0 <xTaskIncrementTick+0x16c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3301      	adds	r3, #1
 80074ba:	4a0d      	ldr	r2, [pc, #52]	; (80074f0 <xTaskIncrementTick+0x16c>)
 80074bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80074be:	697b      	ldr	r3, [r7, #20]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	20000944 	.word	0x20000944
 80074cc:	20000920 	.word	0x20000920
 80074d0:	200008d4 	.word	0x200008d4
 80074d4:	200008d8 	.word	0x200008d8
 80074d8:	20000934 	.word	0x20000934
 80074dc:	2000093c 	.word	0x2000093c
 80074e0:	20000924 	.word	0x20000924
 80074e4:	20000820 	.word	0x20000820
 80074e8:	2000081c 	.word	0x2000081c
 80074ec:	20000930 	.word	0x20000930
 80074f0:	2000092c 	.word	0x2000092c

080074f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074fa:	4b29      	ldr	r3, [pc, #164]	; (80075a0 <vTaskSwitchContext+0xac>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007502:	4b28      	ldr	r3, [pc, #160]	; (80075a4 <vTaskSwitchContext+0xb0>)
 8007504:	2201      	movs	r2, #1
 8007506:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007508:	e044      	b.n	8007594 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800750a:	4b26      	ldr	r3, [pc, #152]	; (80075a4 <vTaskSwitchContext+0xb0>)
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007510:	4b25      	ldr	r3, [pc, #148]	; (80075a8 <vTaskSwitchContext+0xb4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	fab3 f383 	clz	r3, r3
 800751c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800751e:	7afb      	ldrb	r3, [r7, #11]
 8007520:	f1c3 031f 	rsb	r3, r3, #31
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	4921      	ldr	r1, [pc, #132]	; (80075ac <vTaskSwitchContext+0xb8>)
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	4613      	mov	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	440b      	add	r3, r1
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10a      	bne.n	8007550 <vTaskSwitchContext+0x5c>
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	607b      	str	r3, [r7, #4]
}
 800754c:	bf00      	nop
 800754e:	e7fe      	b.n	800754e <vTaskSwitchContext+0x5a>
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	4613      	mov	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4a14      	ldr	r2, [pc, #80]	; (80075ac <vTaskSwitchContext+0xb8>)
 800755c:	4413      	add	r3, r2
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	605a      	str	r2, [r3, #4]
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	3308      	adds	r3, #8
 8007572:	429a      	cmp	r2, r3
 8007574:	d104      	bne.n	8007580 <vTaskSwitchContext+0x8c>
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	605a      	str	r2, [r3, #4]
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	4a0a      	ldr	r2, [pc, #40]	; (80075b0 <vTaskSwitchContext+0xbc>)
 8007588:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800758a:	4b09      	ldr	r3, [pc, #36]	; (80075b0 <vTaskSwitchContext+0xbc>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	334c      	adds	r3, #76	; 0x4c
 8007590:	4a08      	ldr	r2, [pc, #32]	; (80075b4 <vTaskSwitchContext+0xc0>)
 8007592:	6013      	str	r3, [r2, #0]
}
 8007594:	bf00      	nop
 8007596:	371c      	adds	r7, #28
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	20000944 	.word	0x20000944
 80075a4:	20000930 	.word	0x20000930
 80075a8:	20000924 	.word	0x20000924
 80075ac:	20000820 	.word	0x20000820
 80075b0:	2000081c 	.word	0x2000081c
 80075b4:	20000020 	.word	0x20000020

080075b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10a      	bne.n	80075de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	60fb      	str	r3, [r7, #12]
}
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075de:	4b07      	ldr	r3, [pc, #28]	; (80075fc <vTaskPlaceOnEventList+0x44>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3318      	adds	r3, #24
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7fe fd1a 	bl	8006020 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80075ec:	2101      	movs	r1, #1
 80075ee:	6838      	ldr	r0, [r7, #0]
 80075f0:	f000 fbae 	bl	8007d50 <prvAddCurrentTaskToDelayedList>
}
 80075f4:	bf00      	nop
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	2000081c 	.word	0x2000081c

08007600 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10a      	bne.n	8007628 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	617b      	str	r3, [r7, #20]
}
 8007624:	bf00      	nop
 8007626:	e7fe      	b.n	8007626 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007628:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <vTaskPlaceOnEventListRestricted+0x54>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3318      	adds	r3, #24
 800762e:	4619      	mov	r1, r3
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f7fe fcd1 	bl	8005fd8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800763c:	f04f 33ff 	mov.w	r3, #4294967295
 8007640:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	68b8      	ldr	r0, [r7, #8]
 8007646:	f000 fb83 	bl	8007d50 <prvAddCurrentTaskToDelayedList>
	}
 800764a:	bf00      	nop
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	2000081c 	.word	0x2000081c

08007658 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	60fb      	str	r3, [r7, #12]
}
 8007680:	bf00      	nop
 8007682:	e7fe      	b.n	8007682 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	3318      	adds	r3, #24
 8007688:	4618      	mov	r0, r3
 800768a:	f7fe fd02 	bl	8006092 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800768e:	4b1d      	ldr	r3, [pc, #116]	; (8007704 <xTaskRemoveFromEventList+0xac>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d11c      	bne.n	80076d0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	3304      	adds	r3, #4
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe fcf9 	bl	8006092 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	2201      	movs	r2, #1
 80076a6:	409a      	lsls	r2, r3
 80076a8:	4b17      	ldr	r3, [pc, #92]	; (8007708 <xTaskRemoveFromEventList+0xb0>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	4a16      	ldr	r2, [pc, #88]	; (8007708 <xTaskRemoveFromEventList+0xb0>)
 80076b0:	6013      	str	r3, [r2, #0]
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4a13      	ldr	r2, [pc, #76]	; (800770c <xTaskRemoveFromEventList+0xb4>)
 80076c0:	441a      	add	r2, r3
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	3304      	adds	r3, #4
 80076c6:	4619      	mov	r1, r3
 80076c8:	4610      	mov	r0, r2
 80076ca:	f7fe fc85 	bl	8005fd8 <vListInsertEnd>
 80076ce:	e005      	b.n	80076dc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	3318      	adds	r3, #24
 80076d4:	4619      	mov	r1, r3
 80076d6:	480e      	ldr	r0, [pc, #56]	; (8007710 <xTaskRemoveFromEventList+0xb8>)
 80076d8:	f7fe fc7e 	bl	8005fd8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e0:	4b0c      	ldr	r3, [pc, #48]	; (8007714 <xTaskRemoveFromEventList+0xbc>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d905      	bls.n	80076f6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80076ea:	2301      	movs	r3, #1
 80076ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80076ee:	4b0a      	ldr	r3, [pc, #40]	; (8007718 <xTaskRemoveFromEventList+0xc0>)
 80076f0:	2201      	movs	r2, #1
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	e001      	b.n	80076fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80076f6:	2300      	movs	r3, #0
 80076f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80076fa:	697b      	ldr	r3, [r7, #20]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20000944 	.word	0x20000944
 8007708:	20000924 	.word	0x20000924
 800770c:	20000820 	.word	0x20000820
 8007710:	200008dc 	.word	0x200008dc
 8007714:	2000081c 	.word	0x2000081c
 8007718:	20000930 	.word	0x20000930

0800771c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007724:	4b06      	ldr	r3, [pc, #24]	; (8007740 <vTaskInternalSetTimeOutState+0x24>)
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800772c:	4b05      	ldr	r3, [pc, #20]	; (8007744 <vTaskInternalSetTimeOutState+0x28>)
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	605a      	str	r2, [r3, #4]
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	20000934 	.word	0x20000934
 8007744:	20000920 	.word	0x20000920

08007748 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10a      	bne.n	800776e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	613b      	str	r3, [r7, #16]
}
 800776a:	bf00      	nop
 800776c:	e7fe      	b.n	800776c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10a      	bne.n	800778a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	60fb      	str	r3, [r7, #12]
}
 8007786:	bf00      	nop
 8007788:	e7fe      	b.n	8007788 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800778a:	f000 ffa3 	bl	80086d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800778e:	4b1d      	ldr	r3, [pc, #116]	; (8007804 <xTaskCheckForTimeOut+0xbc>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a6:	d102      	bne.n	80077ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80077a8:	2300      	movs	r3, #0
 80077aa:	61fb      	str	r3, [r7, #28]
 80077ac:	e023      	b.n	80077f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	4b15      	ldr	r3, [pc, #84]	; (8007808 <xTaskCheckForTimeOut+0xc0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d007      	beq.n	80077ca <xTaskCheckForTimeOut+0x82>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d302      	bcc.n	80077ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80077c4:	2301      	movs	r3, #1
 80077c6:	61fb      	str	r3, [r7, #28]
 80077c8:	e015      	b.n	80077f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d20b      	bcs.n	80077ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	1ad2      	subs	r2, r2, r3
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff ff9b 	bl	800771c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80077e6:	2300      	movs	r3, #0
 80077e8:	61fb      	str	r3, [r7, #28]
 80077ea:	e004      	b.n	80077f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80077f2:	2301      	movs	r3, #1
 80077f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80077f6:	f000 ff9d 	bl	8008734 <vPortExitCritical>

	return xReturn;
 80077fa:	69fb      	ldr	r3, [r7, #28]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3720      	adds	r7, #32
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	20000920 	.word	0x20000920
 8007808:	20000934 	.word	0x20000934

0800780c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007810:	4b03      	ldr	r3, [pc, #12]	; (8007820 <vTaskMissedYield+0x14>)
 8007812:	2201      	movs	r2, #1
 8007814:	601a      	str	r2, [r3, #0]
}
 8007816:	bf00      	nop
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	20000930 	.word	0x20000930

08007824 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800782c:	f000 f852 	bl	80078d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007830:	4b06      	ldr	r3, [pc, #24]	; (800784c <prvIdleTask+0x28>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d9f9      	bls.n	800782c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007838:	4b05      	ldr	r3, [pc, #20]	; (8007850 <prvIdleTask+0x2c>)
 800783a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007848:	e7f0      	b.n	800782c <prvIdleTask+0x8>
 800784a:	bf00      	nop
 800784c:	20000820 	.word	0x20000820
 8007850:	e000ed04 	.word	0xe000ed04

08007854 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800785a:	2300      	movs	r3, #0
 800785c:	607b      	str	r3, [r7, #4]
 800785e:	e00c      	b.n	800787a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4a12      	ldr	r2, [pc, #72]	; (80078b4 <prvInitialiseTaskLists+0x60>)
 800786c:	4413      	add	r3, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f7fe fb85 	bl	8005f7e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3301      	adds	r3, #1
 8007878:	607b      	str	r3, [r7, #4]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b06      	cmp	r3, #6
 800787e:	d9ef      	bls.n	8007860 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007880:	480d      	ldr	r0, [pc, #52]	; (80078b8 <prvInitialiseTaskLists+0x64>)
 8007882:	f7fe fb7c 	bl	8005f7e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007886:	480d      	ldr	r0, [pc, #52]	; (80078bc <prvInitialiseTaskLists+0x68>)
 8007888:	f7fe fb79 	bl	8005f7e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800788c:	480c      	ldr	r0, [pc, #48]	; (80078c0 <prvInitialiseTaskLists+0x6c>)
 800788e:	f7fe fb76 	bl	8005f7e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007892:	480c      	ldr	r0, [pc, #48]	; (80078c4 <prvInitialiseTaskLists+0x70>)
 8007894:	f7fe fb73 	bl	8005f7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007898:	480b      	ldr	r0, [pc, #44]	; (80078c8 <prvInitialiseTaskLists+0x74>)
 800789a:	f7fe fb70 	bl	8005f7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800789e:	4b0b      	ldr	r3, [pc, #44]	; (80078cc <prvInitialiseTaskLists+0x78>)
 80078a0:	4a05      	ldr	r2, [pc, #20]	; (80078b8 <prvInitialiseTaskLists+0x64>)
 80078a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078a4:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <prvInitialiseTaskLists+0x7c>)
 80078a6:	4a05      	ldr	r2, [pc, #20]	; (80078bc <prvInitialiseTaskLists+0x68>)
 80078a8:	601a      	str	r2, [r3, #0]
}
 80078aa:	bf00      	nop
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000820 	.word	0x20000820
 80078b8:	200008ac 	.word	0x200008ac
 80078bc:	200008c0 	.word	0x200008c0
 80078c0:	200008dc 	.word	0x200008dc
 80078c4:	200008f0 	.word	0x200008f0
 80078c8:	20000908 	.word	0x20000908
 80078cc:	200008d4 	.word	0x200008d4
 80078d0:	200008d8 	.word	0x200008d8

080078d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078da:	e019      	b.n	8007910 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078dc:	f000 fefa 	bl	80086d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078e0:	4b10      	ldr	r3, [pc, #64]	; (8007924 <prvCheckTasksWaitingTermination+0x50>)
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3304      	adds	r3, #4
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fe fbd0 	bl	8006092 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80078f2:	4b0d      	ldr	r3, [pc, #52]	; (8007928 <prvCheckTasksWaitingTermination+0x54>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	4a0b      	ldr	r2, [pc, #44]	; (8007928 <prvCheckTasksWaitingTermination+0x54>)
 80078fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078fc:	4b0b      	ldr	r3, [pc, #44]	; (800792c <prvCheckTasksWaitingTermination+0x58>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3b01      	subs	r3, #1
 8007902:	4a0a      	ldr	r2, [pc, #40]	; (800792c <prvCheckTasksWaitingTermination+0x58>)
 8007904:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007906:	f000 ff15 	bl	8008734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f810 	bl	8007930 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007910:	4b06      	ldr	r3, [pc, #24]	; (800792c <prvCheckTasksWaitingTermination+0x58>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e1      	bne.n	80078dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	200008f0 	.word	0x200008f0
 8007928:	2000091c 	.word	0x2000091c
 800792c:	20000904 	.word	0x20000904

08007930 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	334c      	adds	r3, #76	; 0x4c
 800793c:	4618      	mov	r0, r3
 800793e:	f001 fa7f 	bl	8008e40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007948:	2b00      	cmp	r3, #0
 800794a:	d108      	bne.n	800795e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007950:	4618      	mov	r0, r3
 8007952:	f001 f8ad 	bl	8008ab0 <vPortFree>
				vPortFree( pxTCB );
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 f8aa 	bl	8008ab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800795c:	e018      	b.n	8007990 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007964:	2b01      	cmp	r3, #1
 8007966:	d103      	bne.n	8007970 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 f8a1 	bl	8008ab0 <vPortFree>
	}
 800796e:	e00f      	b.n	8007990 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007976:	2b02      	cmp	r3, #2
 8007978:	d00a      	beq.n	8007990 <prvDeleteTCB+0x60>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	60fb      	str	r3, [r7, #12]
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <prvDeleteTCB+0x5e>
	}
 8007990:	bf00      	nop
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800799e:	4b0c      	ldr	r3, [pc, #48]	; (80079d0 <prvResetNextTaskUnblockTime+0x38>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d104      	bne.n	80079b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079a8:	4b0a      	ldr	r3, [pc, #40]	; (80079d4 <prvResetNextTaskUnblockTime+0x3c>)
 80079aa:	f04f 32ff 	mov.w	r2, #4294967295
 80079ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079b0:	e008      	b.n	80079c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079b2:	4b07      	ldr	r3, [pc, #28]	; (80079d0 <prvResetNextTaskUnblockTime+0x38>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	4a04      	ldr	r2, [pc, #16]	; (80079d4 <prvResetNextTaskUnblockTime+0x3c>)
 80079c2:	6013      	str	r3, [r2, #0]
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	200008d4 	.word	0x200008d4
 80079d4:	2000093c 	.word	0x2000093c

080079d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80079de:	4b0b      	ldr	r3, [pc, #44]	; (8007a0c <xTaskGetSchedulerState+0x34>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d102      	bne.n	80079ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079e6:	2301      	movs	r3, #1
 80079e8:	607b      	str	r3, [r7, #4]
 80079ea:	e008      	b.n	80079fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079ec:	4b08      	ldr	r3, [pc, #32]	; (8007a10 <xTaskGetSchedulerState+0x38>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d102      	bne.n	80079fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80079f4:	2302      	movs	r3, #2
 80079f6:	607b      	str	r3, [r7, #4]
 80079f8:	e001      	b.n	80079fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079fa:	2300      	movs	r3, #0
 80079fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079fe:	687b      	ldr	r3, [r7, #4]
	}
 8007a00:	4618      	mov	r0, r3
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	20000928 	.word	0x20000928
 8007a10:	20000944 	.word	0x20000944

08007a14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d05e      	beq.n	8007ae8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a2e:	4b31      	ldr	r3, [pc, #196]	; (8007af4 <xTaskPriorityInherit+0xe0>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d24e      	bcs.n	8007ad6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	db06      	blt.n	8007a4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a40:	4b2c      	ldr	r3, [pc, #176]	; (8007af4 <xTaskPriorityInherit+0xe0>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a46:	f1c3 0207 	rsb	r2, r3, #7
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	6959      	ldr	r1, [r3, #20]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4a26      	ldr	r2, [pc, #152]	; (8007af8 <xTaskPriorityInherit+0xe4>)
 8007a60:	4413      	add	r3, r2
 8007a62:	4299      	cmp	r1, r3
 8007a64:	d12f      	bne.n	8007ac6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	3304      	adds	r3, #4
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe fb11 	bl	8006092 <uxListRemove>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10a      	bne.n	8007a8c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a80:	43da      	mvns	r2, r3
 8007a82:	4b1e      	ldr	r3, [pc, #120]	; (8007afc <xTaskPriorityInherit+0xe8>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4013      	ands	r3, r2
 8007a88:	4a1c      	ldr	r2, [pc, #112]	; (8007afc <xTaskPriorityInherit+0xe8>)
 8007a8a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a8c:	4b19      	ldr	r3, [pc, #100]	; (8007af4 <xTaskPriorityInherit+0xe0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	409a      	lsls	r2, r3
 8007a9e:	4b17      	ldr	r3, [pc, #92]	; (8007afc <xTaskPriorityInherit+0xe8>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	4a15      	ldr	r2, [pc, #84]	; (8007afc <xTaskPriorityInherit+0xe8>)
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aac:	4613      	mov	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4a10      	ldr	r2, [pc, #64]	; (8007af8 <xTaskPriorityInherit+0xe4>)
 8007ab6:	441a      	add	r2, r3
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	3304      	adds	r3, #4
 8007abc:	4619      	mov	r1, r3
 8007abe:	4610      	mov	r0, r2
 8007ac0:	f7fe fa8a 	bl	8005fd8 <vListInsertEnd>
 8007ac4:	e004      	b.n	8007ad0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <xTaskPriorityInherit+0xe0>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	e008      	b.n	8007ae8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ada:	4b06      	ldr	r3, [pc, #24]	; (8007af4 <xTaskPriorityInherit+0xe0>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d201      	bcs.n	8007ae8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
	}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	2000081c 	.word	0x2000081c
 8007af8:	20000820 	.word	0x20000820
 8007afc:	20000924 	.word	0x20000924

08007b00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d06e      	beq.n	8007bf4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b16:	4b3a      	ldr	r3, [pc, #232]	; (8007c00 <xTaskPriorityDisinherit+0x100>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d00a      	beq.n	8007b36 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	60fb      	str	r3, [r7, #12]
}
 8007b32:	bf00      	nop
 8007b34:	e7fe      	b.n	8007b34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10a      	bne.n	8007b54 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	60bb      	str	r3, [r7, #8]
}
 8007b50:	bf00      	nop
 8007b52:	e7fe      	b.n	8007b52 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b58:	1e5a      	subs	r2, r3, #1
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d044      	beq.n	8007bf4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d140      	bne.n	8007bf4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	3304      	adds	r3, #4
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fe fa8b 	bl	8006092 <uxListRemove>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d115      	bne.n	8007bae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b86:	491f      	ldr	r1, [pc, #124]	; (8007c04 <xTaskPriorityDisinherit+0x104>)
 8007b88:	4613      	mov	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	440b      	add	r3, r1
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10a      	bne.n	8007bae <xTaskPriorityDisinherit+0xae>
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	43da      	mvns	r2, r3
 8007ba4:	4b18      	ldr	r3, [pc, #96]	; (8007c08 <xTaskPriorityDisinherit+0x108>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4013      	ands	r3, r2
 8007baa:	4a17      	ldr	r2, [pc, #92]	; (8007c08 <xTaskPriorityDisinherit+0x108>)
 8007bac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bba:	f1c3 0207 	rsb	r2, r3, #7
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	409a      	lsls	r2, r3
 8007bca:	4b0f      	ldr	r3, [pc, #60]	; (8007c08 <xTaskPriorityDisinherit+0x108>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	4a0d      	ldr	r2, [pc, #52]	; (8007c08 <xTaskPriorityDisinherit+0x108>)
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4a08      	ldr	r2, [pc, #32]	; (8007c04 <xTaskPriorityDisinherit+0x104>)
 8007be2:	441a      	add	r2, r3
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f7fe f9f4 	bl	8005fd8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007bf4:	697b      	ldr	r3, [r7, #20]
	}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	2000081c 	.word	0x2000081c
 8007c04:	20000820 	.word	0x20000820
 8007c08:	20000924 	.word	0x20000924

08007c0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d077      	beq.n	8007d14 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10a      	bne.n	8007c42 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	60fb      	str	r3, [r7, #12]
}
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d902      	bls.n	8007c52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	61fb      	str	r3, [r7, #28]
 8007c50:	e002      	b.n	8007c58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	69fa      	ldr	r2, [r7, #28]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d058      	beq.n	8007d14 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d153      	bne.n	8007d14 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007c6c:	4b2b      	ldr	r3, [pc, #172]	; (8007d1c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d10a      	bne.n	8007c8c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	60bb      	str	r3, [r7, #8]
}
 8007c88:	bf00      	nop
 8007c8a:	e7fe      	b.n	8007c8a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	69fa      	ldr	r2, [r7, #28]
 8007c96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	db04      	blt.n	8007caa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	f1c3 0207 	rsb	r2, r3, #7
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	6959      	ldr	r1, [r3, #20]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4a19      	ldr	r2, [pc, #100]	; (8007d20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007cba:	4413      	add	r3, r2
 8007cbc:	4299      	cmp	r1, r3
 8007cbe:	d129      	bne.n	8007d14 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fe f9e4 	bl	8006092 <uxListRemove>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cda:	43da      	mvns	r2, r3
 8007cdc:	4b11      	ldr	r3, [pc, #68]	; (8007d24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	4a10      	ldr	r2, [pc, #64]	; (8007d24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007ce4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	2201      	movs	r2, #1
 8007cec:	409a      	lsls	r2, r3
 8007cee:	4b0d      	ldr	r3, [pc, #52]	; (8007d24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	4a0b      	ldr	r2, [pc, #44]	; (8007d24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4a06      	ldr	r2, [pc, #24]	; (8007d20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007d06:	441a      	add	r2, r3
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4610      	mov	r0, r2
 8007d10:	f7fe f962 	bl	8005fd8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d14:	bf00      	nop
 8007d16:	3720      	adds	r7, #32
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	2000081c 	.word	0x2000081c
 8007d20:	20000820 	.word	0x20000820
 8007d24:	20000924 	.word	0x20000924

08007d28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007d28:	b480      	push	{r7}
 8007d2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d2c:	4b07      	ldr	r3, [pc, #28]	; (8007d4c <pvTaskIncrementMutexHeldCount+0x24>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d004      	beq.n	8007d3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <pvTaskIncrementMutexHeldCount+0x24>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d3a:	3201      	adds	r2, #1
 8007d3c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007d3e:	4b03      	ldr	r3, [pc, #12]	; (8007d4c <pvTaskIncrementMutexHeldCount+0x24>)
 8007d40:	681b      	ldr	r3, [r3, #0]
	}
 8007d42:	4618      	mov	r0, r3
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	2000081c 	.word	0x2000081c

08007d50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d5a:	4b29      	ldr	r3, [pc, #164]	; (8007e00 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d60:	4b28      	ldr	r3, [pc, #160]	; (8007e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3304      	adds	r3, #4
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe f993 	bl	8006092 <uxListRemove>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10b      	bne.n	8007d8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007d72:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	2201      	movs	r2, #1
 8007d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7e:	43da      	mvns	r2, r3
 8007d80:	4b21      	ldr	r3, [pc, #132]	; (8007e08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4013      	ands	r3, r2
 8007d86:	4a20      	ldr	r2, [pc, #128]	; (8007e08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d90:	d10a      	bne.n	8007da8 <prvAddCurrentTaskToDelayedList+0x58>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d007      	beq.n	8007da8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d98:	4b1a      	ldr	r3, [pc, #104]	; (8007e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	4619      	mov	r1, r3
 8007da0:	481a      	ldr	r0, [pc, #104]	; (8007e0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007da2:	f7fe f919 	bl	8005fd8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007da6:	e026      	b.n	8007df6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4413      	add	r3, r2
 8007dae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007db0:	4b14      	ldr	r3, [pc, #80]	; (8007e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d209      	bcs.n	8007dd4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dc0:	4b13      	ldr	r3, [pc, #76]	; (8007e10 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	4b0f      	ldr	r3, [pc, #60]	; (8007e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3304      	adds	r3, #4
 8007dca:	4619      	mov	r1, r3
 8007dcc:	4610      	mov	r0, r2
 8007dce:	f7fe f927 	bl	8006020 <vListInsert>
}
 8007dd2:	e010      	b.n	8007df6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dd4:	4b0f      	ldr	r3, [pc, #60]	; (8007e14 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	4b0a      	ldr	r3, [pc, #40]	; (8007e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3304      	adds	r3, #4
 8007dde:	4619      	mov	r1, r3
 8007de0:	4610      	mov	r0, r2
 8007de2:	f7fe f91d 	bl	8006020 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007de6:	4b0c      	ldr	r3, [pc, #48]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d202      	bcs.n	8007df6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007df0:	4a09      	ldr	r2, [pc, #36]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	6013      	str	r3, [r2, #0]
}
 8007df6:	bf00      	nop
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20000920 	.word	0x20000920
 8007e04:	2000081c 	.word	0x2000081c
 8007e08:	20000924 	.word	0x20000924
 8007e0c:	20000908 	.word	0x20000908
 8007e10:	200008d8 	.word	0x200008d8
 8007e14:	200008d4 	.word	0x200008d4
 8007e18:	2000093c 	.word	0x2000093c

08007e1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08a      	sub	sp, #40	; 0x28
 8007e20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e22:	2300      	movs	r3, #0
 8007e24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e26:	f000 faeb 	bl	8008400 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e2a:	4b1c      	ldr	r3, [pc, #112]	; (8007e9c <xTimerCreateTimerTask+0x80>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d021      	beq.n	8007e76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e32:	2300      	movs	r3, #0
 8007e34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e3a:	1d3a      	adds	r2, r7, #4
 8007e3c:	f107 0108 	add.w	r1, r7, #8
 8007e40:	f107 030c 	add.w	r3, r7, #12
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7f8 fbb9 	bl	80005bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e4a:	6879      	ldr	r1, [r7, #4]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	9202      	str	r2, [sp, #8]
 8007e52:	9301      	str	r3, [sp, #4]
 8007e54:	2302      	movs	r3, #2
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	460a      	mov	r2, r1
 8007e5c:	4910      	ldr	r1, [pc, #64]	; (8007ea0 <xTimerCreateTimerTask+0x84>)
 8007e5e:	4811      	ldr	r0, [pc, #68]	; (8007ea4 <xTimerCreateTimerTask+0x88>)
 8007e60:	f7fe ff88 	bl	8006d74 <xTaskCreateStatic>
 8007e64:	4603      	mov	r3, r0
 8007e66:	4a10      	ldr	r2, [pc, #64]	; (8007ea8 <xTimerCreateTimerTask+0x8c>)
 8007e68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <xTimerCreateTimerTask+0x8c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e72:	2301      	movs	r3, #1
 8007e74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10a      	bne.n	8007e92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	613b      	str	r3, [r7, #16]
}
 8007e8e:	bf00      	nop
 8007e90:	e7fe      	b.n	8007e90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e92:	697b      	ldr	r3, [r7, #20]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	20000978 	.word	0x20000978
 8007ea0:	080097e8 	.word	0x080097e8
 8007ea4:	08007fe1 	.word	0x08007fe1
 8007ea8:	2000097c 	.word	0x2000097c

08007eac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08a      	sub	sp, #40	; 0x28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10a      	bne.n	8007eda <xTimerGenericCommand+0x2e>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	623b      	str	r3, [r7, #32]
}
 8007ed6:	bf00      	nop
 8007ed8:	e7fe      	b.n	8007ed8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007eda:	4b1a      	ldr	r3, [pc, #104]	; (8007f44 <xTimerGenericCommand+0x98>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d02a      	beq.n	8007f38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2b05      	cmp	r3, #5
 8007ef2:	dc18      	bgt.n	8007f26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ef4:	f7ff fd70 	bl	80079d8 <xTaskGetSchedulerState>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d109      	bne.n	8007f12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007efe:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <xTimerGenericCommand+0x98>)
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	f107 0114 	add.w	r1, r7, #20
 8007f06:	2300      	movs	r3, #0
 8007f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f0a:	f7fe fa27 	bl	800635c <xQueueGenericSend>
 8007f0e:	6278      	str	r0, [r7, #36]	; 0x24
 8007f10:	e012      	b.n	8007f38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f12:	4b0c      	ldr	r3, [pc, #48]	; (8007f44 <xTimerGenericCommand+0x98>)
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	f107 0114 	add.w	r1, r7, #20
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f7fe fa1d 	bl	800635c <xQueueGenericSend>
 8007f22:	6278      	str	r0, [r7, #36]	; 0x24
 8007f24:	e008      	b.n	8007f38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f26:	4b07      	ldr	r3, [pc, #28]	; (8007f44 <xTimerGenericCommand+0x98>)
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	f107 0114 	add.w	r1, r7, #20
 8007f2e:	2300      	movs	r3, #0
 8007f30:	683a      	ldr	r2, [r7, #0]
 8007f32:	f7fe fb11 	bl	8006558 <xQueueGenericSendFromISR>
 8007f36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3728      	adds	r7, #40	; 0x28
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	20000978 	.word	0x20000978

08007f48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af02      	add	r7, sp, #8
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f52:	4b22      	ldr	r3, [pc, #136]	; (8007fdc <prvProcessExpiredTimer+0x94>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	3304      	adds	r3, #4
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7fe f896 	bl	8006092 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d022      	beq.n	8007fba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	699a      	ldr	r2, [r3, #24]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	18d1      	adds	r1, r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	6978      	ldr	r0, [r7, #20]
 8007f82:	f000 f8d1 	bl	8008128 <prvInsertTimerInActiveList>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d01f      	beq.n	8007fcc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	2300      	movs	r3, #0
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	2100      	movs	r1, #0
 8007f96:	6978      	ldr	r0, [r7, #20]
 8007f98:	f7ff ff88 	bl	8007eac <xTimerGenericCommand>
 8007f9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d113      	bne.n	8007fcc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	60fb      	str	r3, [r7, #12]
}
 8007fb6:	bf00      	nop
 8007fb8:	e7fe      	b.n	8007fb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fc0:	f023 0301 	bic.w	r3, r3, #1
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	6978      	ldr	r0, [r7, #20]
 8007fd2:	4798      	blx	r3
}
 8007fd4:	bf00      	nop
 8007fd6:	3718      	adds	r7, #24
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	20000970 	.word	0x20000970

08007fe0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fe8:	f107 0308 	add.w	r3, r7, #8
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 f857 	bl	80080a0 <prvGetNextExpireTime>
 8007ff2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 f803 	bl	8008004 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ffe:	f000 f8d5 	bl	80081ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008002:	e7f1      	b.n	8007fe8 <prvTimerTask+0x8>

08008004 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800800e:	f7ff f8ff 	bl	8007210 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008012:	f107 0308 	add.w	r3, r7, #8
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f866 	bl	80080e8 <prvSampleTimeNow>
 800801c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d130      	bne.n	8008086 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10a      	bne.n	8008040 <prvProcessTimerOrBlockTask+0x3c>
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	429a      	cmp	r2, r3
 8008030:	d806      	bhi.n	8008040 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008032:	f7ff f8fb 	bl	800722c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008036:	68f9      	ldr	r1, [r7, #12]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7ff ff85 	bl	8007f48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800803e:	e024      	b.n	800808a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d008      	beq.n	8008058 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008046:	4b13      	ldr	r3, [pc, #76]	; (8008094 <prvProcessTimerOrBlockTask+0x90>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <prvProcessTimerOrBlockTask+0x50>
 8008050:	2301      	movs	r3, #1
 8008052:	e000      	b.n	8008056 <prvProcessTimerOrBlockTask+0x52>
 8008054:	2300      	movs	r3, #0
 8008056:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008058:	4b0f      	ldr	r3, [pc, #60]	; (8008098 <prvProcessTimerOrBlockTask+0x94>)
 800805a:	6818      	ldr	r0, [r3, #0]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	4619      	mov	r1, r3
 8008066:	f7fe fe51 	bl	8006d0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800806a:	f7ff f8df 	bl	800722c <xTaskResumeAll>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10a      	bne.n	800808a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008074:	4b09      	ldr	r3, [pc, #36]	; (800809c <prvProcessTimerOrBlockTask+0x98>)
 8008076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	f3bf 8f6f 	isb	sy
}
 8008084:	e001      	b.n	800808a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008086:	f7ff f8d1 	bl	800722c <xTaskResumeAll>
}
 800808a:	bf00      	nop
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	20000974 	.word	0x20000974
 8008098:	20000978 	.word	0x20000978
 800809c:	e000ed04 	.word	0xe000ed04

080080a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080a8:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <prvGetNextExpireTime+0x44>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <prvGetNextExpireTime+0x16>
 80080b2:	2201      	movs	r2, #1
 80080b4:	e000      	b.n	80080b8 <prvGetNextExpireTime+0x18>
 80080b6:	2200      	movs	r2, #0
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d105      	bne.n	80080d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080c4:	4b07      	ldr	r3, [pc, #28]	; (80080e4 <prvGetNextExpireTime+0x44>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	e001      	b.n	80080d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080d0:	2300      	movs	r3, #0
 80080d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80080d4:	68fb      	ldr	r3, [r7, #12]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	20000970 	.word	0x20000970

080080e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80080f0:	f7ff f938 	bl	8007364 <xTaskGetTickCount>
 80080f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080f6:	4b0b      	ldr	r3, [pc, #44]	; (8008124 <prvSampleTimeNow+0x3c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d205      	bcs.n	800810c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008100:	f000 f91a 	bl	8008338 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	e002      	b.n	8008112 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008112:	4a04      	ldr	r2, [pc, #16]	; (8008124 <prvSampleTimeNow+0x3c>)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008118:	68fb      	ldr	r3, [r7, #12]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	20000980 	.word	0x20000980

08008128 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008136:	2300      	movs	r3, #0
 8008138:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	429a      	cmp	r2, r3
 800814c:	d812      	bhi.n	8008174 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	1ad2      	subs	r2, r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	429a      	cmp	r2, r3
 800815a:	d302      	bcc.n	8008162 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800815c:	2301      	movs	r3, #1
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	e01b      	b.n	800819a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008162:	4b10      	ldr	r3, [pc, #64]	; (80081a4 <prvInsertTimerInActiveList+0x7c>)
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3304      	adds	r3, #4
 800816a:	4619      	mov	r1, r3
 800816c:	4610      	mov	r0, r2
 800816e:	f7fd ff57 	bl	8006020 <vListInsert>
 8008172:	e012      	b.n	800819a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	429a      	cmp	r2, r3
 800817a:	d206      	bcs.n	800818a <prvInsertTimerInActiveList+0x62>
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	429a      	cmp	r2, r3
 8008182:	d302      	bcc.n	800818a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008184:	2301      	movs	r3, #1
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	e007      	b.n	800819a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800818a:	4b07      	ldr	r3, [pc, #28]	; (80081a8 <prvInsertTimerInActiveList+0x80>)
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	3304      	adds	r3, #4
 8008192:	4619      	mov	r1, r3
 8008194:	4610      	mov	r0, r2
 8008196:	f7fd ff43 	bl	8006020 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800819a:	697b      	ldr	r3, [r7, #20]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20000974 	.word	0x20000974
 80081a8:	20000970 	.word	0x20000970

080081ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08c      	sub	sp, #48	; 0x30
 80081b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081b2:	e0ae      	b.n	8008312 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f2c0 80aa 	blt.w	8008310 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d004      	beq.n	80081d2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	3304      	adds	r3, #4
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fd ff60 	bl	8006092 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081d2:	1d3b      	adds	r3, r7, #4
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff ff87 	bl	80080e8 <prvSampleTimeNow>
 80081da:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2b09      	cmp	r3, #9
 80081e0:	f200 8097 	bhi.w	8008312 <prvProcessReceivedCommands+0x166>
 80081e4:	a201      	add	r2, pc, #4	; (adr r2, 80081ec <prvProcessReceivedCommands+0x40>)
 80081e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ea:	bf00      	nop
 80081ec:	08008215 	.word	0x08008215
 80081f0:	08008215 	.word	0x08008215
 80081f4:	08008215 	.word	0x08008215
 80081f8:	08008289 	.word	0x08008289
 80081fc:	0800829d 	.word	0x0800829d
 8008200:	080082e7 	.word	0x080082e7
 8008204:	08008215 	.word	0x08008215
 8008208:	08008215 	.word	0x08008215
 800820c:	08008289 	.word	0x08008289
 8008210:	0800829d 	.word	0x0800829d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800821a:	f043 0301 	orr.w	r3, r3, #1
 800821e:	b2da      	uxtb	r2, r3
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	18d1      	adds	r1, r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6a3a      	ldr	r2, [r7, #32]
 8008232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008234:	f7ff ff78 	bl	8008128 <prvInsertTimerInActiveList>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d069      	beq.n	8008312 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008244:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008248:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800824c:	f003 0304 	and.w	r3, r3, #4
 8008250:	2b00      	cmp	r3, #0
 8008252:	d05e      	beq.n	8008312 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	441a      	add	r2, r3
 800825c:	2300      	movs	r3, #0
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	2300      	movs	r3, #0
 8008262:	2100      	movs	r1, #0
 8008264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008266:	f7ff fe21 	bl	8007eac <xTimerGenericCommand>
 800826a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d14f      	bne.n	8008312 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	61bb      	str	r3, [r7, #24]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800828e:	f023 0301 	bic.w	r3, r3, #1
 8008292:	b2da      	uxtb	r2, r3
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800829a:	e03a      	b.n	8008312 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80082a2:	f043 0301 	orr.w	r3, r3, #1
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10a      	bne.n	80082d2 <prvProcessReceivedCommands+0x126>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	617b      	str	r3, [r7, #20]
}
 80082ce:	bf00      	nop
 80082d0:	e7fe      	b.n	80082d0 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	699a      	ldr	r2, [r3, #24]
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	18d1      	adds	r1, r2, r3
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	6a3a      	ldr	r2, [r7, #32]
 80082de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082e0:	f7ff ff22 	bl	8008128 <prvInsertTimerInActiveList>
					break;
 80082e4:	e015      	b.n	8008312 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80082ec:	f003 0302 	and.w	r3, r3, #2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d103      	bne.n	80082fc <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80082f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082f6:	f000 fbdb 	bl	8008ab0 <vPortFree>
 80082fa:	e00a      	b.n	8008312 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008302:	f023 0301 	bic.w	r3, r3, #1
 8008306:	b2da      	uxtb	r2, r3
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800830e:	e000      	b.n	8008312 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008310:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008312:	4b08      	ldr	r3, [pc, #32]	; (8008334 <prvProcessReceivedCommands+0x188>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f107 0108 	add.w	r1, r7, #8
 800831a:	2200      	movs	r2, #0
 800831c:	4618      	mov	r0, r3
 800831e:	f7fe f9b7 	bl	8006690 <xQueueReceive>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	f47f af45 	bne.w	80081b4 <prvProcessReceivedCommands+0x8>
	}
}
 800832a:	bf00      	nop
 800832c:	bf00      	nop
 800832e:	3728      	adds	r7, #40	; 0x28
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	20000978 	.word	0x20000978

08008338 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800833e:	e048      	b.n	80083d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008340:	4b2d      	ldr	r3, [pc, #180]	; (80083f8 <prvSwitchTimerLists+0xc0>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800834a:	4b2b      	ldr	r3, [pc, #172]	; (80083f8 <prvSwitchTimerLists+0xc0>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3304      	adds	r3, #4
 8008358:	4618      	mov	r0, r3
 800835a:	f7fd fe9a 	bl	8006092 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800836c:	f003 0304 	and.w	r3, r3, #4
 8008370:	2b00      	cmp	r3, #0
 8008372:	d02e      	beq.n	80083d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	4413      	add	r3, r2
 800837c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	429a      	cmp	r2, r3
 8008384:	d90e      	bls.n	80083a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008392:	4b19      	ldr	r3, [pc, #100]	; (80083f8 <prvSwitchTimerLists+0xc0>)
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3304      	adds	r3, #4
 800839a:	4619      	mov	r1, r3
 800839c:	4610      	mov	r0, r2
 800839e:	f7fd fe3f 	bl	8006020 <vListInsert>
 80083a2:	e016      	b.n	80083d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083a4:	2300      	movs	r3, #0
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	2300      	movs	r3, #0
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	2100      	movs	r1, #0
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f7ff fd7c 	bl	8007eac <xTimerGenericCommand>
 80083b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10a      	bne.n	80083d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	603b      	str	r3, [r7, #0]
}
 80083ce:	bf00      	nop
 80083d0:	e7fe      	b.n	80083d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083d2:	4b09      	ldr	r3, [pc, #36]	; (80083f8 <prvSwitchTimerLists+0xc0>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1b1      	bne.n	8008340 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083dc:	4b06      	ldr	r3, [pc, #24]	; (80083f8 <prvSwitchTimerLists+0xc0>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083e2:	4b06      	ldr	r3, [pc, #24]	; (80083fc <prvSwitchTimerLists+0xc4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a04      	ldr	r2, [pc, #16]	; (80083f8 <prvSwitchTimerLists+0xc0>)
 80083e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083ea:	4a04      	ldr	r2, [pc, #16]	; (80083fc <prvSwitchTimerLists+0xc4>)
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	6013      	str	r3, [r2, #0]
}
 80083f0:	bf00      	nop
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	20000970 	.word	0x20000970
 80083fc:	20000974 	.word	0x20000974

08008400 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008406:	f000 f965 	bl	80086d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800840a:	4b15      	ldr	r3, [pc, #84]	; (8008460 <prvCheckForValidListAndQueue+0x60>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d120      	bne.n	8008454 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008412:	4814      	ldr	r0, [pc, #80]	; (8008464 <prvCheckForValidListAndQueue+0x64>)
 8008414:	f7fd fdb3 	bl	8005f7e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008418:	4813      	ldr	r0, [pc, #76]	; (8008468 <prvCheckForValidListAndQueue+0x68>)
 800841a:	f7fd fdb0 	bl	8005f7e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800841e:	4b13      	ldr	r3, [pc, #76]	; (800846c <prvCheckForValidListAndQueue+0x6c>)
 8008420:	4a10      	ldr	r2, [pc, #64]	; (8008464 <prvCheckForValidListAndQueue+0x64>)
 8008422:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008424:	4b12      	ldr	r3, [pc, #72]	; (8008470 <prvCheckForValidListAndQueue+0x70>)
 8008426:	4a10      	ldr	r2, [pc, #64]	; (8008468 <prvCheckForValidListAndQueue+0x68>)
 8008428:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800842a:	2300      	movs	r3, #0
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	4b11      	ldr	r3, [pc, #68]	; (8008474 <prvCheckForValidListAndQueue+0x74>)
 8008430:	4a11      	ldr	r2, [pc, #68]	; (8008478 <prvCheckForValidListAndQueue+0x78>)
 8008432:	210c      	movs	r1, #12
 8008434:	200a      	movs	r0, #10
 8008436:	f7fd febf 	bl	80061b8 <xQueueGenericCreateStatic>
 800843a:	4603      	mov	r3, r0
 800843c:	4a08      	ldr	r2, [pc, #32]	; (8008460 <prvCheckForValidListAndQueue+0x60>)
 800843e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <prvCheckForValidListAndQueue+0x60>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008448:	4b05      	ldr	r3, [pc, #20]	; (8008460 <prvCheckForValidListAndQueue+0x60>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	490b      	ldr	r1, [pc, #44]	; (800847c <prvCheckForValidListAndQueue+0x7c>)
 800844e:	4618      	mov	r0, r3
 8008450:	f7fe fc32 	bl	8006cb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008454:	f000 f96e 	bl	8008734 <vPortExitCritical>
}
 8008458:	bf00      	nop
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20000978 	.word	0x20000978
 8008464:	20000948 	.word	0x20000948
 8008468:	2000095c 	.word	0x2000095c
 800846c:	20000970 	.word	0x20000970
 8008470:	20000974 	.word	0x20000974
 8008474:	200009fc 	.word	0x200009fc
 8008478:	20000984 	.word	0x20000984
 800847c:	080097f0 	.word	0x080097f0

08008480 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	3b04      	subs	r3, #4
 8008490:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3b04      	subs	r3, #4
 800849e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f023 0201 	bic.w	r2, r3, #1
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3b04      	subs	r3, #4
 80084ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084b0:	4a0c      	ldr	r2, [pc, #48]	; (80084e4 <pxPortInitialiseStack+0x64>)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	3b14      	subs	r3, #20
 80084ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3b04      	subs	r3, #4
 80084c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f06f 0202 	mvn.w	r2, #2
 80084ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3b20      	subs	r3, #32
 80084d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084d6:	68fb      	ldr	r3, [r7, #12]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	080084e9 	.word	0x080084e9

080084e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084f2:	4b12      	ldr	r3, [pc, #72]	; (800853c <prvTaskExitError+0x54>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fa:	d00a      	beq.n	8008512 <prvTaskExitError+0x2a>
	__asm volatile
 80084fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	60fb      	str	r3, [r7, #12]
}
 800850e:	bf00      	nop
 8008510:	e7fe      	b.n	8008510 <prvTaskExitError+0x28>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	60bb      	str	r3, [r7, #8]
}
 8008524:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008526:	bf00      	nop
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0fc      	beq.n	8008528 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800852e:	bf00      	nop
 8008530:	bf00      	nop
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	2000001c 	.word	0x2000001c

08008540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <pxCurrentTCBConst2>)
 8008542:	6819      	ldr	r1, [r3, #0]
 8008544:	6808      	ldr	r0, [r1, #0]
 8008546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854a:	f380 8809 	msr	PSP, r0
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f04f 0000 	mov.w	r0, #0
 8008556:	f380 8811 	msr	BASEPRI, r0
 800855a:	4770      	bx	lr
 800855c:	f3af 8000 	nop.w

08008560 <pxCurrentTCBConst2>:
 8008560:	2000081c 	.word	0x2000081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop

08008568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008568:	4808      	ldr	r0, [pc, #32]	; (800858c <prvPortStartFirstTask+0x24>)
 800856a:	6800      	ldr	r0, [r0, #0]
 800856c:	6800      	ldr	r0, [r0, #0]
 800856e:	f380 8808 	msr	MSP, r0
 8008572:	f04f 0000 	mov.w	r0, #0
 8008576:	f380 8814 	msr	CONTROL, r0
 800857a:	b662      	cpsie	i
 800857c:	b661      	cpsie	f
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	df00      	svc	0
 8008588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800858a:	bf00      	nop
 800858c:	e000ed08 	.word	0xe000ed08

08008590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008596:	4b46      	ldr	r3, [pc, #280]	; (80086b0 <xPortStartScheduler+0x120>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a46      	ldr	r2, [pc, #280]	; (80086b4 <xPortStartScheduler+0x124>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d10a      	bne.n	80085b6 <xPortStartScheduler+0x26>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	613b      	str	r3, [r7, #16]
}
 80085b2:	bf00      	nop
 80085b4:	e7fe      	b.n	80085b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085b6:	4b3e      	ldr	r3, [pc, #248]	; (80086b0 <xPortStartScheduler+0x120>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a3f      	ldr	r2, [pc, #252]	; (80086b8 <xPortStartScheduler+0x128>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d10a      	bne.n	80085d6 <xPortStartScheduler+0x46>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	60fb      	str	r3, [r7, #12]
}
 80085d2:	bf00      	nop
 80085d4:	e7fe      	b.n	80085d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085d6:	4b39      	ldr	r3, [pc, #228]	; (80086bc <xPortStartScheduler+0x12c>)
 80085d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	22ff      	movs	r2, #255	; 0xff
 80085e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	4b31      	ldr	r3, [pc, #196]	; (80086c0 <xPortStartScheduler+0x130>)
 80085fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085fe:	4b31      	ldr	r3, [pc, #196]	; (80086c4 <xPortStartScheduler+0x134>)
 8008600:	2207      	movs	r2, #7
 8008602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008604:	e009      	b.n	800861a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008606:	4b2f      	ldr	r3, [pc, #188]	; (80086c4 <xPortStartScheduler+0x134>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3b01      	subs	r3, #1
 800860c:	4a2d      	ldr	r2, [pc, #180]	; (80086c4 <xPortStartScheduler+0x134>)
 800860e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	005b      	lsls	r3, r3, #1
 8008616:	b2db      	uxtb	r3, r3
 8008618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008622:	2b80      	cmp	r3, #128	; 0x80
 8008624:	d0ef      	beq.n	8008606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008626:	4b27      	ldr	r3, [pc, #156]	; (80086c4 <xPortStartScheduler+0x134>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f1c3 0307 	rsb	r3, r3, #7
 800862e:	2b04      	cmp	r3, #4
 8008630:	d00a      	beq.n	8008648 <xPortStartScheduler+0xb8>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	60bb      	str	r3, [r7, #8]
}
 8008644:	bf00      	nop
 8008646:	e7fe      	b.n	8008646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008648:	4b1e      	ldr	r3, [pc, #120]	; (80086c4 <xPortStartScheduler+0x134>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	021b      	lsls	r3, r3, #8
 800864e:	4a1d      	ldr	r2, [pc, #116]	; (80086c4 <xPortStartScheduler+0x134>)
 8008650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008652:	4b1c      	ldr	r3, [pc, #112]	; (80086c4 <xPortStartScheduler+0x134>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800865a:	4a1a      	ldr	r2, [pc, #104]	; (80086c4 <xPortStartScheduler+0x134>)
 800865c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	b2da      	uxtb	r2, r3
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008666:	4b18      	ldr	r3, [pc, #96]	; (80086c8 <xPortStartScheduler+0x138>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a17      	ldr	r2, [pc, #92]	; (80086c8 <xPortStartScheduler+0x138>)
 800866c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008672:	4b15      	ldr	r3, [pc, #84]	; (80086c8 <xPortStartScheduler+0x138>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a14      	ldr	r2, [pc, #80]	; (80086c8 <xPortStartScheduler+0x138>)
 8008678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800867c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800867e:	f000 f8dd 	bl	800883c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008682:	4b12      	ldr	r3, [pc, #72]	; (80086cc <xPortStartScheduler+0x13c>)
 8008684:	2200      	movs	r2, #0
 8008686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008688:	f000 f8fc 	bl	8008884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800868c:	4b10      	ldr	r3, [pc, #64]	; (80086d0 <xPortStartScheduler+0x140>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a0f      	ldr	r2, [pc, #60]	; (80086d0 <xPortStartScheduler+0x140>)
 8008692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008698:	f7ff ff66 	bl	8008568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800869c:	f7fe ff2a 	bl	80074f4 <vTaskSwitchContext>
	prvTaskExitError();
 80086a0:	f7ff ff22 	bl	80084e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	e000ed00 	.word	0xe000ed00
 80086b4:	410fc271 	.word	0x410fc271
 80086b8:	410fc270 	.word	0x410fc270
 80086bc:	e000e400 	.word	0xe000e400
 80086c0:	20000a44 	.word	0x20000a44
 80086c4:	20000a48 	.word	0x20000a48
 80086c8:	e000ed20 	.word	0xe000ed20
 80086cc:	2000001c 	.word	0x2000001c
 80086d0:	e000ef34 	.word	0xe000ef34

080086d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	607b      	str	r3, [r7, #4]
}
 80086ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086ee:	4b0f      	ldr	r3, [pc, #60]	; (800872c <vPortEnterCritical+0x58>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3301      	adds	r3, #1
 80086f4:	4a0d      	ldr	r2, [pc, #52]	; (800872c <vPortEnterCritical+0x58>)
 80086f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086f8:	4b0c      	ldr	r3, [pc, #48]	; (800872c <vPortEnterCritical+0x58>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d10f      	bne.n	8008720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008700:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <vPortEnterCritical+0x5c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <vPortEnterCritical+0x4c>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	603b      	str	r3, [r7, #0]
}
 800871c:	bf00      	nop
 800871e:	e7fe      	b.n	800871e <vPortEnterCritical+0x4a>
	}
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	2000001c 	.word	0x2000001c
 8008730:	e000ed04 	.word	0xe000ed04

08008734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800873a:	4b12      	ldr	r3, [pc, #72]	; (8008784 <vPortExitCritical+0x50>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10a      	bne.n	8008758 <vPortExitCritical+0x24>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	607b      	str	r3, [r7, #4]
}
 8008754:	bf00      	nop
 8008756:	e7fe      	b.n	8008756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008758:	4b0a      	ldr	r3, [pc, #40]	; (8008784 <vPortExitCritical+0x50>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3b01      	subs	r3, #1
 800875e:	4a09      	ldr	r2, [pc, #36]	; (8008784 <vPortExitCritical+0x50>)
 8008760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008762:	4b08      	ldr	r3, [pc, #32]	; (8008784 <vPortExitCritical+0x50>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d105      	bne.n	8008776 <vPortExitCritical+0x42>
 800876a:	2300      	movs	r3, #0
 800876c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	f383 8811 	msr	BASEPRI, r3
}
 8008774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	2000001c 	.word	0x2000001c
	...

08008790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008790:	f3ef 8009 	mrs	r0, PSP
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	4b15      	ldr	r3, [pc, #84]	; (80087f0 <pxCurrentTCBConst>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	f01e 0f10 	tst.w	lr, #16
 80087a0:	bf08      	it	eq
 80087a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087aa:	6010      	str	r0, [r2, #0]
 80087ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087b4:	f380 8811 	msr	BASEPRI, r0
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f7fe fe98 	bl	80074f4 <vTaskSwitchContext>
 80087c4:	f04f 0000 	mov.w	r0, #0
 80087c8:	f380 8811 	msr	BASEPRI, r0
 80087cc:	bc09      	pop	{r0, r3}
 80087ce:	6819      	ldr	r1, [r3, #0]
 80087d0:	6808      	ldr	r0, [r1, #0]
 80087d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d6:	f01e 0f10 	tst.w	lr, #16
 80087da:	bf08      	it	eq
 80087dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087e0:	f380 8809 	msr	PSP, r0
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	f3af 8000 	nop.w

080087f0 <pxCurrentTCBConst>:
 80087f0:	2000081c 	.word	0x2000081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop

080087f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	607b      	str	r3, [r7, #4]
}
 8008810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008812:	f7fe fdb7 	bl	8007384 <xTaskIncrementTick>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800881c:	4b06      	ldr	r3, [pc, #24]	; (8008838 <SysTick_Handler+0x40>)
 800881e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	2300      	movs	r3, #0
 8008826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	f383 8811 	msr	BASEPRI, r3
}
 800882e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	e000ed04 	.word	0xe000ed04

0800883c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008840:	4b0b      	ldr	r3, [pc, #44]	; (8008870 <vPortSetupTimerInterrupt+0x34>)
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008846:	4b0b      	ldr	r3, [pc, #44]	; (8008874 <vPortSetupTimerInterrupt+0x38>)
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800884c:	4b0a      	ldr	r3, [pc, #40]	; (8008878 <vPortSetupTimerInterrupt+0x3c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a0a      	ldr	r2, [pc, #40]	; (800887c <vPortSetupTimerInterrupt+0x40>)
 8008852:	fba2 2303 	umull	r2, r3, r2, r3
 8008856:	099b      	lsrs	r3, r3, #6
 8008858:	4a09      	ldr	r2, [pc, #36]	; (8008880 <vPortSetupTimerInterrupt+0x44>)
 800885a:	3b01      	subs	r3, #1
 800885c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800885e:	4b04      	ldr	r3, [pc, #16]	; (8008870 <vPortSetupTimerInterrupt+0x34>)
 8008860:	2207      	movs	r2, #7
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	e000e010 	.word	0xe000e010
 8008874:	e000e018 	.word	0xe000e018
 8008878:	20000010 	.word	0x20000010
 800887c:	10624dd3 	.word	0x10624dd3
 8008880:	e000e014 	.word	0xe000e014

08008884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008894 <vPortEnableVFP+0x10>
 8008888:	6801      	ldr	r1, [r0, #0]
 800888a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800888e:	6001      	str	r1, [r0, #0]
 8008890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008892:	bf00      	nop
 8008894:	e000ed88 	.word	0xe000ed88

08008898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800889e:	f3ef 8305 	mrs	r3, IPSR
 80088a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b0f      	cmp	r3, #15
 80088a8:	d914      	bls.n	80088d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088aa:	4a17      	ldr	r2, [pc, #92]	; (8008908 <vPortValidateInterruptPriority+0x70>)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4413      	add	r3, r2
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088b4:	4b15      	ldr	r3, [pc, #84]	; (800890c <vPortValidateInterruptPriority+0x74>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	7afa      	ldrb	r2, [r7, #11]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d20a      	bcs.n	80088d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	607b      	str	r3, [r7, #4]
}
 80088d0:	bf00      	nop
 80088d2:	e7fe      	b.n	80088d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088d4:	4b0e      	ldr	r3, [pc, #56]	; (8008910 <vPortValidateInterruptPriority+0x78>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088dc:	4b0d      	ldr	r3, [pc, #52]	; (8008914 <vPortValidateInterruptPriority+0x7c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d90a      	bls.n	80088fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	603b      	str	r3, [r7, #0]
}
 80088f6:	bf00      	nop
 80088f8:	e7fe      	b.n	80088f8 <vPortValidateInterruptPriority+0x60>
	}
 80088fa:	bf00      	nop
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	e000e3f0 	.word	0xe000e3f0
 800890c:	20000a44 	.word	0x20000a44
 8008910:	e000ed0c 	.word	0xe000ed0c
 8008914:	20000a48 	.word	0x20000a48

08008918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08a      	sub	sp, #40	; 0x28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008920:	2300      	movs	r3, #0
 8008922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008924:	f7fe fc74 	bl	8007210 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008928:	4b5b      	ldr	r3, [pc, #364]	; (8008a98 <pvPortMalloc+0x180>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008930:	f000 f920 	bl	8008b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008934:	4b59      	ldr	r3, [pc, #356]	; (8008a9c <pvPortMalloc+0x184>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4013      	ands	r3, r2
 800893c:	2b00      	cmp	r3, #0
 800893e:	f040 8093 	bne.w	8008a68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d01d      	beq.n	8008984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008948:	2208      	movs	r2, #8
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4413      	add	r3, r2
 800894e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	2b00      	cmp	r3, #0
 8008958:	d014      	beq.n	8008984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f023 0307 	bic.w	r3, r3, #7
 8008960:	3308      	adds	r3, #8
 8008962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00a      	beq.n	8008984 <pvPortMalloc+0x6c>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	617b      	str	r3, [r7, #20]
}
 8008980:	bf00      	nop
 8008982:	e7fe      	b.n	8008982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d06e      	beq.n	8008a68 <pvPortMalloc+0x150>
 800898a:	4b45      	ldr	r3, [pc, #276]	; (8008aa0 <pvPortMalloc+0x188>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	429a      	cmp	r2, r3
 8008992:	d869      	bhi.n	8008a68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008994:	4b43      	ldr	r3, [pc, #268]	; (8008aa4 <pvPortMalloc+0x18c>)
 8008996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008998:	4b42      	ldr	r3, [pc, #264]	; (8008aa4 <pvPortMalloc+0x18c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800899e:	e004      	b.n	80089aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d903      	bls.n	80089bc <pvPortMalloc+0xa4>
 80089b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1f1      	bne.n	80089a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089bc:	4b36      	ldr	r3, [pc, #216]	; (8008a98 <pvPortMalloc+0x180>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d050      	beq.n	8008a68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2208      	movs	r2, #8
 80089cc:	4413      	add	r3, r2
 80089ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	1ad2      	subs	r2, r2, r3
 80089e0:	2308      	movs	r3, #8
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d91f      	bls.n	8008a28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4413      	add	r3, r2
 80089ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00a      	beq.n	8008a10 <pvPortMalloc+0xf8>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	613b      	str	r3, [r7, #16]
}
 8008a0c:	bf00      	nop
 8008a0e:	e7fe      	b.n	8008a0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	1ad2      	subs	r2, r2, r3
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a22:	69b8      	ldr	r0, [r7, #24]
 8008a24:	f000 f908 	bl	8008c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a28:	4b1d      	ldr	r3, [pc, #116]	; (8008aa0 <pvPortMalloc+0x188>)
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	4a1b      	ldr	r2, [pc, #108]	; (8008aa0 <pvPortMalloc+0x188>)
 8008a34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a36:	4b1a      	ldr	r3, [pc, #104]	; (8008aa0 <pvPortMalloc+0x188>)
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	4b1b      	ldr	r3, [pc, #108]	; (8008aa8 <pvPortMalloc+0x190>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d203      	bcs.n	8008a4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a42:	4b17      	ldr	r3, [pc, #92]	; (8008aa0 <pvPortMalloc+0x188>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a18      	ldr	r2, [pc, #96]	; (8008aa8 <pvPortMalloc+0x190>)
 8008a48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	4b13      	ldr	r3, [pc, #76]	; (8008a9c <pvPortMalloc+0x184>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	431a      	orrs	r2, r3
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a5e:	4b13      	ldr	r3, [pc, #76]	; (8008aac <pvPortMalloc+0x194>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3301      	adds	r3, #1
 8008a64:	4a11      	ldr	r2, [pc, #68]	; (8008aac <pvPortMalloc+0x194>)
 8008a66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a68:	f7fe fbe0 	bl	800722c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	f003 0307 	and.w	r3, r3, #7
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00a      	beq.n	8008a8c <pvPortMalloc+0x174>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	60fb      	str	r3, [r7, #12]
}
 8008a88:	bf00      	nop
 8008a8a:	e7fe      	b.n	8008a8a <pvPortMalloc+0x172>
	return pvReturn;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3728      	adds	r7, #40	; 0x28
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	20004654 	.word	0x20004654
 8008a9c:	20004668 	.word	0x20004668
 8008aa0:	20004658 	.word	0x20004658
 8008aa4:	2000464c 	.word	0x2000464c
 8008aa8:	2000465c 	.word	0x2000465c
 8008aac:	20004660 	.word	0x20004660

08008ab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d04d      	beq.n	8008b5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ac2:	2308      	movs	r3, #8
 8008ac4:	425b      	negs	r3, r3
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	4413      	add	r3, r2
 8008aca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	4b24      	ldr	r3, [pc, #144]	; (8008b68 <vPortFree+0xb8>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4013      	ands	r3, r2
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10a      	bne.n	8008af4 <vPortFree+0x44>
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	60fb      	str	r3, [r7, #12]
}
 8008af0:	bf00      	nop
 8008af2:	e7fe      	b.n	8008af2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00a      	beq.n	8008b12 <vPortFree+0x62>
	__asm volatile
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	60bb      	str	r3, [r7, #8]
}
 8008b0e:	bf00      	nop
 8008b10:	e7fe      	b.n	8008b10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	685a      	ldr	r2, [r3, #4]
 8008b16:	4b14      	ldr	r3, [pc, #80]	; (8008b68 <vPortFree+0xb8>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d01e      	beq.n	8008b5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d11a      	bne.n	8008b5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	4b0e      	ldr	r3, [pc, #56]	; (8008b68 <vPortFree+0xb8>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	43db      	mvns	r3, r3
 8008b32:	401a      	ands	r2, r3
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b38:	f7fe fb6a 	bl	8007210 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	4b0a      	ldr	r3, [pc, #40]	; (8008b6c <vPortFree+0xbc>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4413      	add	r3, r2
 8008b46:	4a09      	ldr	r2, [pc, #36]	; (8008b6c <vPortFree+0xbc>)
 8008b48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b4a:	6938      	ldr	r0, [r7, #16]
 8008b4c:	f000 f874 	bl	8008c38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b50:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <vPortFree+0xc0>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3301      	adds	r3, #1
 8008b56:	4a06      	ldr	r2, [pc, #24]	; (8008b70 <vPortFree+0xc0>)
 8008b58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b5a:	f7fe fb67 	bl	800722c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b5e:	bf00      	nop
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20004668 	.word	0x20004668
 8008b6c:	20004658 	.word	0x20004658
 8008b70:	20004664 	.word	0x20004664

08008b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b80:	4b27      	ldr	r3, [pc, #156]	; (8008c20 <prvHeapInit+0xac>)
 8008b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f003 0307 	and.w	r3, r3, #7
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00c      	beq.n	8008ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3307      	adds	r3, #7
 8008b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f023 0307 	bic.w	r3, r3, #7
 8008b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	4a1f      	ldr	r2, [pc, #124]	; (8008c20 <prvHeapInit+0xac>)
 8008ba4:	4413      	add	r3, r2
 8008ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bac:	4a1d      	ldr	r2, [pc, #116]	; (8008c24 <prvHeapInit+0xb0>)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bb2:	4b1c      	ldr	r3, [pc, #112]	; (8008c24 <prvHeapInit+0xb0>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bc0:	2208      	movs	r2, #8
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	1a9b      	subs	r3, r3, r2
 8008bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f023 0307 	bic.w	r3, r3, #7
 8008bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4a15      	ldr	r2, [pc, #84]	; (8008c28 <prvHeapInit+0xb4>)
 8008bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bd6:	4b14      	ldr	r3, [pc, #80]	; (8008c28 <prvHeapInit+0xb4>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bde:	4b12      	ldr	r3, [pc, #72]	; (8008c28 <prvHeapInit+0xb4>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	1ad2      	subs	r2, r2, r3
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bf4:	4b0c      	ldr	r3, [pc, #48]	; (8008c28 <prvHeapInit+0xb4>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	4a0a      	ldr	r2, [pc, #40]	; (8008c2c <prvHeapInit+0xb8>)
 8008c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	4a09      	ldr	r2, [pc, #36]	; (8008c30 <prvHeapInit+0xbc>)
 8008c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c0c:	4b09      	ldr	r3, [pc, #36]	; (8008c34 <prvHeapInit+0xc0>)
 8008c0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c12:	601a      	str	r2, [r3, #0]
}
 8008c14:	bf00      	nop
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr
 8008c20:	20000a4c 	.word	0x20000a4c
 8008c24:	2000464c 	.word	0x2000464c
 8008c28:	20004654 	.word	0x20004654
 8008c2c:	2000465c 	.word	0x2000465c
 8008c30:	20004658 	.word	0x20004658
 8008c34:	20004668 	.word	0x20004668

08008c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c40:	4b28      	ldr	r3, [pc, #160]	; (8008ce4 <prvInsertBlockIntoFreeList+0xac>)
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	e002      	b.n	8008c4c <prvInsertBlockIntoFreeList+0x14>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d8f7      	bhi.n	8008c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	4413      	add	r3, r2
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d108      	bne.n	8008c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	441a      	add	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	441a      	add	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d118      	bne.n	8008cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	4b15      	ldr	r3, [pc, #84]	; (8008ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d00d      	beq.n	8008cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	441a      	add	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	e008      	b.n	8008cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	e003      	b.n	8008cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d002      	beq.n	8008cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cd6:	bf00      	nop
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	2000464c 	.word	0x2000464c
 8008ce8:	20004654 	.word	0x20004654

08008cec <__errno>:
 8008cec:	4b01      	ldr	r3, [pc, #4]	; (8008cf4 <__errno+0x8>)
 8008cee:	6818      	ldr	r0, [r3, #0]
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	20000020 	.word	0x20000020

08008cf8 <__libc_init_array>:
 8008cf8:	b570      	push	{r4, r5, r6, lr}
 8008cfa:	4d0d      	ldr	r5, [pc, #52]	; (8008d30 <__libc_init_array+0x38>)
 8008cfc:	4c0d      	ldr	r4, [pc, #52]	; (8008d34 <__libc_init_array+0x3c>)
 8008cfe:	1b64      	subs	r4, r4, r5
 8008d00:	10a4      	asrs	r4, r4, #2
 8008d02:	2600      	movs	r6, #0
 8008d04:	42a6      	cmp	r6, r4
 8008d06:	d109      	bne.n	8008d1c <__libc_init_array+0x24>
 8008d08:	4d0b      	ldr	r5, [pc, #44]	; (8008d38 <__libc_init_array+0x40>)
 8008d0a:	4c0c      	ldr	r4, [pc, #48]	; (8008d3c <__libc_init_array+0x44>)
 8008d0c:	f000 fcb8 	bl	8009680 <_init>
 8008d10:	1b64      	subs	r4, r4, r5
 8008d12:	10a4      	asrs	r4, r4, #2
 8008d14:	2600      	movs	r6, #0
 8008d16:	42a6      	cmp	r6, r4
 8008d18:	d105      	bne.n	8008d26 <__libc_init_array+0x2e>
 8008d1a:	bd70      	pop	{r4, r5, r6, pc}
 8008d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d20:	4798      	blx	r3
 8008d22:	3601      	adds	r6, #1
 8008d24:	e7ee      	b.n	8008d04 <__libc_init_array+0xc>
 8008d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d2a:	4798      	blx	r3
 8008d2c:	3601      	adds	r6, #1
 8008d2e:	e7f2      	b.n	8008d16 <__libc_init_array+0x1e>
 8008d30:	080098b0 	.word	0x080098b0
 8008d34:	080098b0 	.word	0x080098b0
 8008d38:	080098b0 	.word	0x080098b0
 8008d3c:	080098b4 	.word	0x080098b4

08008d40 <__retarget_lock_acquire_recursive>:
 8008d40:	4770      	bx	lr

08008d42 <__retarget_lock_release_recursive>:
 8008d42:	4770      	bx	lr

08008d44 <memcpy>:
 8008d44:	440a      	add	r2, r1
 8008d46:	4291      	cmp	r1, r2
 8008d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d4c:	d100      	bne.n	8008d50 <memcpy+0xc>
 8008d4e:	4770      	bx	lr
 8008d50:	b510      	push	{r4, lr}
 8008d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d5a:	4291      	cmp	r1, r2
 8008d5c:	d1f9      	bne.n	8008d52 <memcpy+0xe>
 8008d5e:	bd10      	pop	{r4, pc}

08008d60 <memset>:
 8008d60:	4402      	add	r2, r0
 8008d62:	4603      	mov	r3, r0
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d100      	bne.n	8008d6a <memset+0xa>
 8008d68:	4770      	bx	lr
 8008d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d6e:	e7f9      	b.n	8008d64 <memset+0x4>

08008d70 <_malloc_r>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	1ccd      	adds	r5, r1, #3
 8008d74:	f025 0503 	bic.w	r5, r5, #3
 8008d78:	3508      	adds	r5, #8
 8008d7a:	2d0c      	cmp	r5, #12
 8008d7c:	bf38      	it	cc
 8008d7e:	250c      	movcc	r5, #12
 8008d80:	2d00      	cmp	r5, #0
 8008d82:	4606      	mov	r6, r0
 8008d84:	db01      	blt.n	8008d8a <_malloc_r+0x1a>
 8008d86:	42a9      	cmp	r1, r5
 8008d88:	d903      	bls.n	8008d92 <_malloc_r+0x22>
 8008d8a:	230c      	movs	r3, #12
 8008d8c:	6033      	str	r3, [r6, #0]
 8008d8e:	2000      	movs	r0, #0
 8008d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d92:	f000 f8e1 	bl	8008f58 <__malloc_lock>
 8008d96:	4921      	ldr	r1, [pc, #132]	; (8008e1c <_malloc_r+0xac>)
 8008d98:	680a      	ldr	r2, [r1, #0]
 8008d9a:	4614      	mov	r4, r2
 8008d9c:	b99c      	cbnz	r4, 8008dc6 <_malloc_r+0x56>
 8008d9e:	4f20      	ldr	r7, [pc, #128]	; (8008e20 <_malloc_r+0xb0>)
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	b923      	cbnz	r3, 8008dae <_malloc_r+0x3e>
 8008da4:	4621      	mov	r1, r4
 8008da6:	4630      	mov	r0, r6
 8008da8:	f000 f8a6 	bl	8008ef8 <_sbrk_r>
 8008dac:	6038      	str	r0, [r7, #0]
 8008dae:	4629      	mov	r1, r5
 8008db0:	4630      	mov	r0, r6
 8008db2:	f000 f8a1 	bl	8008ef8 <_sbrk_r>
 8008db6:	1c43      	adds	r3, r0, #1
 8008db8:	d123      	bne.n	8008e02 <_malloc_r+0x92>
 8008dba:	230c      	movs	r3, #12
 8008dbc:	6033      	str	r3, [r6, #0]
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f000 f8d0 	bl	8008f64 <__malloc_unlock>
 8008dc4:	e7e3      	b.n	8008d8e <_malloc_r+0x1e>
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	1b5b      	subs	r3, r3, r5
 8008dca:	d417      	bmi.n	8008dfc <_malloc_r+0x8c>
 8008dcc:	2b0b      	cmp	r3, #11
 8008dce:	d903      	bls.n	8008dd8 <_malloc_r+0x68>
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	441c      	add	r4, r3
 8008dd4:	6025      	str	r5, [r4, #0]
 8008dd6:	e004      	b.n	8008de2 <_malloc_r+0x72>
 8008dd8:	6863      	ldr	r3, [r4, #4]
 8008dda:	42a2      	cmp	r2, r4
 8008ddc:	bf0c      	ite	eq
 8008dde:	600b      	streq	r3, [r1, #0]
 8008de0:	6053      	strne	r3, [r2, #4]
 8008de2:	4630      	mov	r0, r6
 8008de4:	f000 f8be 	bl	8008f64 <__malloc_unlock>
 8008de8:	f104 000b 	add.w	r0, r4, #11
 8008dec:	1d23      	adds	r3, r4, #4
 8008dee:	f020 0007 	bic.w	r0, r0, #7
 8008df2:	1ac2      	subs	r2, r0, r3
 8008df4:	d0cc      	beq.n	8008d90 <_malloc_r+0x20>
 8008df6:	1a1b      	subs	r3, r3, r0
 8008df8:	50a3      	str	r3, [r4, r2]
 8008dfa:	e7c9      	b.n	8008d90 <_malloc_r+0x20>
 8008dfc:	4622      	mov	r2, r4
 8008dfe:	6864      	ldr	r4, [r4, #4]
 8008e00:	e7cc      	b.n	8008d9c <_malloc_r+0x2c>
 8008e02:	1cc4      	adds	r4, r0, #3
 8008e04:	f024 0403 	bic.w	r4, r4, #3
 8008e08:	42a0      	cmp	r0, r4
 8008e0a:	d0e3      	beq.n	8008dd4 <_malloc_r+0x64>
 8008e0c:	1a21      	subs	r1, r4, r0
 8008e0e:	4630      	mov	r0, r6
 8008e10:	f000 f872 	bl	8008ef8 <_sbrk_r>
 8008e14:	3001      	adds	r0, #1
 8008e16:	d1dd      	bne.n	8008dd4 <_malloc_r+0x64>
 8008e18:	e7cf      	b.n	8008dba <_malloc_r+0x4a>
 8008e1a:	bf00      	nop
 8008e1c:	2000466c 	.word	0x2000466c
 8008e20:	20004670 	.word	0x20004670

08008e24 <cleanup_glue>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	460c      	mov	r4, r1
 8008e28:	6809      	ldr	r1, [r1, #0]
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	b109      	cbz	r1, 8008e32 <cleanup_glue+0xe>
 8008e2e:	f7ff fff9 	bl	8008e24 <cleanup_glue>
 8008e32:	4621      	mov	r1, r4
 8008e34:	4628      	mov	r0, r5
 8008e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e3a:	f000 b899 	b.w	8008f70 <_free_r>
	...

08008e40 <_reclaim_reent>:
 8008e40:	4b2c      	ldr	r3, [pc, #176]	; (8008ef4 <_reclaim_reent+0xb4>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4283      	cmp	r3, r0
 8008e46:	b570      	push	{r4, r5, r6, lr}
 8008e48:	4604      	mov	r4, r0
 8008e4a:	d051      	beq.n	8008ef0 <_reclaim_reent+0xb0>
 8008e4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008e4e:	b143      	cbz	r3, 8008e62 <_reclaim_reent+0x22>
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d14a      	bne.n	8008eec <_reclaim_reent+0xac>
 8008e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e58:	6819      	ldr	r1, [r3, #0]
 8008e5a:	b111      	cbz	r1, 8008e62 <_reclaim_reent+0x22>
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f000 f887 	bl	8008f70 <_free_r>
 8008e62:	6961      	ldr	r1, [r4, #20]
 8008e64:	b111      	cbz	r1, 8008e6c <_reclaim_reent+0x2c>
 8008e66:	4620      	mov	r0, r4
 8008e68:	f000 f882 	bl	8008f70 <_free_r>
 8008e6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008e6e:	b111      	cbz	r1, 8008e76 <_reclaim_reent+0x36>
 8008e70:	4620      	mov	r0, r4
 8008e72:	f000 f87d 	bl	8008f70 <_free_r>
 8008e76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008e78:	b111      	cbz	r1, 8008e80 <_reclaim_reent+0x40>
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 f878 	bl	8008f70 <_free_r>
 8008e80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008e82:	b111      	cbz	r1, 8008e8a <_reclaim_reent+0x4a>
 8008e84:	4620      	mov	r0, r4
 8008e86:	f000 f873 	bl	8008f70 <_free_r>
 8008e8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008e8c:	b111      	cbz	r1, 8008e94 <_reclaim_reent+0x54>
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 f86e 	bl	8008f70 <_free_r>
 8008e94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008e96:	b111      	cbz	r1, 8008e9e <_reclaim_reent+0x5e>
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f000 f869 	bl	8008f70 <_free_r>
 8008e9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008ea0:	b111      	cbz	r1, 8008ea8 <_reclaim_reent+0x68>
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 f864 	bl	8008f70 <_free_r>
 8008ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eaa:	b111      	cbz	r1, 8008eb2 <_reclaim_reent+0x72>
 8008eac:	4620      	mov	r0, r4
 8008eae:	f000 f85f 	bl	8008f70 <_free_r>
 8008eb2:	69a3      	ldr	r3, [r4, #24]
 8008eb4:	b1e3      	cbz	r3, 8008ef0 <_reclaim_reent+0xb0>
 8008eb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008eb8:	4620      	mov	r0, r4
 8008eba:	4798      	blx	r3
 8008ebc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008ebe:	b1b9      	cbz	r1, 8008ef0 <_reclaim_reent+0xb0>
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ec6:	f7ff bfad 	b.w	8008e24 <cleanup_glue>
 8008eca:	5949      	ldr	r1, [r1, r5]
 8008ecc:	b941      	cbnz	r1, 8008ee0 <_reclaim_reent+0xa0>
 8008ece:	3504      	adds	r5, #4
 8008ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ed2:	2d80      	cmp	r5, #128	; 0x80
 8008ed4:	68d9      	ldr	r1, [r3, #12]
 8008ed6:	d1f8      	bne.n	8008eca <_reclaim_reent+0x8a>
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f000 f849 	bl	8008f70 <_free_r>
 8008ede:	e7ba      	b.n	8008e56 <_reclaim_reent+0x16>
 8008ee0:	680e      	ldr	r6, [r1, #0]
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f000 f844 	bl	8008f70 <_free_r>
 8008ee8:	4631      	mov	r1, r6
 8008eea:	e7ef      	b.n	8008ecc <_reclaim_reent+0x8c>
 8008eec:	2500      	movs	r5, #0
 8008eee:	e7ef      	b.n	8008ed0 <_reclaim_reent+0x90>
 8008ef0:	bd70      	pop	{r4, r5, r6, pc}
 8008ef2:	bf00      	nop
 8008ef4:	20000020 	.word	0x20000020

08008ef8 <_sbrk_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4d06      	ldr	r5, [pc, #24]	; (8008f14 <_sbrk_r+0x1c>)
 8008efc:	2300      	movs	r3, #0
 8008efe:	4604      	mov	r4, r0
 8008f00:	4608      	mov	r0, r1
 8008f02:	602b      	str	r3, [r5, #0]
 8008f04:	f7fa ff9c 	bl	8003e40 <_sbrk>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d102      	bne.n	8008f12 <_sbrk_r+0x1a>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	b103      	cbz	r3, 8008f12 <_sbrk_r+0x1a>
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	20004878 	.word	0x20004878

08008f18 <siprintf>:
 8008f18:	b40e      	push	{r1, r2, r3}
 8008f1a:	b500      	push	{lr}
 8008f1c:	b09c      	sub	sp, #112	; 0x70
 8008f1e:	ab1d      	add	r3, sp, #116	; 0x74
 8008f20:	9002      	str	r0, [sp, #8]
 8008f22:	9006      	str	r0, [sp, #24]
 8008f24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f28:	4809      	ldr	r0, [pc, #36]	; (8008f50 <siprintf+0x38>)
 8008f2a:	9107      	str	r1, [sp, #28]
 8008f2c:	9104      	str	r1, [sp, #16]
 8008f2e:	4909      	ldr	r1, [pc, #36]	; (8008f54 <siprintf+0x3c>)
 8008f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f34:	9105      	str	r1, [sp, #20]
 8008f36:	6800      	ldr	r0, [r0, #0]
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	a902      	add	r1, sp, #8
 8008f3c:	f000 f8c4 	bl	80090c8 <_svfiprintf_r>
 8008f40:	9b02      	ldr	r3, [sp, #8]
 8008f42:	2200      	movs	r2, #0
 8008f44:	701a      	strb	r2, [r3, #0]
 8008f46:	b01c      	add	sp, #112	; 0x70
 8008f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f4c:	b003      	add	sp, #12
 8008f4e:	4770      	bx	lr
 8008f50:	20000020 	.word	0x20000020
 8008f54:	ffff0208 	.word	0xffff0208

08008f58 <__malloc_lock>:
 8008f58:	4801      	ldr	r0, [pc, #4]	; (8008f60 <__malloc_lock+0x8>)
 8008f5a:	f7ff bef1 	b.w	8008d40 <__retarget_lock_acquire_recursive>
 8008f5e:	bf00      	nop
 8008f60:	20004870 	.word	0x20004870

08008f64 <__malloc_unlock>:
 8008f64:	4801      	ldr	r0, [pc, #4]	; (8008f6c <__malloc_unlock+0x8>)
 8008f66:	f7ff beec 	b.w	8008d42 <__retarget_lock_release_recursive>
 8008f6a:	bf00      	nop
 8008f6c:	20004870 	.word	0x20004870

08008f70 <_free_r>:
 8008f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f72:	2900      	cmp	r1, #0
 8008f74:	d048      	beq.n	8009008 <_free_r+0x98>
 8008f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f7a:	9001      	str	r0, [sp, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f1a1 0404 	sub.w	r4, r1, #4
 8008f82:	bfb8      	it	lt
 8008f84:	18e4      	addlt	r4, r4, r3
 8008f86:	f7ff ffe7 	bl	8008f58 <__malloc_lock>
 8008f8a:	4a20      	ldr	r2, [pc, #128]	; (800900c <_free_r+0x9c>)
 8008f8c:	9801      	ldr	r0, [sp, #4]
 8008f8e:	6813      	ldr	r3, [r2, #0]
 8008f90:	4615      	mov	r5, r2
 8008f92:	b933      	cbnz	r3, 8008fa2 <_free_r+0x32>
 8008f94:	6063      	str	r3, [r4, #4]
 8008f96:	6014      	str	r4, [r2, #0]
 8008f98:	b003      	add	sp, #12
 8008f9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f9e:	f7ff bfe1 	b.w	8008f64 <__malloc_unlock>
 8008fa2:	42a3      	cmp	r3, r4
 8008fa4:	d90b      	bls.n	8008fbe <_free_r+0x4e>
 8008fa6:	6821      	ldr	r1, [r4, #0]
 8008fa8:	1862      	adds	r2, r4, r1
 8008faa:	4293      	cmp	r3, r2
 8008fac:	bf04      	itt	eq
 8008fae:	681a      	ldreq	r2, [r3, #0]
 8008fb0:	685b      	ldreq	r3, [r3, #4]
 8008fb2:	6063      	str	r3, [r4, #4]
 8008fb4:	bf04      	itt	eq
 8008fb6:	1852      	addeq	r2, r2, r1
 8008fb8:	6022      	streq	r2, [r4, #0]
 8008fba:	602c      	str	r4, [r5, #0]
 8008fbc:	e7ec      	b.n	8008f98 <_free_r+0x28>
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	b10b      	cbz	r3, 8008fc8 <_free_r+0x58>
 8008fc4:	42a3      	cmp	r3, r4
 8008fc6:	d9fa      	bls.n	8008fbe <_free_r+0x4e>
 8008fc8:	6811      	ldr	r1, [r2, #0]
 8008fca:	1855      	adds	r5, r2, r1
 8008fcc:	42a5      	cmp	r5, r4
 8008fce:	d10b      	bne.n	8008fe8 <_free_r+0x78>
 8008fd0:	6824      	ldr	r4, [r4, #0]
 8008fd2:	4421      	add	r1, r4
 8008fd4:	1854      	adds	r4, r2, r1
 8008fd6:	42a3      	cmp	r3, r4
 8008fd8:	6011      	str	r1, [r2, #0]
 8008fda:	d1dd      	bne.n	8008f98 <_free_r+0x28>
 8008fdc:	681c      	ldr	r4, [r3, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	6053      	str	r3, [r2, #4]
 8008fe2:	4421      	add	r1, r4
 8008fe4:	6011      	str	r1, [r2, #0]
 8008fe6:	e7d7      	b.n	8008f98 <_free_r+0x28>
 8008fe8:	d902      	bls.n	8008ff0 <_free_r+0x80>
 8008fea:	230c      	movs	r3, #12
 8008fec:	6003      	str	r3, [r0, #0]
 8008fee:	e7d3      	b.n	8008f98 <_free_r+0x28>
 8008ff0:	6825      	ldr	r5, [r4, #0]
 8008ff2:	1961      	adds	r1, r4, r5
 8008ff4:	428b      	cmp	r3, r1
 8008ff6:	bf04      	itt	eq
 8008ff8:	6819      	ldreq	r1, [r3, #0]
 8008ffa:	685b      	ldreq	r3, [r3, #4]
 8008ffc:	6063      	str	r3, [r4, #4]
 8008ffe:	bf04      	itt	eq
 8009000:	1949      	addeq	r1, r1, r5
 8009002:	6021      	streq	r1, [r4, #0]
 8009004:	6054      	str	r4, [r2, #4]
 8009006:	e7c7      	b.n	8008f98 <_free_r+0x28>
 8009008:	b003      	add	sp, #12
 800900a:	bd30      	pop	{r4, r5, pc}
 800900c:	2000466c 	.word	0x2000466c

08009010 <__ssputs_r>:
 8009010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009014:	688e      	ldr	r6, [r1, #8]
 8009016:	429e      	cmp	r6, r3
 8009018:	4682      	mov	sl, r0
 800901a:	460c      	mov	r4, r1
 800901c:	4690      	mov	r8, r2
 800901e:	461f      	mov	r7, r3
 8009020:	d838      	bhi.n	8009094 <__ssputs_r+0x84>
 8009022:	898a      	ldrh	r2, [r1, #12]
 8009024:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009028:	d032      	beq.n	8009090 <__ssputs_r+0x80>
 800902a:	6825      	ldr	r5, [r4, #0]
 800902c:	6909      	ldr	r1, [r1, #16]
 800902e:	eba5 0901 	sub.w	r9, r5, r1
 8009032:	6965      	ldr	r5, [r4, #20]
 8009034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800903c:	3301      	adds	r3, #1
 800903e:	444b      	add	r3, r9
 8009040:	106d      	asrs	r5, r5, #1
 8009042:	429d      	cmp	r5, r3
 8009044:	bf38      	it	cc
 8009046:	461d      	movcc	r5, r3
 8009048:	0553      	lsls	r3, r2, #21
 800904a:	d531      	bpl.n	80090b0 <__ssputs_r+0xa0>
 800904c:	4629      	mov	r1, r5
 800904e:	f7ff fe8f 	bl	8008d70 <_malloc_r>
 8009052:	4606      	mov	r6, r0
 8009054:	b950      	cbnz	r0, 800906c <__ssputs_r+0x5c>
 8009056:	230c      	movs	r3, #12
 8009058:	f8ca 3000 	str.w	r3, [sl]
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009062:	81a3      	strh	r3, [r4, #12]
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906c:	6921      	ldr	r1, [r4, #16]
 800906e:	464a      	mov	r2, r9
 8009070:	f7ff fe68 	bl	8008d44 <memcpy>
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800907a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800907e:	81a3      	strh	r3, [r4, #12]
 8009080:	6126      	str	r6, [r4, #16]
 8009082:	6165      	str	r5, [r4, #20]
 8009084:	444e      	add	r6, r9
 8009086:	eba5 0509 	sub.w	r5, r5, r9
 800908a:	6026      	str	r6, [r4, #0]
 800908c:	60a5      	str	r5, [r4, #8]
 800908e:	463e      	mov	r6, r7
 8009090:	42be      	cmp	r6, r7
 8009092:	d900      	bls.n	8009096 <__ssputs_r+0x86>
 8009094:	463e      	mov	r6, r7
 8009096:	4632      	mov	r2, r6
 8009098:	6820      	ldr	r0, [r4, #0]
 800909a:	4641      	mov	r1, r8
 800909c:	f000 faa8 	bl	80095f0 <memmove>
 80090a0:	68a3      	ldr	r3, [r4, #8]
 80090a2:	6822      	ldr	r2, [r4, #0]
 80090a4:	1b9b      	subs	r3, r3, r6
 80090a6:	4432      	add	r2, r6
 80090a8:	60a3      	str	r3, [r4, #8]
 80090aa:	6022      	str	r2, [r4, #0]
 80090ac:	2000      	movs	r0, #0
 80090ae:	e7db      	b.n	8009068 <__ssputs_r+0x58>
 80090b0:	462a      	mov	r2, r5
 80090b2:	f000 fab7 	bl	8009624 <_realloc_r>
 80090b6:	4606      	mov	r6, r0
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d1e1      	bne.n	8009080 <__ssputs_r+0x70>
 80090bc:	6921      	ldr	r1, [r4, #16]
 80090be:	4650      	mov	r0, sl
 80090c0:	f7ff ff56 	bl	8008f70 <_free_r>
 80090c4:	e7c7      	b.n	8009056 <__ssputs_r+0x46>
	...

080090c8 <_svfiprintf_r>:
 80090c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090cc:	4698      	mov	r8, r3
 80090ce:	898b      	ldrh	r3, [r1, #12]
 80090d0:	061b      	lsls	r3, r3, #24
 80090d2:	b09d      	sub	sp, #116	; 0x74
 80090d4:	4607      	mov	r7, r0
 80090d6:	460d      	mov	r5, r1
 80090d8:	4614      	mov	r4, r2
 80090da:	d50e      	bpl.n	80090fa <_svfiprintf_r+0x32>
 80090dc:	690b      	ldr	r3, [r1, #16]
 80090de:	b963      	cbnz	r3, 80090fa <_svfiprintf_r+0x32>
 80090e0:	2140      	movs	r1, #64	; 0x40
 80090e2:	f7ff fe45 	bl	8008d70 <_malloc_r>
 80090e6:	6028      	str	r0, [r5, #0]
 80090e8:	6128      	str	r0, [r5, #16]
 80090ea:	b920      	cbnz	r0, 80090f6 <_svfiprintf_r+0x2e>
 80090ec:	230c      	movs	r3, #12
 80090ee:	603b      	str	r3, [r7, #0]
 80090f0:	f04f 30ff 	mov.w	r0, #4294967295
 80090f4:	e0d1      	b.n	800929a <_svfiprintf_r+0x1d2>
 80090f6:	2340      	movs	r3, #64	; 0x40
 80090f8:	616b      	str	r3, [r5, #20]
 80090fa:	2300      	movs	r3, #0
 80090fc:	9309      	str	r3, [sp, #36]	; 0x24
 80090fe:	2320      	movs	r3, #32
 8009100:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009104:	f8cd 800c 	str.w	r8, [sp, #12]
 8009108:	2330      	movs	r3, #48	; 0x30
 800910a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80092b4 <_svfiprintf_r+0x1ec>
 800910e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009112:	f04f 0901 	mov.w	r9, #1
 8009116:	4623      	mov	r3, r4
 8009118:	469a      	mov	sl, r3
 800911a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800911e:	b10a      	cbz	r2, 8009124 <_svfiprintf_r+0x5c>
 8009120:	2a25      	cmp	r2, #37	; 0x25
 8009122:	d1f9      	bne.n	8009118 <_svfiprintf_r+0x50>
 8009124:	ebba 0b04 	subs.w	fp, sl, r4
 8009128:	d00b      	beq.n	8009142 <_svfiprintf_r+0x7a>
 800912a:	465b      	mov	r3, fp
 800912c:	4622      	mov	r2, r4
 800912e:	4629      	mov	r1, r5
 8009130:	4638      	mov	r0, r7
 8009132:	f7ff ff6d 	bl	8009010 <__ssputs_r>
 8009136:	3001      	adds	r0, #1
 8009138:	f000 80aa 	beq.w	8009290 <_svfiprintf_r+0x1c8>
 800913c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800913e:	445a      	add	r2, fp
 8009140:	9209      	str	r2, [sp, #36]	; 0x24
 8009142:	f89a 3000 	ldrb.w	r3, [sl]
 8009146:	2b00      	cmp	r3, #0
 8009148:	f000 80a2 	beq.w	8009290 <_svfiprintf_r+0x1c8>
 800914c:	2300      	movs	r3, #0
 800914e:	f04f 32ff 	mov.w	r2, #4294967295
 8009152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009156:	f10a 0a01 	add.w	sl, sl, #1
 800915a:	9304      	str	r3, [sp, #16]
 800915c:	9307      	str	r3, [sp, #28]
 800915e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009162:	931a      	str	r3, [sp, #104]	; 0x68
 8009164:	4654      	mov	r4, sl
 8009166:	2205      	movs	r2, #5
 8009168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800916c:	4851      	ldr	r0, [pc, #324]	; (80092b4 <_svfiprintf_r+0x1ec>)
 800916e:	f7f7 f83f 	bl	80001f0 <memchr>
 8009172:	9a04      	ldr	r2, [sp, #16]
 8009174:	b9d8      	cbnz	r0, 80091ae <_svfiprintf_r+0xe6>
 8009176:	06d0      	lsls	r0, r2, #27
 8009178:	bf44      	itt	mi
 800917a:	2320      	movmi	r3, #32
 800917c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009180:	0711      	lsls	r1, r2, #28
 8009182:	bf44      	itt	mi
 8009184:	232b      	movmi	r3, #43	; 0x2b
 8009186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800918a:	f89a 3000 	ldrb.w	r3, [sl]
 800918e:	2b2a      	cmp	r3, #42	; 0x2a
 8009190:	d015      	beq.n	80091be <_svfiprintf_r+0xf6>
 8009192:	9a07      	ldr	r2, [sp, #28]
 8009194:	4654      	mov	r4, sl
 8009196:	2000      	movs	r0, #0
 8009198:	f04f 0c0a 	mov.w	ip, #10
 800919c:	4621      	mov	r1, r4
 800919e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091a2:	3b30      	subs	r3, #48	; 0x30
 80091a4:	2b09      	cmp	r3, #9
 80091a6:	d94e      	bls.n	8009246 <_svfiprintf_r+0x17e>
 80091a8:	b1b0      	cbz	r0, 80091d8 <_svfiprintf_r+0x110>
 80091aa:	9207      	str	r2, [sp, #28]
 80091ac:	e014      	b.n	80091d8 <_svfiprintf_r+0x110>
 80091ae:	eba0 0308 	sub.w	r3, r0, r8
 80091b2:	fa09 f303 	lsl.w	r3, r9, r3
 80091b6:	4313      	orrs	r3, r2
 80091b8:	9304      	str	r3, [sp, #16]
 80091ba:	46a2      	mov	sl, r4
 80091bc:	e7d2      	b.n	8009164 <_svfiprintf_r+0x9c>
 80091be:	9b03      	ldr	r3, [sp, #12]
 80091c0:	1d19      	adds	r1, r3, #4
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	9103      	str	r1, [sp, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	bfbb      	ittet	lt
 80091ca:	425b      	neglt	r3, r3
 80091cc:	f042 0202 	orrlt.w	r2, r2, #2
 80091d0:	9307      	strge	r3, [sp, #28]
 80091d2:	9307      	strlt	r3, [sp, #28]
 80091d4:	bfb8      	it	lt
 80091d6:	9204      	strlt	r2, [sp, #16]
 80091d8:	7823      	ldrb	r3, [r4, #0]
 80091da:	2b2e      	cmp	r3, #46	; 0x2e
 80091dc:	d10c      	bne.n	80091f8 <_svfiprintf_r+0x130>
 80091de:	7863      	ldrb	r3, [r4, #1]
 80091e0:	2b2a      	cmp	r3, #42	; 0x2a
 80091e2:	d135      	bne.n	8009250 <_svfiprintf_r+0x188>
 80091e4:	9b03      	ldr	r3, [sp, #12]
 80091e6:	1d1a      	adds	r2, r3, #4
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	9203      	str	r2, [sp, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	bfb8      	it	lt
 80091f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80091f4:	3402      	adds	r4, #2
 80091f6:	9305      	str	r3, [sp, #20]
 80091f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092c4 <_svfiprintf_r+0x1fc>
 80091fc:	7821      	ldrb	r1, [r4, #0]
 80091fe:	2203      	movs	r2, #3
 8009200:	4650      	mov	r0, sl
 8009202:	f7f6 fff5 	bl	80001f0 <memchr>
 8009206:	b140      	cbz	r0, 800921a <_svfiprintf_r+0x152>
 8009208:	2340      	movs	r3, #64	; 0x40
 800920a:	eba0 000a 	sub.w	r0, r0, sl
 800920e:	fa03 f000 	lsl.w	r0, r3, r0
 8009212:	9b04      	ldr	r3, [sp, #16]
 8009214:	4303      	orrs	r3, r0
 8009216:	3401      	adds	r4, #1
 8009218:	9304      	str	r3, [sp, #16]
 800921a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800921e:	4826      	ldr	r0, [pc, #152]	; (80092b8 <_svfiprintf_r+0x1f0>)
 8009220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009224:	2206      	movs	r2, #6
 8009226:	f7f6 ffe3 	bl	80001f0 <memchr>
 800922a:	2800      	cmp	r0, #0
 800922c:	d038      	beq.n	80092a0 <_svfiprintf_r+0x1d8>
 800922e:	4b23      	ldr	r3, [pc, #140]	; (80092bc <_svfiprintf_r+0x1f4>)
 8009230:	bb1b      	cbnz	r3, 800927a <_svfiprintf_r+0x1b2>
 8009232:	9b03      	ldr	r3, [sp, #12]
 8009234:	3307      	adds	r3, #7
 8009236:	f023 0307 	bic.w	r3, r3, #7
 800923a:	3308      	adds	r3, #8
 800923c:	9303      	str	r3, [sp, #12]
 800923e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009240:	4433      	add	r3, r6
 8009242:	9309      	str	r3, [sp, #36]	; 0x24
 8009244:	e767      	b.n	8009116 <_svfiprintf_r+0x4e>
 8009246:	fb0c 3202 	mla	r2, ip, r2, r3
 800924a:	460c      	mov	r4, r1
 800924c:	2001      	movs	r0, #1
 800924e:	e7a5      	b.n	800919c <_svfiprintf_r+0xd4>
 8009250:	2300      	movs	r3, #0
 8009252:	3401      	adds	r4, #1
 8009254:	9305      	str	r3, [sp, #20]
 8009256:	4619      	mov	r1, r3
 8009258:	f04f 0c0a 	mov.w	ip, #10
 800925c:	4620      	mov	r0, r4
 800925e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009262:	3a30      	subs	r2, #48	; 0x30
 8009264:	2a09      	cmp	r2, #9
 8009266:	d903      	bls.n	8009270 <_svfiprintf_r+0x1a8>
 8009268:	2b00      	cmp	r3, #0
 800926a:	d0c5      	beq.n	80091f8 <_svfiprintf_r+0x130>
 800926c:	9105      	str	r1, [sp, #20]
 800926e:	e7c3      	b.n	80091f8 <_svfiprintf_r+0x130>
 8009270:	fb0c 2101 	mla	r1, ip, r1, r2
 8009274:	4604      	mov	r4, r0
 8009276:	2301      	movs	r3, #1
 8009278:	e7f0      	b.n	800925c <_svfiprintf_r+0x194>
 800927a:	ab03      	add	r3, sp, #12
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	462a      	mov	r2, r5
 8009280:	4b0f      	ldr	r3, [pc, #60]	; (80092c0 <_svfiprintf_r+0x1f8>)
 8009282:	a904      	add	r1, sp, #16
 8009284:	4638      	mov	r0, r7
 8009286:	f3af 8000 	nop.w
 800928a:	1c42      	adds	r2, r0, #1
 800928c:	4606      	mov	r6, r0
 800928e:	d1d6      	bne.n	800923e <_svfiprintf_r+0x176>
 8009290:	89ab      	ldrh	r3, [r5, #12]
 8009292:	065b      	lsls	r3, r3, #25
 8009294:	f53f af2c 	bmi.w	80090f0 <_svfiprintf_r+0x28>
 8009298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800929a:	b01d      	add	sp, #116	; 0x74
 800929c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a0:	ab03      	add	r3, sp, #12
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	462a      	mov	r2, r5
 80092a6:	4b06      	ldr	r3, [pc, #24]	; (80092c0 <_svfiprintf_r+0x1f8>)
 80092a8:	a904      	add	r1, sp, #16
 80092aa:	4638      	mov	r0, r7
 80092ac:	f000 f87a 	bl	80093a4 <_printf_i>
 80092b0:	e7eb      	b.n	800928a <_svfiprintf_r+0x1c2>
 80092b2:	bf00      	nop
 80092b4:	08009874 	.word	0x08009874
 80092b8:	0800987e 	.word	0x0800987e
 80092bc:	00000000 	.word	0x00000000
 80092c0:	08009011 	.word	0x08009011
 80092c4:	0800987a 	.word	0x0800987a

080092c8 <_printf_common>:
 80092c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092cc:	4616      	mov	r6, r2
 80092ce:	4699      	mov	r9, r3
 80092d0:	688a      	ldr	r2, [r1, #8]
 80092d2:	690b      	ldr	r3, [r1, #16]
 80092d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092d8:	4293      	cmp	r3, r2
 80092da:	bfb8      	it	lt
 80092dc:	4613      	movlt	r3, r2
 80092de:	6033      	str	r3, [r6, #0]
 80092e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092e4:	4607      	mov	r7, r0
 80092e6:	460c      	mov	r4, r1
 80092e8:	b10a      	cbz	r2, 80092ee <_printf_common+0x26>
 80092ea:	3301      	adds	r3, #1
 80092ec:	6033      	str	r3, [r6, #0]
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	0699      	lsls	r1, r3, #26
 80092f2:	bf42      	ittt	mi
 80092f4:	6833      	ldrmi	r3, [r6, #0]
 80092f6:	3302      	addmi	r3, #2
 80092f8:	6033      	strmi	r3, [r6, #0]
 80092fa:	6825      	ldr	r5, [r4, #0]
 80092fc:	f015 0506 	ands.w	r5, r5, #6
 8009300:	d106      	bne.n	8009310 <_printf_common+0x48>
 8009302:	f104 0a19 	add.w	sl, r4, #25
 8009306:	68e3      	ldr	r3, [r4, #12]
 8009308:	6832      	ldr	r2, [r6, #0]
 800930a:	1a9b      	subs	r3, r3, r2
 800930c:	42ab      	cmp	r3, r5
 800930e:	dc26      	bgt.n	800935e <_printf_common+0x96>
 8009310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009314:	1e13      	subs	r3, r2, #0
 8009316:	6822      	ldr	r2, [r4, #0]
 8009318:	bf18      	it	ne
 800931a:	2301      	movne	r3, #1
 800931c:	0692      	lsls	r2, r2, #26
 800931e:	d42b      	bmi.n	8009378 <_printf_common+0xb0>
 8009320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009324:	4649      	mov	r1, r9
 8009326:	4638      	mov	r0, r7
 8009328:	47c0      	blx	r8
 800932a:	3001      	adds	r0, #1
 800932c:	d01e      	beq.n	800936c <_printf_common+0xa4>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	68e5      	ldr	r5, [r4, #12]
 8009332:	6832      	ldr	r2, [r6, #0]
 8009334:	f003 0306 	and.w	r3, r3, #6
 8009338:	2b04      	cmp	r3, #4
 800933a:	bf08      	it	eq
 800933c:	1aad      	subeq	r5, r5, r2
 800933e:	68a3      	ldr	r3, [r4, #8]
 8009340:	6922      	ldr	r2, [r4, #16]
 8009342:	bf0c      	ite	eq
 8009344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009348:	2500      	movne	r5, #0
 800934a:	4293      	cmp	r3, r2
 800934c:	bfc4      	itt	gt
 800934e:	1a9b      	subgt	r3, r3, r2
 8009350:	18ed      	addgt	r5, r5, r3
 8009352:	2600      	movs	r6, #0
 8009354:	341a      	adds	r4, #26
 8009356:	42b5      	cmp	r5, r6
 8009358:	d11a      	bne.n	8009390 <_printf_common+0xc8>
 800935a:	2000      	movs	r0, #0
 800935c:	e008      	b.n	8009370 <_printf_common+0xa8>
 800935e:	2301      	movs	r3, #1
 8009360:	4652      	mov	r2, sl
 8009362:	4649      	mov	r1, r9
 8009364:	4638      	mov	r0, r7
 8009366:	47c0      	blx	r8
 8009368:	3001      	adds	r0, #1
 800936a:	d103      	bne.n	8009374 <_printf_common+0xac>
 800936c:	f04f 30ff 	mov.w	r0, #4294967295
 8009370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009374:	3501      	adds	r5, #1
 8009376:	e7c6      	b.n	8009306 <_printf_common+0x3e>
 8009378:	18e1      	adds	r1, r4, r3
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	2030      	movs	r0, #48	; 0x30
 800937e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009382:	4422      	add	r2, r4
 8009384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800938c:	3302      	adds	r3, #2
 800938e:	e7c7      	b.n	8009320 <_printf_common+0x58>
 8009390:	2301      	movs	r3, #1
 8009392:	4622      	mov	r2, r4
 8009394:	4649      	mov	r1, r9
 8009396:	4638      	mov	r0, r7
 8009398:	47c0      	blx	r8
 800939a:	3001      	adds	r0, #1
 800939c:	d0e6      	beq.n	800936c <_printf_common+0xa4>
 800939e:	3601      	adds	r6, #1
 80093a0:	e7d9      	b.n	8009356 <_printf_common+0x8e>
	...

080093a4 <_printf_i>:
 80093a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093a8:	460c      	mov	r4, r1
 80093aa:	4691      	mov	r9, r2
 80093ac:	7e27      	ldrb	r7, [r4, #24]
 80093ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80093b0:	2f78      	cmp	r7, #120	; 0x78
 80093b2:	4680      	mov	r8, r0
 80093b4:	469a      	mov	sl, r3
 80093b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093ba:	d807      	bhi.n	80093cc <_printf_i+0x28>
 80093bc:	2f62      	cmp	r7, #98	; 0x62
 80093be:	d80a      	bhi.n	80093d6 <_printf_i+0x32>
 80093c0:	2f00      	cmp	r7, #0
 80093c2:	f000 80d8 	beq.w	8009576 <_printf_i+0x1d2>
 80093c6:	2f58      	cmp	r7, #88	; 0x58
 80093c8:	f000 80a3 	beq.w	8009512 <_printf_i+0x16e>
 80093cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80093d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093d4:	e03a      	b.n	800944c <_printf_i+0xa8>
 80093d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093da:	2b15      	cmp	r3, #21
 80093dc:	d8f6      	bhi.n	80093cc <_printf_i+0x28>
 80093de:	a001      	add	r0, pc, #4	; (adr r0, 80093e4 <_printf_i+0x40>)
 80093e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80093e4:	0800943d 	.word	0x0800943d
 80093e8:	08009451 	.word	0x08009451
 80093ec:	080093cd 	.word	0x080093cd
 80093f0:	080093cd 	.word	0x080093cd
 80093f4:	080093cd 	.word	0x080093cd
 80093f8:	080093cd 	.word	0x080093cd
 80093fc:	08009451 	.word	0x08009451
 8009400:	080093cd 	.word	0x080093cd
 8009404:	080093cd 	.word	0x080093cd
 8009408:	080093cd 	.word	0x080093cd
 800940c:	080093cd 	.word	0x080093cd
 8009410:	0800955d 	.word	0x0800955d
 8009414:	08009481 	.word	0x08009481
 8009418:	0800953f 	.word	0x0800953f
 800941c:	080093cd 	.word	0x080093cd
 8009420:	080093cd 	.word	0x080093cd
 8009424:	0800957f 	.word	0x0800957f
 8009428:	080093cd 	.word	0x080093cd
 800942c:	08009481 	.word	0x08009481
 8009430:	080093cd 	.word	0x080093cd
 8009434:	080093cd 	.word	0x080093cd
 8009438:	08009547 	.word	0x08009547
 800943c:	680b      	ldr	r3, [r1, #0]
 800943e:	1d1a      	adds	r2, r3, #4
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	600a      	str	r2, [r1, #0]
 8009444:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800944c:	2301      	movs	r3, #1
 800944e:	e0a3      	b.n	8009598 <_printf_i+0x1f4>
 8009450:	6825      	ldr	r5, [r4, #0]
 8009452:	6808      	ldr	r0, [r1, #0]
 8009454:	062e      	lsls	r6, r5, #24
 8009456:	f100 0304 	add.w	r3, r0, #4
 800945a:	d50a      	bpl.n	8009472 <_printf_i+0xce>
 800945c:	6805      	ldr	r5, [r0, #0]
 800945e:	600b      	str	r3, [r1, #0]
 8009460:	2d00      	cmp	r5, #0
 8009462:	da03      	bge.n	800946c <_printf_i+0xc8>
 8009464:	232d      	movs	r3, #45	; 0x2d
 8009466:	426d      	negs	r5, r5
 8009468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800946c:	485e      	ldr	r0, [pc, #376]	; (80095e8 <_printf_i+0x244>)
 800946e:	230a      	movs	r3, #10
 8009470:	e019      	b.n	80094a6 <_printf_i+0x102>
 8009472:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009476:	6805      	ldr	r5, [r0, #0]
 8009478:	600b      	str	r3, [r1, #0]
 800947a:	bf18      	it	ne
 800947c:	b22d      	sxthne	r5, r5
 800947e:	e7ef      	b.n	8009460 <_printf_i+0xbc>
 8009480:	680b      	ldr	r3, [r1, #0]
 8009482:	6825      	ldr	r5, [r4, #0]
 8009484:	1d18      	adds	r0, r3, #4
 8009486:	6008      	str	r0, [r1, #0]
 8009488:	0628      	lsls	r0, r5, #24
 800948a:	d501      	bpl.n	8009490 <_printf_i+0xec>
 800948c:	681d      	ldr	r5, [r3, #0]
 800948e:	e002      	b.n	8009496 <_printf_i+0xf2>
 8009490:	0669      	lsls	r1, r5, #25
 8009492:	d5fb      	bpl.n	800948c <_printf_i+0xe8>
 8009494:	881d      	ldrh	r5, [r3, #0]
 8009496:	4854      	ldr	r0, [pc, #336]	; (80095e8 <_printf_i+0x244>)
 8009498:	2f6f      	cmp	r7, #111	; 0x6f
 800949a:	bf0c      	ite	eq
 800949c:	2308      	moveq	r3, #8
 800949e:	230a      	movne	r3, #10
 80094a0:	2100      	movs	r1, #0
 80094a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094a6:	6866      	ldr	r6, [r4, #4]
 80094a8:	60a6      	str	r6, [r4, #8]
 80094aa:	2e00      	cmp	r6, #0
 80094ac:	bfa2      	ittt	ge
 80094ae:	6821      	ldrge	r1, [r4, #0]
 80094b0:	f021 0104 	bicge.w	r1, r1, #4
 80094b4:	6021      	strge	r1, [r4, #0]
 80094b6:	b90d      	cbnz	r5, 80094bc <_printf_i+0x118>
 80094b8:	2e00      	cmp	r6, #0
 80094ba:	d04d      	beq.n	8009558 <_printf_i+0x1b4>
 80094bc:	4616      	mov	r6, r2
 80094be:	fbb5 f1f3 	udiv	r1, r5, r3
 80094c2:	fb03 5711 	mls	r7, r3, r1, r5
 80094c6:	5dc7      	ldrb	r7, [r0, r7]
 80094c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094cc:	462f      	mov	r7, r5
 80094ce:	42bb      	cmp	r3, r7
 80094d0:	460d      	mov	r5, r1
 80094d2:	d9f4      	bls.n	80094be <_printf_i+0x11a>
 80094d4:	2b08      	cmp	r3, #8
 80094d6:	d10b      	bne.n	80094f0 <_printf_i+0x14c>
 80094d8:	6823      	ldr	r3, [r4, #0]
 80094da:	07df      	lsls	r7, r3, #31
 80094dc:	d508      	bpl.n	80094f0 <_printf_i+0x14c>
 80094de:	6923      	ldr	r3, [r4, #16]
 80094e0:	6861      	ldr	r1, [r4, #4]
 80094e2:	4299      	cmp	r1, r3
 80094e4:	bfde      	ittt	le
 80094e6:	2330      	movle	r3, #48	; 0x30
 80094e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094f0:	1b92      	subs	r2, r2, r6
 80094f2:	6122      	str	r2, [r4, #16]
 80094f4:	f8cd a000 	str.w	sl, [sp]
 80094f8:	464b      	mov	r3, r9
 80094fa:	aa03      	add	r2, sp, #12
 80094fc:	4621      	mov	r1, r4
 80094fe:	4640      	mov	r0, r8
 8009500:	f7ff fee2 	bl	80092c8 <_printf_common>
 8009504:	3001      	adds	r0, #1
 8009506:	d14c      	bne.n	80095a2 <_printf_i+0x1fe>
 8009508:	f04f 30ff 	mov.w	r0, #4294967295
 800950c:	b004      	add	sp, #16
 800950e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009512:	4835      	ldr	r0, [pc, #212]	; (80095e8 <_printf_i+0x244>)
 8009514:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	680e      	ldr	r6, [r1, #0]
 800951c:	061f      	lsls	r7, r3, #24
 800951e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009522:	600e      	str	r6, [r1, #0]
 8009524:	d514      	bpl.n	8009550 <_printf_i+0x1ac>
 8009526:	07d9      	lsls	r1, r3, #31
 8009528:	bf44      	itt	mi
 800952a:	f043 0320 	orrmi.w	r3, r3, #32
 800952e:	6023      	strmi	r3, [r4, #0]
 8009530:	b91d      	cbnz	r5, 800953a <_printf_i+0x196>
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	f023 0320 	bic.w	r3, r3, #32
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	2310      	movs	r3, #16
 800953c:	e7b0      	b.n	80094a0 <_printf_i+0xfc>
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	f043 0320 	orr.w	r3, r3, #32
 8009544:	6023      	str	r3, [r4, #0]
 8009546:	2378      	movs	r3, #120	; 0x78
 8009548:	4828      	ldr	r0, [pc, #160]	; (80095ec <_printf_i+0x248>)
 800954a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800954e:	e7e3      	b.n	8009518 <_printf_i+0x174>
 8009550:	065e      	lsls	r6, r3, #25
 8009552:	bf48      	it	mi
 8009554:	b2ad      	uxthmi	r5, r5
 8009556:	e7e6      	b.n	8009526 <_printf_i+0x182>
 8009558:	4616      	mov	r6, r2
 800955a:	e7bb      	b.n	80094d4 <_printf_i+0x130>
 800955c:	680b      	ldr	r3, [r1, #0]
 800955e:	6826      	ldr	r6, [r4, #0]
 8009560:	6960      	ldr	r0, [r4, #20]
 8009562:	1d1d      	adds	r5, r3, #4
 8009564:	600d      	str	r5, [r1, #0]
 8009566:	0635      	lsls	r5, r6, #24
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	d501      	bpl.n	8009570 <_printf_i+0x1cc>
 800956c:	6018      	str	r0, [r3, #0]
 800956e:	e002      	b.n	8009576 <_printf_i+0x1d2>
 8009570:	0671      	lsls	r1, r6, #25
 8009572:	d5fb      	bpl.n	800956c <_printf_i+0x1c8>
 8009574:	8018      	strh	r0, [r3, #0]
 8009576:	2300      	movs	r3, #0
 8009578:	6123      	str	r3, [r4, #16]
 800957a:	4616      	mov	r6, r2
 800957c:	e7ba      	b.n	80094f4 <_printf_i+0x150>
 800957e:	680b      	ldr	r3, [r1, #0]
 8009580:	1d1a      	adds	r2, r3, #4
 8009582:	600a      	str	r2, [r1, #0]
 8009584:	681e      	ldr	r6, [r3, #0]
 8009586:	6862      	ldr	r2, [r4, #4]
 8009588:	2100      	movs	r1, #0
 800958a:	4630      	mov	r0, r6
 800958c:	f7f6 fe30 	bl	80001f0 <memchr>
 8009590:	b108      	cbz	r0, 8009596 <_printf_i+0x1f2>
 8009592:	1b80      	subs	r0, r0, r6
 8009594:	6060      	str	r0, [r4, #4]
 8009596:	6863      	ldr	r3, [r4, #4]
 8009598:	6123      	str	r3, [r4, #16]
 800959a:	2300      	movs	r3, #0
 800959c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095a0:	e7a8      	b.n	80094f4 <_printf_i+0x150>
 80095a2:	6923      	ldr	r3, [r4, #16]
 80095a4:	4632      	mov	r2, r6
 80095a6:	4649      	mov	r1, r9
 80095a8:	4640      	mov	r0, r8
 80095aa:	47d0      	blx	sl
 80095ac:	3001      	adds	r0, #1
 80095ae:	d0ab      	beq.n	8009508 <_printf_i+0x164>
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	079b      	lsls	r3, r3, #30
 80095b4:	d413      	bmi.n	80095de <_printf_i+0x23a>
 80095b6:	68e0      	ldr	r0, [r4, #12]
 80095b8:	9b03      	ldr	r3, [sp, #12]
 80095ba:	4298      	cmp	r0, r3
 80095bc:	bfb8      	it	lt
 80095be:	4618      	movlt	r0, r3
 80095c0:	e7a4      	b.n	800950c <_printf_i+0x168>
 80095c2:	2301      	movs	r3, #1
 80095c4:	4632      	mov	r2, r6
 80095c6:	4649      	mov	r1, r9
 80095c8:	4640      	mov	r0, r8
 80095ca:	47d0      	blx	sl
 80095cc:	3001      	adds	r0, #1
 80095ce:	d09b      	beq.n	8009508 <_printf_i+0x164>
 80095d0:	3501      	adds	r5, #1
 80095d2:	68e3      	ldr	r3, [r4, #12]
 80095d4:	9903      	ldr	r1, [sp, #12]
 80095d6:	1a5b      	subs	r3, r3, r1
 80095d8:	42ab      	cmp	r3, r5
 80095da:	dcf2      	bgt.n	80095c2 <_printf_i+0x21e>
 80095dc:	e7eb      	b.n	80095b6 <_printf_i+0x212>
 80095de:	2500      	movs	r5, #0
 80095e0:	f104 0619 	add.w	r6, r4, #25
 80095e4:	e7f5      	b.n	80095d2 <_printf_i+0x22e>
 80095e6:	bf00      	nop
 80095e8:	08009885 	.word	0x08009885
 80095ec:	08009896 	.word	0x08009896

080095f0 <memmove>:
 80095f0:	4288      	cmp	r0, r1
 80095f2:	b510      	push	{r4, lr}
 80095f4:	eb01 0402 	add.w	r4, r1, r2
 80095f8:	d902      	bls.n	8009600 <memmove+0x10>
 80095fa:	4284      	cmp	r4, r0
 80095fc:	4623      	mov	r3, r4
 80095fe:	d807      	bhi.n	8009610 <memmove+0x20>
 8009600:	1e43      	subs	r3, r0, #1
 8009602:	42a1      	cmp	r1, r4
 8009604:	d008      	beq.n	8009618 <memmove+0x28>
 8009606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800960a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800960e:	e7f8      	b.n	8009602 <memmove+0x12>
 8009610:	4402      	add	r2, r0
 8009612:	4601      	mov	r1, r0
 8009614:	428a      	cmp	r2, r1
 8009616:	d100      	bne.n	800961a <memmove+0x2a>
 8009618:	bd10      	pop	{r4, pc}
 800961a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800961e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009622:	e7f7      	b.n	8009614 <memmove+0x24>

08009624 <_realloc_r>:
 8009624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009626:	4607      	mov	r7, r0
 8009628:	4614      	mov	r4, r2
 800962a:	460e      	mov	r6, r1
 800962c:	b921      	cbnz	r1, 8009638 <_realloc_r+0x14>
 800962e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009632:	4611      	mov	r1, r2
 8009634:	f7ff bb9c 	b.w	8008d70 <_malloc_r>
 8009638:	b922      	cbnz	r2, 8009644 <_realloc_r+0x20>
 800963a:	f7ff fc99 	bl	8008f70 <_free_r>
 800963e:	4625      	mov	r5, r4
 8009640:	4628      	mov	r0, r5
 8009642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009644:	f000 f814 	bl	8009670 <_malloc_usable_size_r>
 8009648:	42a0      	cmp	r0, r4
 800964a:	d20f      	bcs.n	800966c <_realloc_r+0x48>
 800964c:	4621      	mov	r1, r4
 800964e:	4638      	mov	r0, r7
 8009650:	f7ff fb8e 	bl	8008d70 <_malloc_r>
 8009654:	4605      	mov	r5, r0
 8009656:	2800      	cmp	r0, #0
 8009658:	d0f2      	beq.n	8009640 <_realloc_r+0x1c>
 800965a:	4631      	mov	r1, r6
 800965c:	4622      	mov	r2, r4
 800965e:	f7ff fb71 	bl	8008d44 <memcpy>
 8009662:	4631      	mov	r1, r6
 8009664:	4638      	mov	r0, r7
 8009666:	f7ff fc83 	bl	8008f70 <_free_r>
 800966a:	e7e9      	b.n	8009640 <_realloc_r+0x1c>
 800966c:	4635      	mov	r5, r6
 800966e:	e7e7      	b.n	8009640 <_realloc_r+0x1c>

08009670 <_malloc_usable_size_r>:
 8009670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009674:	1f18      	subs	r0, r3, #4
 8009676:	2b00      	cmp	r3, #0
 8009678:	bfbc      	itt	lt
 800967a:	580b      	ldrlt	r3, [r1, r0]
 800967c:	18c0      	addlt	r0, r0, r3
 800967e:	4770      	bx	lr

08009680 <_init>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	bf00      	nop
 8009684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009686:	bc08      	pop	{r3}
 8009688:	469e      	mov	lr, r3
 800968a:	4770      	bx	lr

0800968c <_fini>:
 800968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968e:	bf00      	nop
 8009690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009692:	bc08      	pop	{r3}
 8009694:	469e      	mov	lr, r3
 8009696:	4770      	bx	lr
